<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiasuhuei321的博客</title>
  <subtitle>做自己喜欢的事~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiasuhuei321.github.io/"/>
  <updated>2016-11-07T10:39:30.968Z</updated>
  <id>https://xiasuhuei321.github.io/</id>
  
  <author>
    <name>Luo_xiasuhuei321</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个简单能用的LoadingDialog</title>
    <link href="https://xiasuhuei321.github.io/2016/11/06/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%83%BD%E7%94%A8%E7%9A%84LoadingDialog/"/>
    <id>https://xiasuhuei321.github.io/2016/11/06/一个简单能用的LoadingDialog/</id>
    <published>2016-11-06T12:37:49.000Z</published>
    <updated>2016-11-07T10:39:30.968Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>还记得以前在网上看到过一个LoadingDialog，感觉还挺不错的，可惜只有一个Loading，配套的错误和正确的反馈都没，一直觉得挺遗憾的，今天花了一些时间把他补全了。</p>
<p>感谢<a href="http://www.jianshu.com/users/c37d344afd22/latest_articles" target="_blank" rel="external">小路</a>同学指出我后面反馈的圆的方向和之前的方向不一致的情况，已修复，因为截gif怪麻烦的，图就不改了。。。</p>
<h3 id="使用方法与效果图"><a href="#使用方法与效果图" class="headerlink" title="使用方法与效果图"></a>使用方法与效果图</h3><p>展示一个loading dialog：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> LoadingDialog(<span class="keyword">this</span>)</div><div class="line">    .setLoadingText(<span class="string">"加载中..."</span>)<span class="comment">//设置loading时显示的文字</span></div><div class="line">	.show();</div></pre></td></tr></table></figure></p>
<p>效果图：<br><img src="http://of4pq0ldx.bkt.clouddn.com/loading.gif" alt="loading.gif"></p>
<p>展示一个loading dialog并在合适的时机返回正确或者错误的反馈给用户：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">LoadingDialog ld = <span class="keyword">new</span> LoadingDialog(<span class="keyword">this</span>);</div><div class="line">ld.setLoadingText(<span class="string">"加载中"</span>)</div><div class="line">         .setSuccessText(<span class="string">"加载成功"</span>)<span class="comment">//显示加载成功时的文字</span></div><div class="line">         <span class="comment">//.setFailedText("加载失败")</span></div><div class="line">         .setInterceptBack(intercept_back_event)</div><div class="line">         .setLoadSpeed(speed)</div><div class="line">         .setRepeatCount(repeatTime)</div><div class="line">         .setDrawColor(color)</div><div class="line">         .show();</div><div class="line"></div><div class="line"><span class="comment">//在你代码中合适的位置调用反馈</span></div><div class="line">ld.loadSuccess();</div><div class="line"><span class="comment">//ld.loadFailed();</span></div></pre></td></tr></table></figure></p>
<p>效果图：</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/loadFailed.gif" alt="loadFailed.gif"><br><img src="http://of4pq0ldx.bkt.clouddn.com/loadSuccess.gif" alt="loadSuccess.gif"><br><a id="more"></a><br>还是同样的蜜汁小圆点。。。因为不摸他 加载结束他就不录了，辣鸡AS。。。</p>
<p>如果你不想要这个动态画出来的效果，你也可以通过closeSuccessAnim()或者closeFailedAnim()关闭它：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">LoadingDialog ld = <span class="keyword">new</span> LoadingDialog(<span class="keyword">this</span>);</div><div class="line">ld.setLoadingText(<span class="string">"加载中"</span>)</div><div class="line">         .setSuccessText(<span class="string">"加载成功"</span>)</div><div class="line">         .setInterceptBack(intercept_back_event)</div><div class="line">         .setLoadSpeed(speed)</div><div class="line">         .closeSuccessAnim()</div><div class="line">         .setDrawColor(color)</div><div class="line">         .setRepeatCount(repeatTime)</div><div class="line">         .show();</div></pre></td></tr></table></figure></p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/fail_no_anim.gif" alt="fail_no_anim.gif"></p>
<p>提供你使用的一些方法：</p>
<ul>
<li>setSize(int size)：可以通过这个来设置弹框的尺寸</li>
<li>show()：展示你设置的loadingDialog</li>
<li>close()：关闭动画释放一些资源</li>
<li>setLoadingText(String msg)：设置Loading时的文字</li>
<li>setSuccessText(String msg)：设置Loading成功时文字</li>
<li>setFailed(String msg)：设置Loading失败时的文字</li>
<li>loadSuccess()：调用这个方法展示一个成功的反馈</li>
<li>loadFailed()：调用这个方法展示一个失败的反馈</li>
<li>closeSuccessAnim()：关闭成功反馈的动态绘制</li>
<li>closeFailedAnim()：关闭失败反馈的动态绘制</li>
<li>setInterceptBack(boolean interceptBack)：是否拦截用户back，如果设置为true，那么一定要调用close()，不然用户只能把你的程序干掉才能退出了，在我的例子中有一个解决的思路你可以参考一下。</li>
<li>getInterceptBack()：返回dialog是否拦截的布尔值</li>
<li>setLoadSpeed(Speed speed)：参数是一个枚举，一共两个值，SPEED_ONE是比较慢的，SPEED_TWO比前一个快一点，为毛不再加？处理起来比较麻烦…</li>
<li>setDrawColor(int color)：可以改变绘制的颜色，圆和里面的勾啊，叉啊的颜色，不建议你用，不一定好看。</li>
<li>setRepeatCount(int count)：设置动态绘制的次数，比如你设置了值为1，那么除了加载的时候绘制一次，还会再绘制一次。如果你有这个需要，可以设置他的重绘次数。</li>
</ul>
<h3 id="如何在你的项目中使用"><a href="#如何在你的项目中使用" class="headerlink" title="如何在你的项目中使用"></a>如何在你的项目中使用</h3><p>Step 1. 把这玩意加到你的build.gradle里:</p>
<pre><code>allprojects {
    repositories {
        ...
        maven { url &quot;https://jitpack.io&quot; }
    }
}
</code></pre><p>Step 2. 加上这个依赖</p>
<pre><code>dependencies {
        compile &apos;com.github.ForgetAll:LoadingDialog:v1.0.1&apos;
}
</code></pre><p>目前还有一些没完善，在后续的更新中搞定吧。<br>github地址：<a href="https://github.com/ForgetAll/LoadingDialog" target="_blank" rel="external">https://github.com/ForgetAll/LoadingDialog</a></p>
<p>最后我的个人博客：<br>xiasuhuei321.com</p>
<p>其实我还是简书更的比较勤。。。不过象征性的挂一下吧。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;还记得以前在网上看到过一个LoadingDialog，感觉还挺不错的，可惜只有一个Loading，配套的错误和正确的反馈都没，一直觉得挺遗憾的，今天花了一些时间把他补全了。&lt;/p&gt;
&lt;p&gt;感谢&lt;a href=&quot;http://www.jianshu.com/users/c37d344afd22/latest_articles&quot;&gt;小路&lt;/a&gt;同学指出我后面反馈的圆的方向和之前的方向不一致的情况，已修复，因为截gif怪麻烦的，图就不改了。。。&lt;/p&gt;
&lt;h3 id=&quot;使用方法与效果图&quot;&gt;&lt;a href=&quot;#使用方法与效果图&quot; class=&quot;headerlink&quot; title=&quot;使用方法与效果图&quot;&gt;&lt;/a&gt;使用方法与效果图&lt;/h3&gt;&lt;p&gt;展示一个loading dialog：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LoadingDialog(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .setLoadingText(&lt;span class=&quot;string&quot;&gt;&quot;加载中...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//设置loading时显示的文字&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	.show();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;效果图：&lt;br&gt;&lt;img src=&quot;http://of4pq0ldx.bkt.clouddn.com/loading.gif&quot; alt=&quot;loading.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;展示一个loading dialog并在合适的时机返回正确或者错误的反馈给用户：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;LoadingDialog ld = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LoadingDialog(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ld.setLoadingText(&lt;span class=&quot;string&quot;&gt;&quot;加载中&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .setSuccessText(&lt;span class=&quot;string&quot;&gt;&quot;加载成功&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//显示加载成功时的文字&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//.setFailedText(&quot;加载失败&quot;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .setInterceptBack(intercept_back_event)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .setLoadSpeed(speed)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .setRepeatCount(repeatTime)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .setDrawColor(color)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         .show();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在你代码中合适的位置调用反馈&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ld.loadSuccess();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ld.loadFailed();&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://of4pq0ldx.bkt.clouddn.com/loadFailed.gif&quot; alt=&quot;loadFailed.gif&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://of4pq0ldx.bkt.clouddn.com/loadSuccess.gif&quot; alt=&quot;loadSuccess.gif&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android自定义View" scheme="https://xiasuhuei321.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
    
      <category term="自定义View" scheme="https://xiasuhuei321.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>16-10-24 一周阅读计划</title>
    <link href="https://xiasuhuei321.github.io/2016/10/24/16-10-24-%E4%B8%80%E5%91%A8%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/"/>
    <id>https://xiasuhuei321.github.io/2016/10/24/16-10-24-一周阅读计划/</id>
    <published>2016-10-24T04:14:56.000Z</published>
    <updated>2016-10-24T04:21:04.074Z</updated>
    
    <content type="html"><![CDATA[<p>经历了上一周的计划以后，我明白了有些计划太不切实际，比如读glide源码，这个目标也太大了。这周的目标定的尽量细致一点，有空就尽量去完成，没空拉倒。</p>
<ul>
<li><p>弄明白glide如何与Activity或者Fragment的生命周期绑定</p>
</li>
<li><p>闲暇时间自然还是读一下js了</p>
</li>
<li><p><a href="http://blog.csdn.net/luoshengyang/article/details/8170307" target="_blank" rel="external">Android应用程序窗口（Activity）实现框架简要介绍和学习计划</a></p>
</li>
</ul>
<p>暂时就这样吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经历了上一周的计划以后，我明白了有些计划太不切实际，比如读glide源码，这个目标也太大了。这周的目标定的尽量细致一点，有空就尽量去完成，没空拉倒。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;弄明白glide如何与Activity或者Fragment的生命周期绑定&lt;/p&gt;
&lt;/li&gt;
    
    </summary>
    
      <category term="学习计划" scheme="https://xiasuhuei321.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>16-10-16 新的一周阅读计划</title>
    <link href="https://xiasuhuei321.github.io/2016/10/16/16-10-16-%E6%96%B0%E7%9A%84%E4%B8%80%E5%91%A8%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92/"/>
    <id>https://xiasuhuei321.github.io/2016/10/16/16-10-16-新的一周阅读计划/</id>
    <published>2016-10-16T10:16:46.000Z</published>
    <updated>2016-10-16T10:21:25.489Z</updated>
    
    <content type="html"><![CDATA[<p>想看的东西太多，时间总是太少，下周我想想就头疼…算了先安排一下业余时间：</p>
<ul>
<li>每当我想水群的时候，可以看一点js</li>
<li>阅读Glide源码，我特么的要看看大兄弟你到底是怎么干活的</li>
<li>了解即时通讯，没办法，老板要这个功能，不得不看</li>
<li>我相信以上只有第一条和第三条能做到，读源码这事，慢慢来吧，现在水平不是很高，只能慢慢读了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想看的东西太多，时间总是太少，下周我想想就头疼…算了先安排一下业余时间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每当我想水群的时候，可以看一点js&lt;/li&gt;
&lt;li&gt;阅读Glide源码，我特么的要看看大兄弟你到底是怎么干活的&lt;/li&gt;
&lt;li&gt;了解即时通讯，没办法，老板要这个功能，不得
    
    </summary>
    
      <category term="学习计划" scheme="https://xiasuhuei321.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="https://xiasuhuei321.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="https://xiasuhuei321.github.io/2016/10/16/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://xiasuhuei321.github.io/2016/10/16/观察者模式/</id>
    <published>2016-10-16T07:09:51.000Z</published>
    <updated>2016-10-16T07:32:44.161Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>以前听说过一句话，说是<strong> 代码没有超过10w行谈设计模式那都是耍流氓 </strong>。我信了，所以一直没怎么系统的看已经买了的《Android源码设计模式》。最近有个小伙伴在群里问recyclerview怎么刷新数据，以前大概也做过，流程也就是那么两步：1.更新Adapter里数据集的引用，让他指向最新的数据集。2.调用Adapter的notifyDataSetChanged()来更新ui。之后小伙伴又问了notifyDataSetChanged()到底如何更新ui的，当时只是看出了一个观察者模式，还有一些细节没想明白。而且讲真的观察者模式的应用还是非常多的，无论是Android还是最近很火的RxJava，其中都可以看到观察者模式的身影，所以决定这周把观察者模式撸一遍。</p>
<h3 id="1、什么是观察者模式"><a href="#1、什么是观察者模式" class="headerlink" title="1、什么是观察者模式"></a>1、什么是观察者模式</h3><p>观察者模式(Observer Pattern)定义了对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新，观察者模式又叫做发布-订阅(Publish/Subscribe)模式。</p>
<p>定义总是这么精准而抽象，让我们结合一些Android中的场景来简单的理解一下：在Android最常用的点击事件，我们会通过设置控件的OnClickListener并传入一个OnClickListener的实现类来回调点击事件。这种我们便可以将之看做一个观察者模式。我们的OnClickListener是观察者，被观察者是控件，当有点击事件的时候控件发布点击事件，观察者OnClickListener就会接收到点击事件。当然了，说到底，就是回调。</p>
<h3 id="2、用回调写一个简单的观察者模式"><a href="#2、用回调写一个简单的观察者模式" class="headerlink" title="2、用回调写一个简单的观察者模式"></a>2、用回调写一个简单的观察者模式</h3><p>首先我们想一个生活中的场景，来凑个观察者模式出来。平时我们要烧水吧，总要派个人看着，水烧开的时候把电源拔了装水。在这个场景里水壶就是被观察者(Observable)，观察者(Observer)就是人。首先我们用以上我说的，那玩意就是回调，用回调来写一个看看。那我们先写一个被观察者“水壶”来看看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kettle</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    Observer&lt;T&gt; o;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发布信息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(T t)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"you must regist Observer first!"</span>);</div><div class="line">        notifyData(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知订阅者</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyData</span><span class="params">(T t)</span></span>&#123;</div><div class="line">        o.receiverEvent(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册一个观察者</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registObserver</span><span class="params">(Observer&lt;T&gt; o)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.o = o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在你需要的时候调用这个方法，防止内存泄露</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregistObserver</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.o = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先我们这个水壶是被观察者，内部肯定要维护一个观察者的引用，或者一个观察者队列的引用，方便我们进行回调，当然更多的事我们尽量不要通过Observer这个东西来做，在这个观察者模式中我希望Observer仅仅作为一个纯粹的回调。因为观察模式本身的特性之一就是解耦，如果你要通过Observer干更多的事无疑会加重Observable和Observer之间的耦合。更多信息可以看代码，我注释已经写得很详细了。<br><a id="more"></a></p>
<p>接下来看看上面提到的那个Observer我是咋写的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receiverEvent</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单的一个接口，写上泛型，嗯，顺便练习一下泛型…只有一个方法，用来回调。有接口那我们肯定要有实现类，我这个场景里说了，人是观察者，于是我写了一个Observer的实现类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverEvent</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(s);</div><div class="line">        dealWithEvent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 交给用户去处理事件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dealWithEvent</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我把这个People设计为一个抽象类，这样我可以在接收到这个事件的时候做一些简单的处理(把他打印出来……)，然后再把具体的逻辑交给这个抽象类的子类来做，我这逻辑比较简单，就没传什么参数进去了。最后免不了跑起来看看了~</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="comment">//水壶</span></div><div class="line">        Kettle&lt;String&gt; kettle = <span class="keyword">new</span> Kettle&lt;&gt;();</div><div class="line">        <span class="comment">//被观察者</span></div><div class="line">        People people = <span class="keyword">new</span> People() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dealWithEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"People:拔电源装水了~"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">//注册观察者</span></div><div class="line">        kettle.registObserver(people);</div><div class="line">        <span class="comment">//在一定条件下调用此方法发布事件</span></div><div class="line">        kettle.publishEvent(<span class="string">"Kettle:水烧开了！再不拔电源我要炸了！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F1.png" alt="运行结果"></p>
<p>这里实现了一个加单的观察者模式，观察者也只能注册一个，不过例子么，简单的才容易看懂嘛~接下来看一下Java util里自带的Observable和Observer，看一下别人的套路~</p>
<h3 id="3、Java中的观察者模式"><a href="#3、Java中的观察者模式" class="headerlink" title="3、Java中的观察者模式"></a>3、Java中的观察者模式</h3><p>在Java的util包里也有Observable和Observer那么这俩兄弟跟我们上面自己实现的有啥不同呢？首先还是那个水壶的例子，有了上面的基础，我就直接把所有的类和测试代码甩上来了，相信以各位看官的实力都是小case:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//被观察者</span></div><div class="line">        Kettle kettle = <span class="keyword">new</span> Kettle();</div><div class="line">        <span class="comment">//观察者</span></div><div class="line">        PeopleLookKettle people = <span class="keyword">new</span> PeopleLookKettle();</div><div class="line"></div><div class="line">        kettle.addObserver(people);</div><div class="line">        kettle.notifyPeople(<span class="string">"kettle:水烧开了!再不拔电源我要炸了!!"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kettle</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyPeople</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"kettle:我是水壶~"</span>);</div><div class="line">        setChanged();</div><div class="line">        notifyObservers(str);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleLookKettle</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</div><div class="line">        System.out.println((String) arg);</div><div class="line">        System.out.println(<span class="string">"People:拔电源装水~"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后还是看一下运行结果</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F2.png" alt="运行结果"></p>
<p>代码上完了，那么这里实现的观察模式又是个什么套路呢？不比比直接看源码，先从简单的Observer看起：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This method is called whenever the observed object is changed. An</div><div class="line">     * application calls an &lt;tt&gt;Observable&lt;/tt&gt; object's</div><div class="line">     * &lt;code&gt;notifyObservers&lt;/code&gt; method to have all the object's</div><div class="line">     * observers notified of the change.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   o     the observable object.</div><div class="line">     * <span class="doctag">@param</span>   arg   an argument passed to the &lt;code&gt;notifyObservers&lt;/code&gt;</div><div class="line">     *                 method.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我去，这跟我上面的设计不符啊…这货怎么把Observable传过来了…这只是设计类和接口的一些设计理念不一样，作为jdk他需要考虑各种兼容性和安全性的问题，所以不可能像我们客户端程序员一样，很多时候写的都非常任性。先不扯那么多，我们要看的是套路~这玩意是个接口，就像我说的那样，做个回调就行了，剩下的都交给实现类来操心。</p>
<p>看完了Observer我们再来看看Observable：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; obs;</div><div class="line"></div><div class="line">    <span class="comment">/** Construct an Observable with zero Observers. */</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;</div><div class="line">        obs = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Adds an observer to the set of observers for this object, provided</div><div class="line">     * that it is not the same as some observer already in the set.</div><div class="line">     * The order in which notifications will be delivered to multiple</div><div class="line">     * observers is not specified. See the class comment.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   o   an observer to be added.</div><div class="line">     * <span class="doctag">@throws</span> NullPointerException   if the parameter o is null.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">if</span> (!obs.contains(o)) &#123;</div><div class="line">            obs.addElement(o);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Deletes an observer from the set of observers of this object.</div><div class="line">     * Passing &lt;CODE&gt;null&lt;/CODE&gt; to this method will have no effect.</div><div class="line">     * <span class="doctag">@param</span>   o   the observer to be deleted.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        obs.removeElement(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * If this object has changed, as indicated by the</div><div class="line">     * &lt;code&gt;hasChanged&lt;/code&gt; method, then notify all of its observers</div><div class="line">     * and then call the &lt;code&gt;clearChanged&lt;/code&gt; method to</div><div class="line">     * indicate that this object has no longer changed.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Each observer has its &lt;code&gt;update&lt;/code&gt; method called with two</div><div class="line">     * arguments: this observable object and &lt;code&gt;null&lt;/code&gt;. In other</div><div class="line">     * words, this method is equivalent to:</div><div class="line">     * &lt;blockquote&gt;&lt;tt&gt;</div><div class="line">     * notifyObservers(null)&lt;/tt&gt;&lt;/blockquote&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observable#clearChanged()</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observable#hasChanged()</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observer#update(java.util.Observable, java.lang.Object)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        notifyObservers(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * If this object has changed, as indicated by the</div><div class="line">     * &lt;code&gt;hasChanged&lt;/code&gt; method, then notify all of its observers</div><div class="line">     * and then call the &lt;code&gt;clearChanged&lt;/code&gt; method to indicate</div><div class="line">     * that this object has no longer changed.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Each observer has its &lt;code&gt;update&lt;/code&gt; method called with two</div><div class="line">     * arguments: this observable object and the &lt;code&gt;arg&lt;/code&gt; argument.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   arg   any object.</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observable#clearChanged()</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observable#hasChanged()</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observer#update(java.util.Observable, java.lang.Object)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * a temporary array buffer, used as a snapshot of the state of</div><div class="line">         * current Observers.</div><div class="line">         */</div><div class="line">        Object[] arrLocal;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="comment">/* We don't want the Observer doing callbacks into</span></div><div class="line">             * arbitrary code while holding its own Monitor.</div><div class="line">             * The code where we extract each Observable from</div><div class="line">             * the Vector and store the state of the Observer</div><div class="line">             * needs synchronization, but notifying observers</div><div class="line">             * does not (should not).  The worst result of any</div><div class="line">             * potential race-condition here is that:</div><div class="line">             * 1) a newly-added Observer will miss a</div><div class="line">             *   notification in progress</div><div class="line">             * 2) a recently unregistered Observer will be</div><div class="line">             *   wrongly notified when it doesn't care</div><div class="line">             */</div><div class="line">            <span class="keyword">if</span> (!changed)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            arrLocal = obs.toArray();</div><div class="line">            clearChanged();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</div><div class="line">            ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Clears the observer list so that this object no longer has any observers.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        obs.removeAllElements();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Marks this &lt;tt&gt;Observable&lt;/tt&gt; object as having been changed; the</div><div class="line">     * &lt;tt&gt;hasChanged&lt;/tt&gt; method will now return &lt;tt&gt;true&lt;/tt&gt;.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        changed = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Indicates that this object has no longer changed, or that it has</div><div class="line">     * already notified all of its observers of its most recent change,</div><div class="line">     * so that the &lt;tt&gt;hasChanged&lt;/tt&gt; method will now return &lt;tt&gt;false&lt;/tt&gt;.</div><div class="line">     * This method is called automatically by the</div><div class="line">     * &lt;code&gt;notifyObservers&lt;/code&gt; methods.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observable#notifyObservers()</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observable#notifyObservers(java.lang.Object)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clearChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        changed = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Tests if this object has changed.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  &lt;code&gt;true&lt;/code&gt; if and only if the &lt;code&gt;setChanged&lt;/code&gt;</div><div class="line">     *          method has been called more recently than the</div><div class="line">     *          &lt;code&gt;clearChanged&lt;/code&gt; method on this object;</div><div class="line">     *          &lt;code&gt;false&lt;/code&gt; otherwise.</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observable#clearChanged()</div><div class="line">     * <span class="doctag">@see</span>     java.util.Observable#setChanged()</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">hasChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> changed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of observers of this &lt;tt&gt;Observable&lt;/tt&gt; object.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  the number of observers of this object.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">countObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> obs.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出Observable内部使用了一个Vector来维护订阅的Observer，关于Vector这里不做更多的了解，在这就把他当做一个普通的Observer容器就行了。让我们看看和这个容器有关的套路，为了防止各位产生代码疲劳，我特意贴心的给各位截了个图23333333：</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F3.png" alt="套路"></p>
<p>添加和删除Observer就是在容器obs里做增删操作，这套路很简单，不过为了线程安全加了个synchronized。之后看一下重点，通知Observers时调用的notifyObservers()，notifyObservers()最终会调用他自身带参的重载方法，看下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * a temporary array buffer, used as a snapshot of the state of</div><div class="line">     * current Observers.</div><div class="line">     */</div><div class="line">    Object[] arrLocal;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="comment">/* We don't want the Observer doing callbacks into</span></div><div class="line">         * arbitrary code while holding its own Monitor.</div><div class="line">         * The code where we extract each Observable from</div><div class="line">         * the Vector and store the state of the Observer</div><div class="line">         * needs synchronization, but notifying observers</div><div class="line">         * does not (should not).  The worst result of any</div><div class="line">         * potential race-condition here is that:</div><div class="line">         * 1) a newly-added Observer will miss a</div><div class="line">         *   notification in progress</div><div class="line">         * 2) a recently unregistered Observer will be</div><div class="line">         *   wrongly notified when it doesn't care</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (!changed)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        arrLocal = obs.toArray();</div><div class="line">        clearChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</div><div class="line">        ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先除去那大段的注释不看，这里就是拿到Observable内部维护的Observer容器，然后遍历回调这些Observer的update方法以实现让所有Observer收到通知。但是后面那段代码被执行是有条件的，就是Observable内部的changed字段为true才会执行，而这个字段只有通过setChanged()方法来将其值置为true。但是在上面的源码中我们可以发现这个方法是protected修饰的，所以不通过特殊手段的话，我们只有通过继承才能来调用这个方法了。所以在我以上的实现代码中是有一个继承于Observable的类的。</p>
<p>回头再看看那段注释（自己的烂翻译…有错请指出…）：<br>我们不想让Observer在持有他自己的监听时在回调任意代码。抽取这段代码存储存储Observer需要同步的状态，但是并不通知这些Observer。任何潜在的竞争条件可能会导致的最坏情况是：</p>
<ul>
<li>新添加的Observer将会错过一个正在进行的通知</li>
<li>最近被解除注册的Observer可能会错误的同步一个他不关心的玩意</li>
</ul>
<p>这些东西说实话，我只是有一点点想法，并不能说的很清楚。我觉得是多线程情况下这段代码需要加上一个同步锁，不然可能会引发他注释里写的那两点糟糕的情况。我接触的多线程还是有点少的，所以这段我就先这么翻着，而且这对我们理解观察者模式的套路并没有非常大的影响。</p>
<p>分析完了Java中的观察者模式，接下来回到文章最前面提到的那个问题，RecyclerView中的ui更新到底是咋回事。</p>
<h3 id="4、RecyclerView中的ui更新"><a href="#4、RecyclerView中的ui更新" class="headerlink" title="4、RecyclerView中的ui更新"></a>4、RecyclerView中的ui更新</h3><p>其实要弄清楚这个首先得看Adapter，因为Adapter才是掌控数据集的那个。那么让我们来看一下RecyclerView.Adapter的nonotifyDataSetChanged()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">    mObservable.notifyChanged();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继续追踪这个源码，看看咋回事<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDataObservable</span> <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">AdapterDataObserver</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !mObservers.isEmpty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// since onChanged() is implemented by the app, it could do anything, including</span></div><div class="line">        <span class="comment">// removing itself from &#123;@link mObservers&#125; - and that could cause problems if</span></div><div class="line">        <span class="comment">// an iterator is used on the ArrayList &#123;@link mObservers&#125;.</span></div><div class="line">        <span class="comment">// to avoid such problems, just march thru the list in the reverse order.</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mObservers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            mObservers.get(i).onChanged();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//其余方法省略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到notifyChanged()这个方法里就两行代码，经过上面的一番学习，我闭着眼睛也能猜到mObservers是一个Observer的集合，通过遍历的去调用onChanged，然后这个onChanged是回调。既然知道这一点，那么我们就需要在RecyclerView中找到Observer的具体实现类，不过在此之前我们找孩子之前得先找他爸~很简单，追踪onChanged()的源码，看看到底是谁的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDataObserver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Do nothing</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeChanged</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount)</span> </span>&#123;</div><div class="line">        <span class="comment">// do nothing</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeChanged</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount, Object payload)</span> </span>&#123;</div><div class="line">        <span class="comment">// fallback to onItemRangeChanged(positionStart, itemCount) if app</span></div><div class="line">        <span class="comment">// does not override this method.</span></div><div class="line">        onItemRangeChanged(positionStart, itemCount);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeInserted</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount)</span> </span>&#123;</div><div class="line">        <span class="comment">// do nothing</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeRemoved</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount)</span> </span>&#123;</div><div class="line">        <span class="comment">// do nothing</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeMoved</span><span class="params">(<span class="keyword">int</span> fromPosition, <span class="keyword">int</span> toPosition, <span class="keyword">int</span> itemCount)</span> </span>&#123;</div><div class="line">        <span class="comment">// do nothing</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找到了，都是空方法，你可能回说这还不是接口，没事，接口能做的抽象类也能做，我们只要找这个抽象类的孩子就行了。鸡贼的我果断ctrl+f输入了我的查找：</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F4.png" alt="嘿嘿嘿，我好鸡贼"></p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F5.png" alt="说了我很鸡贼"></p>
<p>看一下他的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewDataObserver</span> <span class="keyword">extends</span> <span class="title">AdapterDataObserver</span> </span>&#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">           assertNotInLayoutOrScroll(<span class="keyword">null</span>);</div><div class="line">           <span class="keyword">if</span> (mAdapter.hasStableIds()) &#123;</div><div class="line">               <span class="comment">// TODO Determine what actually changed.</span></div><div class="line">               <span class="comment">// This is more important to implement now since this callback will disable all</span></div><div class="line">               <span class="comment">// animations because we cannot rely on positions.</span></div><div class="line">               mState.mStructureChanged = <span class="keyword">true</span>;</div><div class="line">               setDataSetChangedAfterLayout();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               mState.mStructureChanged = <span class="keyword">true</span>;</div><div class="line">               setDataSetChangedAfterLayout();</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (!mAdapterHelper.hasPendingUpdates()) &#123;</div><div class="line">               requestLayout();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line"><span class="comment">//省略部分代码...</span></div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">void</span> <span class="title">triggerUpdateProcessor</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> (mPostUpdatesOnAnimation &amp;&amp; mHasFixedSize &amp;&amp; mIsAttached) &#123;</div><div class="line">               ViewCompat.postOnAnimation(RecyclerView.<span class="keyword">this</span>, mUpdateChildViewsRunnable);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               mAdapterUpdateDuringMeasure = <span class="keyword">true</span>;</div><div class="line">               requestLayout();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里简单的看一下第一行代码是检查recyclerview，如果有错就会抛异常。之后第一个if，不看了，默认是false，那么就看第二个条件内的代码。第一个是存储一个状态，第二个是我们要看到的东西了，点进去看下源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setDataSetChangedAfterLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//省略部分代码</span></div><div class="line">    mDataSetHasChangedAfterLayout = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = mChildHelper.getUnfilteredChildCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">        <span class="keyword">final</span> ViewHolder holder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));</div><div class="line">        <span class="keyword">if</span> (holder != <span class="keyword">null</span> &amp;&amp; !holder.shouldIgnore()) &#123;</div><div class="line">            holder.addFlags(ViewHolder.FLAG_ADAPTER_POSITION_UNKNOWN);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mRecycler.setAdapterPositionsAsUnknown();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到它会遍历ViewHolder，然后给holder添加flag:<strong> FLAG_ADAPTER_POSITION_UNKNOWN</strong>这个flag会让viewholder重新绑定到recyclerview上以确定自己的position，最后一个方法会让缓存的viewholder也打上上面提到的flag。</p>
<p>最后再回顾一下（如果有纰漏敬请指出，因为我这源码也没非常仔细的阅读）：</p>
<ul>
<li><p>在想要更新RecyclerView的界面时，我们通常会先更新数据源（List之类的），然后调用Adapter的notifyDataSetChanged()方法</p>
</li>
<li><p>在RecyclerView内部notifyDataSetChanged()方法调用了mObservable.notifyChanged();而mObservable是一个被观察者。</p>
</li>
<li><p>在RecyclerView内部找到mObservable的真实类型，发现是RecyclerViewDataObserver，寻找notifyChanged()时会调用的onChanged()方法。</p>
</li>
<li><p>发现onChanged()方法最终会给viewholder设置flag，让他们重新绑定到RecyclerView上，在重新绑定的过程中无疑是会在onBindViewHolder里重新设置数据的，而数据源我们已经更新过了，新的数据就会被显示到界面上，以上就是这整个流程了。</p>
</li>
</ul>
<h3 id="5、最后的一点思考"><a href="#5、最后的一点思考" class="headerlink" title="5、最后的一点思考"></a>5、最后的一点思考</h3><p>说实话最近在写东西的时候经常用回调，因为一些工具类或者dialog、window之类的，在自己自定义的时候通常需要回调把点击事件传出来，不然感觉传view设置点击什么的感觉也挺麻烦的，不如我里面逻辑处理好，就把点击事件传出来就好了。但是写到后面我这又是用的MVP，activity里各种回调满天飞，不过怎么说呢，我自己写的，我看起来逻辑还是很清晰的。如果是后面来人接手呢？虽然我注释写的都很清晰了，但是他在阅读代码的时候不得不深入我的工具类或者dialog window里去看我这个回调到底干了什么，所以这种方便自己麻烦别人的东西，我现在在想到底是算好的代码风格还是差的，有点糊涂。</p>
<p>好了，也挺久没发文了，而且干了七天，相信大家都很累了，休息休息了，祝各位有一个好的周末。</p>
<p>参考资料：<br>《Android源码设计模式》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;以前听说过一句话，说是&lt;strong&gt; 代码没有超过10w行谈设计模式那都是耍流氓 &lt;/strong&gt;。我信了，所以一直没怎么系统的看已经买了的《Android源码设计模式》。最近有个小伙伴在群里问recyclerview怎么刷新数据，以前大概也做过，流程也就是那么两步：1.更新Adapter里数据集的引用，让他指向最新的数据集。2.调用Adapter的notifyDataSetChanged()来更新ui。之后小伙伴又问了notifyDataSetChanged()到底如何更新ui的，当时只是看出了一个观察者模式，还有一些细节没想明白。而且讲真的观察者模式的应用还是非常多的，无论是Android还是最近很火的RxJava，其中都可以看到观察者模式的身影，所以决定这周把观察者模式撸一遍。&lt;/p&gt;
&lt;h3 id=&quot;1、什么是观察者模式&quot;&gt;&lt;a href=&quot;#1、什么是观察者模式&quot; class=&quot;headerlink&quot; title=&quot;1、什么是观察者模式&quot;&gt;&lt;/a&gt;1、什么是观察者模式&lt;/h3&gt;&lt;p&gt;观察者模式(Observer Pattern)定义了对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新，观察者模式又叫做发布-订阅(Publish/Subscribe)模式。&lt;/p&gt;
&lt;p&gt;定义总是这么精准而抽象，让我们结合一些Android中的场景来简单的理解一下：在Android最常用的点击事件，我们会通过设置控件的OnClickListener并传入一个OnClickListener的实现类来回调点击事件。这种我们便可以将之看做一个观察者模式。我们的OnClickListener是观察者，被观察者是控件，当有点击事件的时候控件发布点击事件，观察者OnClickListener就会接收到点击事件。当然了，说到底，就是回调。&lt;/p&gt;
&lt;h3 id=&quot;2、用回调写一个简单的观察者模式&quot;&gt;&lt;a href=&quot;#2、用回调写一个简单的观察者模式&quot; class=&quot;headerlink&quot; title=&quot;2、用回调写一个简单的观察者模式&quot;&gt;&lt;/a&gt;2、用回调写一个简单的观察者模式&lt;/h3&gt;&lt;p&gt;首先我们想一个生活中的场景，来凑个观察者模式出来。平时我们要烧水吧，总要派个人看着，水烧开的时候把电源拔了装水。在这个场景里水壶就是被观察者(Observable)，观察者(Observer)就是人。首先我们用以上我说的，那玩意就是回调，用回调来写一个看看。那我们先写一个被观察者“水壶”来看看：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Kettle&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Observer&amp;lt;T&amp;gt; o;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * 发布信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;publishEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T t)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;string&quot;&gt;&quot;you must regist Observer first!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        notifyData(t);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * 通知订阅者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;notifyData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T t)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        o.receiverEvent(t);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * 注册一个观察者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registObserver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Observer&amp;lt;T&amp;gt; o)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.o = o;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * 在你需要的时候调用这个方法，防止内存泄露&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unregistObserver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.o = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先我们这个水壶是被观察者，内部肯定要维护一个观察者的引用，或者一个观察者队列的引用，方便我们进行回调，当然更多的事我们尽量不要通过Observer这个东西来做，在这个观察者模式中我希望Observer仅仅作为一个纯粹的回调。因为观察模式本身的特性之一就是解耦，如果你要通过Observer干更多的事无疑会加重Observable和Observer之间的耦合。更多信息可以看代码，我注释已经写得很详细了。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
      <category term="Java" scheme="https://xiasuhuei321.github.io/categories/Android/Java/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="设计模式" scheme="https://xiasuhuei321.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android内存泄露浅析</title>
    <link href="https://xiasuhuei321.github.io/2016/10/02/Android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%B5%85%E6%9E%90/"/>
    <id>https://xiasuhuei321.github.io/2016/10/02/Android内存泄露浅析/</id>
    <published>2016-10-02T07:02:14.000Z</published>
    <updated>2016-10-16T07:28:14.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间写了一篇<a href="http://www.jianshu.com/p/6d42bf4efe16" target="_blank" rel="external">MVP初尝试</a>，由于当时只是刚接触，只是简单的实现，还有很多问题没想明白。关于内存泄露这事是本文着重要谈的一点，同时本文是我在看了很多关于Java和Android内存泄露分析的文章之后的所得。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在了解MVP引起的内存泄露问题之前，我们首先要理解在Android中内存泄露是啥玩意？简单的讲内存泄漏就是<strong> 本该被释放内存的对象没有被释放 </strong>。最近也和同学<a href="http://www.jianshu.com/users/86f25f8b198b/latest_articles" target="_blank" rel="external">@iamxiarui</a>就内存泄露这个问题进行了一些讨论，最后发现要搞清楚这个东西，还要从Java层上找原因。学习Android的同学都应该知道，Java这门语言有一个垃圾回收器，一般来说我们是无需关心内存回收的问题。但是玩过LOL或者DOTA的同学都知道，一个猪队友和一个神对手究竟哪个威胁更大一些，我们不能当GC的*队友，所以多了解一些这玩意吧。</p>
<p>在C++中会有析构函数这个概念，在C++中销毁对象必须用到这个函数，如此说来C++中是可以手动释放内存的。你可能会说Java中不也有finalize()方法吗？是的，是有这东西，让我们来看看这玩意。</p>
<h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h4><p>关于这货，在《Thinking in java》里说：</p>
<ul>
<li>不能指望finalize()。</li>
</ul>
<p>在《effective java》里说：</p>
<ul>
<li>避免使用终结方法：终结方法通常是不可预测的，也是很危险的，一般情况下是不必要的。</li>
</ul>
<p>至于为什么那么描述finalize()方法，原因如下：</p>
<blockquote>
<p>终结方法的缺点在于不能保证会被及时的执行。</p>
</blockquote>
<p>你以为这就完了？《effective java》中还有一段描述：</p>
<blockquote>
<p>Java语言规范不仅不保证终结方法会被及时的执行，而且根本就不保证它们会被执行。</p>
</blockquote>
<p>那么在很多由于生命周期所引发的内存泄漏问题上，我们就不能想着手动释放内存了，因为我们需要“及时”的释放内存，但是finalize()并不能满足我们的需求。那么我们应该想一些办法，“告诉”GC：我这是可以回收的，请回收这部分内存吧！</p>
<p>那么问题来了：我们该用怎样的方式告诉GC，并且让GC可以回收这部分内存呢？这是我们今天主要要解决的问题，但是我们首先要弄明白的是Java中关于内存的一些事。<br><a id="more"></a></p>
<h2 id="Java内存分配策略"><a href="#Java内存分配策略" class="headerlink" title="Java内存分配策略"></a>Java内存分配策略</h2><p>Java程序运行时的内存分配策略有三种，分别是静态分配，栈式分配和堆式分配。对应的，三种存储策略使用的内存空间主要分别是静态存储区、栈区和堆区。</p>
<ul>
<li>静态存储区：编译时就分配好，在程序整个运行期间都存在。主要存放静态数据和常量。</li>
<li>栈区：当方法执行时，会在栈去内存中创建方法体内部的局部变量，方法结束后自动释放内存。</li>
<li>堆区：通常存放new出来的对象，由Java垃圾回收器管理内存的回收。</li>
</ul>
<p>很明显，本文需要关注的就是堆区了，堆内存用于存放对象实例，至于堆内如何划分，如何存放对象，这些东西都由具体的实现来决定。</p>
<h2 id="Java内存管理"><a href="#Java内存管理" class="headerlink" title="Java内存管理"></a>Java内存管理</h2><p>在我们对Java内存管理作了解之前我们需要抓住这个问题的核心：</p>
<ul>
<li>如何判定可回收对象</li>
<li>采用什么策略</li>
</ul>
<h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><p>首先介绍一种用于说明垃圾收集工作方式的策略，<strong> 引用计数 </strong>：</p>
<p>每个对象都含有一个引用计数器，当有引用连接至对象时，引用计数加1。当引用离开作用域或者被置为null时，引用计数减1。垃圾回收器在遍历所有对象时发现引用计数为0便释放其内存。这种策略很难处理循环引用的情况。不过我们无需过多的考虑此策略有何优缺点，这仅仅是用来让你了解一些垃圾回收的工作方式。而且现在JVM大多也不用这种策略来进行垃圾回收。</p>
<p>以上我们简单的了解了一下垃圾回收的大致流程，那么接下来我们来了解一下垃圾回收器如何判断一个对象是否可回收。</p>
<h4 id="可达性分析算法（根搜索算法）"><a href="#可达性分析算法（根搜索算法）" class="headerlink" title="可达性分析算法（根搜索算法）"></a>可达性分析算法（根搜索算法）</h4><p>既然引用计数有缺点，那么可以采用其他的策略，Java采用了一种新的算法：可达性分析算法。</p>
<p>对象引用遍历从一组对象开始（GC Roots），沿着整个对象图上的每条链接，递归确定可到达（reachable）对象并生成一棵引用树，树的节点视为可达对象，反之视为不可达。之后垃圾回收器在进行垃圾回收的时候便可以回收那些不可达的对象。</p>
<p>我们以一个经典的例子来说明以上的东西：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">	Object o1 = <span class="keyword">new</span> Object();</div><div class="line">	Object o2 = <span class="keyword">new</span> Object();</div><div class="line">	o2 = o1;</div><div class="line">	<span class="comment">//此为第五行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用一张图来表示到第三行为止时的示意图：</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/1.png" alt="第三行.png"></p>
<p>而到了第五行时，这个情况发生了变化：</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/2.png" alt="第五行.png"></p>
<p>此时Obj2便是不可达对象，垃圾回收器在进行回收时便可以将Obj2的内存回收。以上是垃圾回收如确定可回收对象，接下来简要介绍一下垃圾回收的策略。</p>
<h4 id="内存回收策略"><a href="#内存回收策略" class="headerlink" title="内存回收策略"></a>内存回收策略</h4><ul>
<li>标记——清除（标记回收算法 或 Mark-Sweep）</li>
</ul>
<p>从堆栈和静态存储区出发，遍历所有引用，进而标记出所有存活对象，在整个标记过程中不会有回收工作发生。当标记工作完成时，清理动作才会开始。在清理过程中，没有标记的对象将会被释放。</p>
<p>这种策略的缺点很容易想到，分配内存的时候是连续的堆空间，但是在释放之后内存空间是不连续的，如果要分配较大的内存，这些内存碎片是不行的。如果想要得到连续的内存空间就得提前触发gc整理内存空间。</p>
<p>一种对Mark-Sweep进行优化的便是Mark-Compact（标记整理算法）。该算法标记阶段和Mark-Sweep一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。这样就不会产生特别多的内存碎片了。</p>
<ul>
<li>停止——复制（复制算法）</li>
</ul>
<p>垃圾回收动作发生的同时，程序将会被暂停（gc stop the world）。复制算法将可用内存分为大小相等的两块，在垃圾回收器释放内存之前，这块内存内存活的对象都会被复制到另外一块内存中，之后将已使用的内存空间清理掉。这么做优点是不容易产生内存碎片，缺点也是显而易见的，存活对象非常多的话，其效率会降低。</p>
<ul>
<li>分代回收算法</li>
</ul>
<p>根据对象存活的生命周期将内存划分若干个不同的区域，一般划分为老年代（Old Generation）和新生代（Young Generation）。老年代的特点是每次gc时只有少量对象需要被回收，而新生代的特点是每次gc都有大量的对象需要被回收。这样就可以根据不同代的特点采取合适的策略，对于新生代采用copying算法，对于老年代使用Mark-Compact。</p>
<p>说真的，本来还想简介一下Davik或者ART虚拟机的，资料也找到了，但是从本篇来说不需要介绍那么多了，事实上甚至我觉得关于内存回收策略也不需要介绍……</p>
<h2 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h2><p>根据以上我们对于Java如何判定可回收对象的简介，我们可以对发生内存泄露的对象总结出以下特征：<br>1.在引用树上可达（被引用）<br>2.程序以后不会再使用这些对象了</p>
<h4 id="强引用（Strong-Reference）"><a href="#强引用（Strong-Reference）" class="headerlink" title="强引用（Strong Reference）"></a>强引用（Strong Reference）</h4><p>在第一点中我们说对象被引用，其实指的是被强引用。说的好像很高大上的样子，其实我们平时用的大多都是强引用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person p = <span class="keyword">new</span> Person();</div><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div></pre></td></tr></table></figure></p>
<p>这类对象JVM自己抛OOM也不会通过GC回收这类对象。这是非常容易理解的，因为我们写代码需要一切是“可预料的”，如果我声明以上两个对象，竟然会莫名其妙的被JVM回收，那我只能和JAVA说再见了。当然了，我们也可以“提醒”gc回收该对象，比如将其引用置null—–&gt;p = null;   list = null。这样这两个对象便没有引用指向他了，下一次GC这两个对象便可以被回收了。</p>
<h4 id="软引用（Soft-Reference）"><a href="#软引用（Soft-Reference）" class="headerlink" title="软引用（Soft Reference）"></a>软引用（Soft Reference）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SoftReference&lt;Bitmap&gt; bm = <span class="keyword">new</span> SoftReference&lt;Bitmap&gt;(bmp);</div></pre></td></tr></table></figure>
<p>当一个对象只有软引用存在时，系统内存不足时会回收此对象。听起来还不错，但是在Android2.3以后，gc会很频繁，导致释放软引用的频率也很高，这无疑增加了程序维护的难度和不稳定性。所以如果有可替代的东西，就用别的来实现。</p>
<h4 id="弱引用（Weak-Reference）"><a href="#弱引用（Weak-Reference）" class="headerlink" title="弱引用（Weak Reference）"></a>弱引用（Weak Reference）</h4><p>发现就会被干掉的存在。</p>
<h4 id="虚引用（Phantom-Reference）"><a href="#虚引用（Phantom-Reference）" class="headerlink" title="虚引用（Phantom Reference）"></a>虚引用（Phantom Reference）</h4><p>不做介绍。</p>
<h2 id="MVP中的内存泄露"><a href="#MVP中的内存泄露" class="headerlink" title="MVP中的内存泄露"></a>MVP中的内存泄露</h2><p>前面铺垫了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">    System.out.println(<span class="string">"那么"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>长，终于说到重点了……是不是很激动，很期待？不管你是怎么想的，反正我是激动了~</p>
<p>在本篇中，其他可能引发内存泄露的东西，嗯，不分析。只分析耗时操作所引发的Activity或者其他V层实现类的内存泄露问题。熟悉MVP套路的同学应该会清除这么几点：<br>1.Model层获取数据<br>2.View层实现类执行回调的逻辑<br>3.Presenter层解除M和V的耦合，使M和V通过P层交互。</p>
<p>这么做肯定是有好处的，解除了M和V的耦合，他们俩互不感知，但是P层作为中间交互层不得不持有一个V层的引用和一个M层的实例。而当M层在进行一个耗时的操作时，由于P层是调用M层的逻辑实现一些功能，所以也可以将P层视为是一个耗时的操作。而且前面也说了，P层会持有一个V层的引用，如果在这个时候我们想要销毁这个Activity，那么这个Activity因为仍有P在持有Activity的引用从而导致其不会被回收，也就导致了内存泄露[<strong> 注1 </strong>]。恩，可能你看了我的纯文字描述有点头疼，没事，画张图你就好理解了（关系并不一定是这样的，但是方便理解）：</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/3.png" alt="画张图"></p>
<p>可能你会有点奇怪，中间那个p咋整的啊，三个箭头指的你都晕了，但是MVP就是这么个套路啊~我们现在想要干的是释放activity的内存，那么按照我们之前说过的套路，虽然activity已经去掉了指向a的引用，但是p还没有去掉指向a的引用。那么显而易见的是如果presenter的生命周期长于activity的生命周期，恩，恭喜你内存泄露了。这种内存考虑值得我们更多的考虑[<strong> 注2 </strong>]</p>
<p>先放一个模拟MVP内存泄露的代码<br>首先是Model层的接口和实现类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Luo on 2016/9/30.</div><div class="line"> * desc:</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestModel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessageDelayed</span><span class="params">(Handler handler)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//实现类</span></div><div class="line"><span class="keyword">package</span> com.xiasuhuei321.studyforrxjava;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Luo on 2016/9/30.</div><div class="line"> * desc:</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestModeImpl</span> <span class="keyword">implements</span> <span class="title">TestModel</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_DELAY = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageDelayed</span><span class="params">(<span class="keyword">final</span> Handler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(</div><div class="line">                <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                handler.sendEmptyMessageDelayed(MESSAGE_DELAY, <span class="number">200000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>恩，上面我写的200000是我深深的怨念，本来写个2000，结果leakcanary这个检测内存泄露的工具貌似会调gc，结果成功回收了……尼玛我只要个现象啊……嗯，关于这一块回收掉的情况，我会在之后的情况里说明。接下来，放Presenter<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.Message;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Luo on 2016/9/30.</div><div class="line"> * desc:</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPresenter</span> </span>&#123;</div><div class="line"></div><div class="line">    TestView testView;</div><div class="line">    TestModel testModel;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> TestModeImpl.MESSAGE_DELAY:</div><div class="line">                    TestPresenter.<span class="keyword">this</span>.testView.getMessage();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestPresenter</span><span class="params">(TestView testView)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.testView = testView;</div><div class="line">        testModel = <span class="keyword">new</span> TestModeImpl();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        testModel.sendMessageDelayed(handler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>View层的接口和Activity：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Luo on 2016/9/30.</div><div class="line"> * desc:</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//activity</span></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.squareup.leakcanary.RefWatcher;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">TestView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button btTest;</div><div class="line">    <span class="keyword">private</span> TestPresenter p;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        RefWatcher refWatcher = ExampleApplication.getRefWatcher(<span class="keyword">this</span>);</div><div class="line">        refWatcher.watch(<span class="keyword">this</span>);</div><div class="line">        p = <span class="keyword">new</span> TestPresenter(<span class="keyword">this</span>);</div><div class="line">        refWatcher.watch(p);</div><div class="line">        btTest = (Button) findViewById(R.id.bt_test);</div><div class="line">        btTest.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                p.getMessage();</div><div class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class));</div><div class="line">                MainActivity.<span class="keyword">this</span>.finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"MainActivity"</span>, <span class="string">"asdf"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>来看一下内存泄露检测的情况</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/4.png" alt="内存泄漏"></p>
<p>结合代码我们可以发现的确是因为在presenter中因为持有testView的引用导致了MainActivity的内存泄露。</p>
<p>关于这种内存泄漏，我们利用以上对于Java内存回收、管理的策略的理解，可以这么解决：我们将presenter的生命周期和Activity的生命周期关联起来：</p>
<ul>
<li><p>在presenter中声明一个onDestroy()方法，在这个方法中将testView置为null，然后在presenter中凡是使用到testView的使用的，都判断一下是否为空。</p>
</li>
<li><p>在activity的onDestroy()方法中调用presenter.onDestroy()，同时也将activity持有的presenter置空。</p>
</li>
</ul>
<p>这样就可以解决MVP中由耗时操作和强引用导致的内存泄露的问题，是不是简单而优雅？（才怪）</p>
<p>当然了，以上方法里还有两个内存泄露我么有解决，那就是handler导致的activity内存泄露。handler在建立的时候会拿到当前线程的Looper，如果当前线程没有Looper就会报错，根据这个特性我猜测是因为取到线程这事导致的内存泄露。不过只是猜测，如果各位看官有知道这其中缘故还请告诉我。第二个是非静态内部类Handler所引发的内存泄露，Handler生命周期长于presenter，所以会引发presenter的内存泄露，你说我为啥不搞定？原理我都给你说了，刚好给你个机会去实践~（逃…）</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/5.png" alt="内存泄漏"></p>
<p>恩，刚和大佬<a href="http://www.jianshu.com/users/8c4757fd3c5e/latest_articles" target="_blank" rel="external">越越</a>聊了一下handler这事，他说了一个东西handler.removeCallbacks(null)，我把他放在presenter的onDestroy()里搞定了……</p>
<p>这种解决的方式使我们根据自己的经验得出的最简单粗暴的解决方式，这样能有效的避免因testView持有activity的引用而导致的内存泄露问题。本来想试一下Rxjava+MVP，然后在对应的生命周期里unsubscribe()来解决内存泄漏的问题，但是用leakcancry检测一直会报和上面一样的内存泄露，而我试了各种方法都没能解决。虽然在leakcancry的android sdk所导致的内存泄露中貌似找到了这个</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/6.png" alt="sdk内存泄露"></p>
<p>问题是我的手机系统版本是6.0.1，按照他这个来说应该是被修复了的。而且很奇怪的一点是我在startActivty跳转到第二界面并finish自身才会报之前的内存泄露，不然的话直接返回桌面并finish是不会有内存泄露的，暂时没弄懂是什么状况，如果有人知道是为什么请务必告诉我，谢谢！</p>
<p>因为这个问题没解决，暂时不往下写了，但是我以上写的原理肯定是对的。我没能解决的问题那是因为我现在还不是Android系统的好队友，嗯，猪队友吧，先去搞会Android压压惊。关于注1,2我想说的其实是一件事：其实有的时候这种内存泄漏是<strong> 可以接受 </strong>的，比如有时可能这种内存泄露所引发的后果只是<strong> 本次GC </strong>无法回收这块内存，但是下一次呢？下一次耗时操作过了，这块内存没有引用指向他了，是可以被回收的。但是这也取决于你，你要是觉得不能忍受，那就麻溜的修复这些东西。</p>
<p>如果你对我发现的这个问题有兴趣，问题代码已经放在了：<br><a href="https://github.com/ForgetAll/StudyForRxJava" target="_blank" rel="external">demo地址</a><br>一不小心上传了配置文件……</p>
<hr>
<p>以下为我写文时的参考资料，感谢各位大神无私分享的精神！</p>
<p><strong> java回收机制： </strong></p>
<p><a href="http://jayfeng.com/2016/03/11/%E7%90%86%E8%A7%A3Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/" target="_blank" rel="external">杰风居-理解Java垃圾回收机制</a></p>
<p><a href="http://www.cnblogs.com/laoyangHJ/articles/java_gc.html" target="_blank" rel="external">老杨HJ-详细介绍Java垃圾回收机制</a></p>
<p>《Thinking in Java》&amp; 《Effective Java》</p>
<p><strong> Android内存泄露分析： </strong></p>
<p><a href="http://duanmo.me/2016/04/17/memory-leak-summary/#四种引用类型的介绍" target="_blank" rel="external">Android内存泄露总结</a></p>
<p><a href="https://yq.aliyun.com/articles/3009" target="_blank" rel="external">箫鉴哥-Android内存泄漏总结</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400021278&amp;idx=1&amp;sn=0e971807eb0e9dcc1a81853189a092f3&amp;scene=0&amp;key=b410d3164f5f798eafd870697d352ac86e0e54b9605b5fcd2c6a62268c16080ee291069627f13ed906cc2f39706b6a54&amp;ascene=0&amp;uin=NzY0MTg2ODU%3D&amp;devicetype=iMac+MacBookPro11%2C1+OSX+OSX+10.10.5+build(14F27" target="_blank" rel="external">QQ空间终端开发团队-Android GC那点事</a>&amp;version=11000003&amp;pass_ticket=nhSGhYD4LC9FWvUPv26Y7AdIzqEDu8FTImf2AKlyrCk%3D)</p>
<p><strong>我同学写的关于MVP中P造成的内存泄露的花式解决：</strong></p>
<p><a href="http://www.jianshu.com/p/d9f4c8219a65" target="_blank" rel="external">iamxiarui-Android：聊聊 MVP 中 Presenter 的生命周期</a></p>
<p><strong>最后还要感谢一下square的开源项目:</strong></p>
<p><a href="https://github.com/square/leakcanary" target="_blank" rel="external">内存泄漏检测工具</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;前段时间写了一篇&lt;a href=&quot;http://www.jianshu.com/p/6d42bf4efe16&quot;&gt;MVP初尝试&lt;/a&gt;，由于当时只是刚接触，只是简单的实现，还有很多问题没想明白。关于内存泄露这事是本文着重要谈的一点，同时本文是我在看了很多关于Java和Android内存泄露分析的文章之后的所得。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在了解MVP引起的内存泄露问题之前，我们首先要理解在Android中内存泄露是啥玩意？简单的讲内存泄漏就是&lt;strong&gt; 本该被释放内存的对象没有被释放 &lt;/strong&gt;。最近也和同学&lt;a href=&quot;http://www.jianshu.com/users/86f25f8b198b/latest_articles&quot;&gt;@iamxiarui&lt;/a&gt;就内存泄露这个问题进行了一些讨论，最后发现要搞清楚这个东西，还要从Java层上找原因。学习Android的同学都应该知道，Java这门语言有一个垃圾回收器，一般来说我们是无需关心内存回收的问题。但是玩过LOL或者DOTA的同学都知道，一个猪队友和一个神对手究竟哪个威胁更大一些，我们不能当GC的*队友，所以多了解一些这玩意吧。&lt;/p&gt;
&lt;p&gt;在C++中会有析构函数这个概念，在C++中销毁对象必须用到这个函数，如此说来C++中是可以手动释放内存的。你可能会说Java中不也有finalize()方法吗？是的，是有这东西，让我们来看看这玩意。&lt;/p&gt;
&lt;h4 id=&quot;finalize&quot;&gt;&lt;a href=&quot;#finalize&quot; class=&quot;headerlink&quot; title=&quot;finalize()&quot;&gt;&lt;/a&gt;finalize()&lt;/h4&gt;&lt;p&gt;关于这货，在《Thinking in java》里说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能指望finalize()。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在《effective java》里说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用终结方法：终结方法通常是不可预测的，也是很危险的，一般情况下是不必要的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于为什么那么描述finalize()方法，原因如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;终结方法的缺点在于不能保证会被及时的执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你以为这就完了？《effective java》中还有一段描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java语言规范不仅不保证终结方法会被及时的执行，而且根本就不保证它们会被执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么在很多由于生命周期所引发的内存泄漏问题上，我们就不能想着手动释放内存了，因为我们需要“及时”的释放内存，但是finalize()并不能满足我们的需求。那么我们应该想一些办法，“告诉”GC：我这是可以回收的，请回收这部分内存吧！&lt;/p&gt;
&lt;p&gt;那么问题来了：我们该用怎样的方式告诉GC，并且让GC可以回收这部分内存呢？这是我们今天主要要解决的问题，但是我们首先要弄明白的是Java中关于内存的一些事。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
      <category term="Java" scheme="https://xiasuhuei321.github.io/categories/Android/Java/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="基础" scheme="https://xiasuhuei321.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="性能优化" scheme="https://xiasuhuei321.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你打造支持手势放大缩小的ImageView</title>
    <link href="https://xiasuhuei321.github.io/2016/09/25/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%89%93%E9%80%A0%E6%94%AF%E6%8C%81%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E7%9A%84ImageView/"/>
    <id>https://xiasuhuei321.github.io/2016/09/25/手把手教你打造支持手势放大缩小的ImageView/</id>
    <published>2016-09-25T00:30:05.000Z</published>
    <updated>2016-10-16T07:41:58.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近有了新的任务，学习的时间比以前少了不少，Java回炉的文估计是得缓缓了，不过每周一篇尽量保质保量。最近感觉我文写的有点不好，因为我写东西除非必要，不然概念性的东西我基本上都是一笔带过……最近感觉这对看我文的人好像不是很友好，恩，我决定改一改，尽量写的详细而有趣一些。<br><img src="http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F1.jpg" alt="1.jpg"></p>
<p>好了废话时间过了，前面也说了最近有了新任务，我现在是搞定用户信息这一块。一般来说现在用户都会有个头像什么的，光有个头像还不够，你还得能点击看个大图吧？光看个大图也不够啊，不说多的，你最起码得支持用户手势放大缩小什么的吧？当时脑海里第一个想到的是PhotoView，不过整个项目好像也只有这一块涉及到用户手势放大缩小，算了，自己实现一个吧。当然了，经常刷hongyang大神博客的我自然知道hongyang大神博客里有写过<a href="http://blog.csdn.net/lmj623565791/article/details/39474553" target="_blank" rel="external">这东西</a>。所以趁周末有空果断刷之~</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>做一个东西之前我们肯定要分析需求，分析完之后我们就可以利用我们会的，或者知道可以实现但是现在不会的去尝试解决这个需求。放大缩小图片，脑子里第一个反应就是矩阵，Android里貌似有个可以通过矩阵处理图像的东西，不过说真的，以前也没有用过几次，不过好歹有个想法了。至于让图片跟随用户手势放大缩小，肯定是需要支持手势检测了。恩，我的思路暂时就是这样了，接下来先去了解一下手势检测。</p>
<h3 id="手势检测"><a href="#手势检测" class="headerlink" title="手势检测"></a>手势检测</h3><p>当用户触摸屏幕时，会产生许多手势，down、up、scroll、fling等。一般情况下我们通过实现OnTouchListener是可以满足我们处理一般手势的需求的，说实话，实现手势放大缩小的ImageView是可以通过自己在OnTouch方法里面处理距离，滑动什么的去算缩放的。但是人总是要对自己好一点，如果有更简单的实现方式为什么不用呢？Android中提供了GestureDetector给程序员去判断不同的手势。另外也提供了<strong> ScaleGestureDetector </strong>来检测缩放手势。虽然后者很像前者的子类，但事实上并不是，后者也是一个独立的类。下面用一个简单的demo来演示一下这两者的触发。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.luo_pc.view;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.GestureDetector;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.ScaleGestureDetector;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">GestureDetector</span>.<span class="title">OnGestureListener</span>,</span></div><div class="line">        <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">ScaleGestureDetector</span>.<span class="title">OnScaleGestureListener</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">//定义手势检测</span></div><div class="line">    GestureDetector detector = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//缩放检测</span></div><div class="line">    ScaleGestureDetector scDetector = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Button testGet = (Button) findViewById(R.id.bt_test_ges);</div><div class="line">        Button testScges = (Button) findViewById(R.id.bt_test_scges);</div><div class="line">        testGet.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        testScges.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        detector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.bt_test_ges:</div><div class="line">                detector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">                scDetector = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.bt_test_scges:</div><div class="line">                scDetector = <span class="keyword">new</span> ScaleGestureDetector(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">                detector = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//-------------------------implement OnGestureListener's method-----------------------//</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent me)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (detector != <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> detector.onTouchEvent(me);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> scDetector.onTouchEvent(me);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用户按下屏幕就会触发</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDown</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"onDown"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用户按下触摸屏、快速移动后松开,由1个MotionEvent ACTION_DOWN,    </span></div><div class="line">    <span class="comment">//多个ACTION_MOVE, 1个ACTION_UP触发    </span></div><div class="line">    <span class="comment">//e1：第1个ACTION_DOWN MotionEvent    </span></div><div class="line">    <span class="comment">//e2：最后一个ACTION_MOVE MotionEvent    </span></div><div class="line">    <span class="comment">//velocityX：X轴上的移动速度，像素/秒    </span></div><div class="line">    <span class="comment">//velocityY：Y轴上的移动速度，像素/秒    </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onFling</span><span class="params">(MotionEvent arg0, MotionEvent arg1, <span class="keyword">float</span> arg2,<span class="keyword">float</span> arg3)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"onFling"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用户长按触摸屏，由多个MotionEvent ACTION_DOWN触发   </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongPress</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"onLongPress"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用户按下触摸屏，并拖动，由1个MotionEvent ACTION_DOWN, 多个ACTION_MOVE触发   </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScroll</span><span class="params">(MotionEvent arg0, MotionEvent arg1, <span class="keyword">float</span> arg2,</span></span></div><div class="line">                            <span class="keyword">float</span> arg3) &#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"onScroll"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果是按下的时间超过瞬间，而且在按下的时候没有松开或者是拖动的，</span></div><div class="line">    <span class="comment">// 那么onShowPress就会执行 </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShowPress</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"onShowPress"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用户（轻触触摸屏后）松开，由一个1个MotionEvent ACTION_UP触发    </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSingleTapUp</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"onSingleTapUp"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//-----------------------implement OnScaleGestureListener's method----------------------//</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onScale"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScaleBegin</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onScaleBegin"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleEnd</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"onScaleEnd"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>图方便，我将整个MainActivity搬上来了，你可以直接复制，然后加上对应的布局和导包就行了，接下来看一下运行现象。</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F2.gif" alt="GestureDetector"></p>
<p>上面测试的是GestureDetector，接下来测试一下ScaleGestureDetector</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F3.gif" alt="ScaleGestureDetector"></p>
<p>如果你想要测试更多，比如GestureDetector里另外一个接口可以把我的代码复制一下改一改就好了，这了就不作过多的赘述了，代码会说话。</p>
<h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><p>这里只对Matrix作简单的介绍。Android中Matrix是一个3 x 3的矩阵（说到矩阵都是二维的，不要看到3 x 3就想到3维去了）。先看一下Matrix的getValues和setValues方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Copy 9 values from the matrix into the array.</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getValues</span><span class="params">(<span class="keyword">float</span>[] values)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (values.length &lt; <span class="number">9</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</div><div class="line">    &#125;</div><div class="line">    native_getValues(native_instance, values);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Copy 9 values from the array into the matrix.</span></div><div class="line">    Depending on the implementation of Matrix, these may be</div><div class="line">    transformed into 16.16 integers in the Matrix, such that</div><div class="line">    a subsequent call to getValues() will not yield exactly</div><div class="line">    the same values.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(<span class="keyword">float</span>[] values)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (values.length &lt; <span class="number">9</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</div><div class="line">    &#125;</div><div class="line">    native_setValues(native_instance, values);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>得到或者设置一个有9个元素的数组，继续往下看发现调用的是个native修饰方法，好吧，不继续看了，了解以上也差不多够了。其内部有</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F9.png" alt="Matrix"><br>Matrix的对图像的处理可分为四类基本变换：<br>Translate           平移变换<br>Rotate                旋转变换<br>Scale                  缩放变换<br>Skew                  错切变换</p>
<p>从字面上理解，矩阵中的MSCALE用于处理缩放变换，MSKEW用于处理错切变换，MTRANS用于处理平移变换，MPERSP用于处理透视变换。实际中当然不能完全按照字面上的说法去理解Matrix。</p>
<p>从字面上理解那9个量，什么X轴缩放，什么扭曲，什么X轴偏移量，还带不认识的，没关系，我们现在做的操作比较简单，不需要用到那么多的参数。比如我们现在想设置偏移量(200,200)<br>我们可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">martrix.postTranslate(<span class="number">200</span>,<span class="number">200</span>);</div></pre></td></tr></table></figure></p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>写完上面的东西，我已经差不多是个废人了……<br><img src="http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F4.jpg" alt="我已经差不多是个废人了"><br>毕竟当年离散数学学的不咋滴，加上之前虽然有用过Matrix但是并不是很多，接下来进入喜闻乐见的实战时间。首先是不加任何限制，直接实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.luo_pc.view.CustomView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Luo_xiasuhuei321@163.com on 2016/9/24.</div><div class="line"> * desc:</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Matrix;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.ScaleGestureDetector;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZZoomImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span>, <span class="title">ScaleGestureDetector</span>.<span class="title">OnScaleGestureListener</span> </span>&#123;</div><div class="line">    <span class="comment">//suppress the unused warning because maybe it will be used sometime later</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ZZoomImageView"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大放大倍数</div><div class="line">     */</div><div class="line"><span class="comment">//    public static final float SCALE_MAX = 4.0f;</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 默认缩放</div><div class="line">     */</div><div class="line"><span class="comment">//    private float initScale = 1.0f;</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 手势检测</div><div class="line">     */</div><div class="line">    ScaleGestureDetector scaleGestureDetector = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    Matrix scaleMatrix = <span class="keyword">new</span> Matrix();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理矩阵的9个值</div><div class="line">     */</div><div class="line"><span class="comment">//    float[] martixValue = new float[9];</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        setScaleType(ScaleType.MATRIX);</div><div class="line">        scaleGestureDetector = <span class="keyword">new</span> ScaleGestureDetector(context, <span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.setOnTouchListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取当前缩放比例</div><div class="line">     */</div><div class="line"><span class="comment">//    public float getScale() &#123;</span></div><div class="line"><span class="comment">//        scaleMatrix.getValues(martixValue);</span></div><div class="line"><span class="comment">//        return martixValue[Matrix.MSCALE_X];</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line">    <span class="comment">//--------------------------implement OnTouchListener----------------------------//</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> scaleGestureDetector.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//----------------------implement OnScaleGestureListener------------------------//</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line"><span class="comment">//        float scale = getScale();</span></div><div class="line">        <span class="keyword">float</span> scaleFactor = detector.getScaleFactor();</div><div class="line">        <span class="keyword">if</span> (getDrawable() == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="comment">//        Log.e(TAG,"君甚咸，此鱼何能及君也？");</span></div><div class="line"><span class="comment">//        if (scaleFactor * scale &lt; initScale)</span></div><div class="line"><span class="comment">//            scaleFactor = initScale / scale;</span></div><div class="line"><span class="comment">//        if (scaleFactor * scale &gt; SCALE_MAX)</span></div><div class="line"><span class="comment">//            scaleFactor = SCALE_MAX / scale;</span></div><div class="line">        <span class="comment">//设置缩放比例</span></div><div class="line">        scaleMatrix.postScale(scaleFactor, scaleFactor, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</div><div class="line">        setImageMatrix(scaleMatrix);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScaleBegin</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleEnd</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看一下跑起来是啥样的</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F5.gif" alt="GIF.gif"></p>
<h3 id="将图片放到中心"><a href="#将图片放到中心" class="headerlink" title="将图片放到中心"></a>将图片放到中心</h3><p>嗯，我要是把这个用在项目里，老大要是看到了估计我就没有以后了……首先，是没有限制，可以无限缩小放大，第二是缩放中心点，默认都是ImageView中心，最后是刚开始加载出来我的图片有部分没加载，而且图片不在imageview的中心！我ImageView设置的可是俩match_parent啊。</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F6.png" alt="坑爹.png"><br>有问题没事，我们一样一样，慢慢解决。首先是图片位置，图片位置的设定我们可以在图片加载的时候将他放到ImageView的中心去，同样在这个过程中，我们可以判断图片的大小，如果图片大于ImageView尺寸则将其大小调整至ImageView的大小。首先我们在ImageView的构造器中可能是无法获取到ImageView和图片的真实尺寸的，我们可以通过ViewTreeObserver在布局完成可以获取真实尺寸的时候完成对图片的调整。而OnGlobalLayoutListener是ViewTreeObserver的内部接口，当一个视图树的布局发生改变时，可以被ViewTreeObserver监听到。所以新增代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 首先让我们的类实现OnGlobalLayoutListener接口</div><div class="line">public class ZZoomImageView extends ImageView implements View.OnTouchListener, ScaleGestureDetector.OnScaleGestureListener,</div><div class="line">        ViewTreeObserver.OnGlobalLayoutListener</div></pre></td></tr></table></figure></p>
<p>然后我们在此控件的onAttachedToWindow中设置监听，在onDetachedFromWindow移除这个监听：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onAttachedToWindow();</div><div class="line">    getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//suppress deprecate warning because i have dealt with it </span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class="line">        getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    getViewTreeObserver().removeGlobalOnLayoutListener(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后是最重要的，在回调中对图片进行处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!once)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    Drawable d = getDrawable();</div><div class="line">    <span class="keyword">if</span> (d == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//获取imageview宽高</span></div><div class="line">    <span class="keyword">int</span> width = getWidth();</div><div class="line">    <span class="keyword">int</span> height = getHeight();</div><div class="line"></div><div class="line">    <span class="comment">//获取图片宽高</span></div><div class="line">    <span class="keyword">int</span> imgWidth = d.getIntrinsicWidth();</div><div class="line">    <span class="keyword">int</span> imgHeight = d.getIntrinsicHeight();</div><div class="line"></div><div class="line">    <span class="keyword">float</span> scale = <span class="number">1.0f</span>;</div><div class="line"></div><div class="line">    <span class="comment">//如果图片的宽或高大于屏幕，缩放至屏幕的宽或者高</span></div><div class="line">    <span class="keyword">if</span> (imgWidth &gt; width &amp;&amp; imgHeight &lt;= height)</div><div class="line">        scale = (<span class="keyword">float</span>) width / imgWidth;</div><div class="line">    <span class="keyword">if</span> (imgHeight &gt; height &amp;&amp; imgWidth &lt;= width)</div><div class="line">        scale = (<span class="keyword">float</span>) height / imgHeight;</div><div class="line">    <span class="comment">//如果图片宽高都大于屏幕，按比例缩小</span></div><div class="line">    <span class="keyword">if</span> (imgWidth &gt; width &amp;&amp; imgHeight &gt; height)</div><div class="line">        scale = Math.min((<span class="keyword">float</span>) imgWidth / width, (<span class="keyword">float</span>) imgHeight / height);</div><div class="line">    Log.e(TAG, <span class="string">"scale"</span> + scale);</div><div class="line">    <span class="comment">//将图片移动至屏幕中心</span></div><div class="line">    scaleMatrix.postTranslate((width - imgWidth) / <span class="number">2</span>, (height - imgHeight) / <span class="number">2</span>);</div><div class="line">    scaleMatrix.postScale(scale, scale, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</div><div class="line">    setImageMatrix(scaleMatrix);</div><div class="line">    once = <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对图片的处理核心思想就是判断图片尺寸和当前控件尺寸，图片尺寸比控件大，就对图片进行缩放处理，并且最后将图片移动至控件中心处。代码上的注释写的都很详细了，各位看官可以自行阅读。现在来看看变成啥样了</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F7.gif" alt="ZZ-改"></p>
<h3 id="限制缩放"><a href="#限制缩放" class="headerlink" title="限制缩放"></a>限制缩放</h3><p>很好图是到中间去了，那现在的问题就是无限缩小和放大的问题。这个问题解决思路是很简单的，做个限制就行了。</p>
<p>嗯，新增如下几个变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 最大放大倍数</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> SCALE_MAX = <span class="number">4.0f</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 默认缩放</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> initScale = <span class="number">1.0f</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理矩阵的9个值</div><div class="line"> */</div><div class="line"><span class="keyword">float</span>[] martixValue = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</div></pre></td></tr></table></figure></p>
<p>上面费了那么多口水讲到的matrix的九个值啥的，终于要出现了，是不是很激动~（才怪），接下来搞个方法获取缩放比例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取当前缩放比例</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getScale</span><span class="params">()</span> </span>&#123;</div><div class="line">    scaleMatrix.getValues(martixValue);</div><div class="line">    <span class="keyword">return</span> martixValue[Matrix.MSCALE_X];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后为了获取正确的初始缩放比例，在我们刚刚写的<strong> onGlobalLayout </strong>中加句话:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">initScale = scale;</div></pre></td></tr></table></figure></p>
<p>当然了，得是在获取了scale值之后再添，因为我们虽然设置了初始缩放比例，但是实际中可能因为图片大小发生了缩放行为，所以我们需要再次确定初始缩放比例。接下来就是对缩放行为进行限制了，修改onScale代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> scale = getScale();</div><div class="line">        Log.e(TAG, <span class="string">"matrix scale----&gt;"</span> + scale);</div><div class="line">        <span class="keyword">float</span> scaleFactor = detector.getScaleFactor();</div><div class="line">        Log.e(TAG, <span class="string">"scaleFactor----&gt;"</span> + scaleFactor);</div><div class="line">        <span class="keyword">if</span> (getDrawable() == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="comment">//        Log.e(TAG,"君甚咸，此鱼何能及君也？");</span></div><div class="line">        <span class="keyword">if</span> ((scale &lt; SCALE_MAX &amp;&amp; scaleFactor &gt; <span class="number">1.0f</span>)</div><div class="line">                || (scale &gt; initScale &amp;&amp; scaleFactor &lt; <span class="number">1.0f</span>)) &#123;</div><div class="line">            <span class="keyword">if</span> (scaleFactor * scale &lt; initScale)</div><div class="line">                scaleFactor = initScale / scale;</div><div class="line">            <span class="keyword">if</span> (scaleFactor * scale &gt; SCALE_MAX)</div><div class="line">                scaleFactor = SCALE_MAX / scale;</div><div class="line">            Log.e(TAG, <span class="string">"scaleFactor2----&gt;"</span> + scaleFactor);</div><div class="line">            <span class="comment">//设置缩放比例</span></div><div class="line">            scaleMatrix.postScale(scaleFactor, scaleFactor, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</div><div class="line">            setImageMatrix(scaleMatrix);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>对于以上的代码，你可能会对两个scale有所疑惑，一个scale是从matrix中获得的，一个是从缩放检测中获得的。开始我看到hongyang大神的这段代码我也是有所疑惑的，但是之后我自己写了一遍，打了一下log，发现前一个在到达我们设置的最大值时，值便会固定为4，后一个值会在1左右。那么很明显前一个值是图片相对于初始尺寸的缩放，后一个是每一次缩放的实际比例。理解了这个之后便容易解决了，使用如上代码便可以限制缩放了。如果你对于缩放比例不满意，嗯，自己设置就是了，反正也不复杂。效果图就等下一个功能一起实现再放了。</p>
<p>以上一个简单，还算能用的缩放ImageView就完成了，现在的问题是缩放中心是控件的中心，如果我想设置缩放中心是我按下去的地方呢？很简单改一句代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scaleMatrix.postScale(scaleFactor, scaleFactor, </div><div class="line">            getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</div><div class="line"></div><div class="line">scaleMatrix.postScale(scaleFactor, scaleFactor, </div><div class="line">            detector.getFocusX(), detector.getFocusY());</div></pre></td></tr></table></figure></p>
<p>但是这一改出事了……现在是能根据手势缩放中心进行缩放了，但是缩放到最小时图片位置可能发生了变化……现在还要解决的就是缩放时图片位置变化，新增如下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 在缩放时，控制范围</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBorderAndCenterWhenScale</span><span class="params">()</span> </span>&#123;</div><div class="line">    Matrix matrix = scaleMatrix;</div><div class="line">    RectF rectF = <span class="keyword">new</span> RectF();</div><div class="line">    Drawable d = getDrawable();</div><div class="line">    <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</div><div class="line">        rectF.set(<span class="number">0</span>, <span class="number">0</span>, d.getIntrinsicWidth(), d.getIntrinsicHeight());</div><div class="line">        matrix.mapRect(rectF);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">float</span> deltaX = <span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> deltaY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> width = getWidth();</div><div class="line">    <span class="keyword">int</span> height = getHeight();</div><div class="line">    <span class="comment">// 如果宽或高大于屏幕，则控制范围</span></div><div class="line">    <span class="keyword">if</span> (rectF.width() &gt;= width) &#123;</div><div class="line">        <span class="keyword">if</span> (rectF.left &gt; <span class="number">0</span>) &#123;</div><div class="line">            deltaX = -rectF.left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (rectF.right &lt; width) &#123;</div><div class="line">            deltaX = width - rectF.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (rectF.height() &gt;= height) &#123;</div><div class="line">        <span class="keyword">if</span> (rectF.top &gt; <span class="number">0</span>) &#123;</div><div class="line">            deltaY = -rectF.top;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (rectF.bottom &lt; height) &#123;</div><div class="line">            deltaY = height - rectF.bottom;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果宽或高小于屏幕，则让其居中</span></div><div class="line">    <span class="keyword">if</span> (rectF.width() &lt; width) &#123;</div><div class="line">        deltaX = width * <span class="number">0.5f</span> - rectF.right + <span class="number">0.5f</span> * rectF.width();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (rectF.height() &lt; height) &#123;</div><div class="line">        deltaY = height * <span class="number">0.5f</span> - rectF.bottom + <span class="number">0.5f</span> * rectF.height();</div><div class="line">    &#125;</div><div class="line">    scaleMatrix.postTranslate(deltaX, deltaY);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在onScale方法里调用以上检测的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((scale &lt; SCALE_MAX &amp;&amp; scaleFactor &gt; <span class="number">1.0f</span>)</div><div class="line">        || (scale &gt; initScale &amp;&amp; scaleFactor &lt; <span class="number">1.0f</span>)) &#123;</div><div class="line">    <span class="keyword">if</span> (scaleFactor * scale &lt; initScale)</div><div class="line">        scaleFactor = initScale / scale;</div><div class="line">    <span class="keyword">if</span> (scaleFactor * scale &gt; SCALE_MAX)</div><div class="line">        scaleFactor = SCALE_MAX / scale;</div><div class="line">    Log.e(TAG, <span class="string">"scaleFactor2----&gt;"</span> + scaleFactor);</div><div class="line">    <span class="comment">//设置缩放比例</span></div><div class="line">    scaleMatrix.postScale(scaleFactor, scaleFactor,</div><div class="line">            detector.getFocusX(), detector.getFocusY());</div><div class="line">    checkBorderAndCenterWhenScale();</div><div class="line">    setImageMatrix(scaleMatrix);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="最终成型"><a href="#最终成型" class="headerlink" title="最终成型"></a>最终成型</h3><p>以上代码算出初步的能用了，不过还有一点值得注意的地方，如果你在onTouch这个方法里的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> scaleGestureDetector.onTouchEvent(event);</div></pre></td></tr></table></figure></p>
<p>那么所有的事件都会被消费，因为我点到scaleGestureDetector的onTouch方法里，没看到return false的东西，所以你设置的oncilck事件之类的都没什么卵用。</p>
<p>对于我来说这样是不行的，因为我希望用户点击一次之后可以退出当前界面，所以你可以调用sacleGestureDetector.onTouchEvent(event)但是返回false，不消耗这个事件，让onClick来处理点击事件。当我想的很美的时候，却发现这么做虽然点击事件会被处理，而且缩放也正常，但是缩放的操作会被判断为点击事件，也就是说这么干不行了。我的脑海中第二个想到的解决方案是回调，既然系统的回调不行了，那我自己设置一个时间，在这个时间之内就是click事件，我在这个事件的回调里把当前界面退出了不就行了。实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ClickCloseListener c;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClickCloseListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickCloseListener</span><span class="params">(ClickCloseListener c)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.c = c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 按下的时间</div><div class="line"> */</div><div class="line"><span class="keyword">long</span> downTime;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * down 和 up之间的间隔</div><div class="line"> */</div><div class="line"><span class="keyword">long</span> closeTime = <span class="number">100L</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置按下的时间</div><div class="line"> */</div><div class="line"><span class="comment">//suppress unused warning for no reason</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickTime</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.closeTime = time;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">    scaleGestureDetector.onTouchEvent(event);</div><div class="line">    <span class="comment">//如果监听为null，消费该事件，不让onclick生效</span></div><div class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            downTime = System.currentTimeMillis();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">            downTime = System.currentTimeMillis() - downTime;</div><div class="line">            <span class="keyword">if</span> (downTime &lt; closeTime)</div><div class="line">                c.close();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后看一下效果图吧~</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F8.gif" alt="ZZ-最终打死都不改版"></p>
<p>当然了，自己搞的点击事件有点不靠谱，时间间隔设置为100ms，有点短了，你可以自己设置，不过这篇文到这里也就结束了。本来还想连什么移动一起加上，嗯，现在发现好像篇幅超出了我的控制。暂且还是算了吧~而且这个姑且也算是能用了，只不过适用的场景只是查看大图的一个单独的界面。这个简单的小东西就写到这了。完整代码就放在这把，也懒得上传github了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.luo_pc.view.CustomView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Luo_xiasuhuei321@163.com on 2016/9/24.</div><div class="line"> * desc:</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Matrix;</div><div class="line"><span class="keyword">import</span> android.graphics.RectF;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.os.Build;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.ScaleGestureDetector;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewTreeObserver;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZZoomImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span>, <span class="title">ScaleGestureDetector</span>.<span class="title">OnScaleGestureListener</span>,</span></div><div class="line">        <span class="title">ViewTreeObserver</span>.<span class="title">OnGlobalLayoutListener</span> &#123;</div><div class="line">    <span class="comment">//suppress the unused warning because maybe it will be used sometime later</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ZZoomImageView"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大放大倍数</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> SCALE_MAX = <span class="number">4.0f</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 默认缩放</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> initScale = <span class="number">1.0f</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 手势检测</div><div class="line">     */</div><div class="line">    ScaleGestureDetector scaleGestureDetector = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    Matrix scaleMatrix = <span class="keyword">new</span> Matrix();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理矩阵的9个值</div><div class="line">     */</div><div class="line">    <span class="keyword">float</span>[] martixValue = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        setScaleType(ScaleType.MATRIX);</div><div class="line">        scaleGestureDetector = <span class="keyword">new</span> ScaleGestureDetector(context, <span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.setOnTouchListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttachedToWindow();</div><div class="line">        getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//suppress deprecate warning because i have dealt with it </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class="line">            getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        getViewTreeObserver().removeGlobalOnLayoutListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取当前缩放比例</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getScale</span><span class="params">()</span> </span>&#123;</div><div class="line">        scaleMatrix.getValues(martixValue);</div><div class="line">        <span class="keyword">return</span> martixValue[Matrix.MSCALE_X];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在缩放时，控制范围</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBorderAndCenterWhenScale</span><span class="params">()</span> </span>&#123;</div><div class="line">        Matrix matrix = scaleMatrix;</div><div class="line">        RectF rectF = <span class="keyword">new</span> RectF();</div><div class="line">        Drawable d = getDrawable();</div><div class="line">        <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</div><div class="line">            rectF.set(<span class="number">0</span>, <span class="number">0</span>, d.getIntrinsicWidth(), d.getIntrinsicHeight());</div><div class="line">            matrix.mapRect(rectF);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">float</span> deltaX = <span class="number">0</span>;</div><div class="line">        <span class="keyword">float</span> deltaY = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> width = getWidth();</div><div class="line">        <span class="keyword">int</span> height = getHeight();</div><div class="line">        <span class="comment">// 如果宽或高大于屏幕，则控制范围</span></div><div class="line">        <span class="keyword">if</span> (rectF.width() &gt;= width) &#123;</div><div class="line">            <span class="keyword">if</span> (rectF.left &gt; <span class="number">0</span>) &#123;</div><div class="line">                deltaX = -rectF.left;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (rectF.right &lt; width) &#123;</div><div class="line">                deltaX = width - rectF.right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (rectF.height() &gt;= height) &#123;</div><div class="line">            <span class="keyword">if</span> (rectF.top &gt; <span class="number">0</span>) &#123;</div><div class="line">                deltaY = -rectF.top;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (rectF.bottom &lt; height) &#123;</div><div class="line">                deltaY = height - rectF.bottom;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果宽或高小于屏幕，则让其居中</span></div><div class="line">        <span class="keyword">if</span> (rectF.width() &lt; width) &#123;</div><div class="line">            deltaX = width * <span class="number">0.5f</span> - rectF.right + <span class="number">0.5f</span> * rectF.width();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (rectF.height() &lt; height) &#123;</div><div class="line">            deltaY = height * <span class="number">0.5f</span> - rectF.bottom + <span class="number">0.5f</span> * rectF.height();</div><div class="line">        &#125;</div><div class="line">        scaleMatrix.postTranslate(deltaX, deltaY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//--------------------------implement OnTouchListener----------------------------//</span></div><div class="line">    <span class="keyword">private</span> ClickCloseListener c;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClickCloseListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickCloseListener</span><span class="params">(ClickCloseListener c)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.c = c;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按下的时间</div><div class="line">     */</div><div class="line">    <span class="keyword">long</span> downTime;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * down 和 up之间的间隔</div><div class="line">     */</div><div class="line">    <span class="keyword">long</span> closeTime = <span class="number">100L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置按下的时间</div><div class="line">     */</div><div class="line">    <span class="comment">//suppress unused warning for no reason</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickTime</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.closeTime = time;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">        scaleGestureDetector.onTouchEvent(event);</div><div class="line">        <span class="comment">//如果监听为null，消费该事件，不让onclick生效</span></div><div class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                downTime = System.currentTimeMillis();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                downTime = System.currentTimeMillis() - downTime;</div><div class="line">                <span class="keyword">if</span> (downTime &lt; closeTime)</div><div class="line">                    c.close();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//----------------------implement OnScaleGestureListener------------------------//</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> scale = getScale();</div><div class="line">        <span class="keyword">float</span> scaleFactor = detector.getScaleFactor();</div><div class="line">        <span class="keyword">if</span> (getDrawable() == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="comment">//        Log.e(TAG,"君甚咸，此鱼何能及君也？");</span></div><div class="line">        <span class="keyword">if</span> ((scale &lt; SCALE_MAX &amp;&amp; scaleFactor &gt; <span class="number">1.0f</span>)</div><div class="line">                || (scale &gt; initScale &amp;&amp; scaleFactor &lt; <span class="number">1.0f</span>)) &#123;</div><div class="line">            <span class="keyword">if</span> (scaleFactor * scale &lt; initScale)</div><div class="line">                scaleFactor = initScale / scale;</div><div class="line">            <span class="keyword">if</span> (scaleFactor * scale &gt; SCALE_MAX)</div><div class="line">                scaleFactor = SCALE_MAX / scale;</div><div class="line">            Log.e(TAG, <span class="string">"scaleFactor2----&gt;"</span> + scaleFactor);</div><div class="line">            <span class="comment">//设置缩放比例</span></div><div class="line">            scaleMatrix.postScale(scaleFactor, scaleFactor,</div><div class="line">                    detector.getFocusX(), detector.getFocusY());</div><div class="line">            checkBorderAndCenterWhenScale();</div><div class="line">            setImageMatrix(scaleMatrix);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScaleBegin</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleEnd</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> once = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!once)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        Drawable d = getDrawable();</div><div class="line">        <span class="keyword">if</span> (d == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="comment">//获取imageview宽高</span></div><div class="line">        <span class="keyword">int</span> width = getWidth();</div><div class="line">        <span class="keyword">int</span> height = getHeight();</div><div class="line"></div><div class="line">        <span class="comment">//获取图片宽高</span></div><div class="line">        <span class="keyword">int</span> imgWidth = d.getIntrinsicWidth();</div><div class="line">        <span class="keyword">int</span> imgHeight = d.getIntrinsicHeight();</div><div class="line"></div><div class="line">        <span class="keyword">float</span> scale = <span class="number">1.0f</span>;</div><div class="line"></div><div class="line">        <span class="comment">//如果图片的宽或高大于屏幕，缩放至屏幕的宽或者高</span></div><div class="line">        <span class="keyword">if</span> (imgWidth &gt; width &amp;&amp; imgHeight &lt;= height)</div><div class="line">            scale = (<span class="keyword">float</span>) width / imgWidth;</div><div class="line">        <span class="keyword">if</span> (imgHeight &gt; height &amp;&amp; imgWidth &lt;= width)</div><div class="line">            scale = (<span class="keyword">float</span>) height / imgHeight;</div><div class="line">        <span class="comment">//如果图片宽高都大于屏幕，按比例缩小</span></div><div class="line">        <span class="keyword">if</span> (imgWidth &gt; width &amp;&amp; imgHeight &gt; height)</div><div class="line">            scale = Math.min((<span class="keyword">float</span>) imgWidth / width, (<span class="keyword">float</span>) imgHeight / height);</div><div class="line">        initScale = scale;</div><div class="line">        <span class="comment">//将图片移动至屏幕中心</span></div><div class="line">        scaleMatrix.postTranslate((width - imgWidth) / <span class="number">2</span>, (height - imgHeight) / <span class="number">2</span>);</div><div class="line">        scaleMatrix.postScale(scale, scale, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</div><div class="line">        setImageMatrix(scaleMatrix);</div><div class="line">        once = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考资料：</p>
<ul>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/39474553" target="_blank" rel="external">Android 手势检测实战 打造支持缩放平移的图片预览效果（上）</a></li>
<li><a href="http://blog.csdn.net/lee576/article/details/7979436" target="_blank" rel="external">初学Android,手势检测(四十七)</a></li>
<li><a href="http://blog.csdn.net/flash129/article/details/8234599" target="_blank" rel="external">Android Matrix详解</a></li>
<li><a href="http://blog.csdn.net/ouyang_peng/article/details/8800994" target="_blank" rel="external">我的Android进阶之旅——&gt;android Matrix图片随意的放大缩小,拖动</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;最近有了新的任务，学习的时间比以前少了不少，Java回炉的文估计是得缓缓了，不过每周一篇尽量保质保量。最近感觉我文写的有点不好，因为我写东西除非必要，不然概念性的东西我基本上都是一笔带过……最近感觉这对看我文的人好像不是很友好，恩，我决定改一改，尽量写的详细而有趣一些。&lt;br&gt;&lt;img src=&quot;http://of4pq0ldx.bkt.clouddn.com/%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F1.jpg&quot; alt=&quot;1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;好了废话时间过了，前面也说了最近有了新任务，我现在是搞定用户信息这一块。一般来说现在用户都会有个头像什么的，光有个头像还不够，你还得能点击看个大图吧？光看个大图也不够啊，不说多的，你最起码得支持用户手势放大缩小什么的吧？当时脑海里第一个想到的是PhotoView，不过整个项目好像也只有这一块涉及到用户手势放大缩小，算了，自己实现一个吧。当然了，经常刷hongyang大神博客的我自然知道hongyang大神博客里有写过&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/39474553&quot;&gt;这东西&lt;/a&gt;。所以趁周末有空果断刷之~&lt;/p&gt;
&lt;h3 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h3&gt;&lt;p&gt;做一个东西之前我们肯定要分析需求，分析完之后我们就可以利用我们会的，或者知道可以实现但是现在不会的去尝试解决这个需求。放大缩小图片，脑子里第一个反应就是矩阵，Android里貌似有个可以通过矩阵处理图像的东西，不过说真的，以前也没有用过几次，不过好歹有个想法了。至于让图片跟随用户手势放大缩小，肯定是需要支持手势检测了。恩，我的思路暂时就是这样了，接下来先去了解一下手势检测。&lt;/p&gt;
&lt;h3 id=&quot;手势检测&quot;&gt;&lt;a href=&quot;#手势检测&quot; class=&quot;headerlink&quot; title=&quot;手势检测&quot;&gt;&lt;/a&gt;手势检测&lt;/h3&gt;&lt;p&gt;当用户触摸屏幕时，会产生许多手势，down、up、scroll、fling等。一般情况下我们通过实现OnTouchListener是可以满足我们处理一般手势的需求的，说实话，实现手势放大缩小的ImageView是可以通过自己在OnTouch方法里面处理距离，滑动什么的去算缩放的。但是人总是要对自己好一点，如果有更简单的实现方式为什么不用呢？Android中提供了GestureDetector给程序员去判断不同的手势。另外也提供了&lt;strong&gt; ScaleGestureDetector &lt;/strong&gt;来检测缩放手势。虽然后者很像前者的子类，但事实上并不是，后者也是一个独立的类。下面用一个简单的demo来演示一下这两者的触发。&lt;br&gt;
    
    </summary>
    
      <category term="Android自定义View" scheme="https://xiasuhuei321.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="自定义View基础" scheme="https://xiasuhuei321.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第二话-再探多态</title>
    <link href="https://xiasuhuei321.github.io/2016/09/17/%E7%AC%AC%E4%BA%8C%E8%AF%9D-%E5%86%8D%E6%8E%A2%E5%A4%9A%E6%80%81/"/>
    <id>https://xiasuhuei321.github.io/2016/09/17/第二话-再探多态/</id>
    <published>2016-09-17T01:07:58.000Z</published>
    <updated>2016-09-17T01:09:46.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>Java回炉系列也有十多天没更了，虽然心里一直没怎么放下，但是奈何有心无力。项目成堆问题在那，还好中秋得空，出去逛了一下午心情大好~好了，正文开始</p>
<h3 id="多态是啥，能吃吗？"><a href="#多态是啥，能吃吗？" class="headerlink" title="多态是啥，能吃吗？"></a>多态是啥，能吃吗？</h3><p>学Java一般都会听说“面向对象三大特征”：封装、继承、多态。封装是将一个事物抽象成为一个类，这个类有自己的属性和方法，某些属性和功能的实现不会对外公开，只暴露一些可供获取数据的方法。继承很容易理解，就是一个类继承另一类，这个类被称为子类，而另一个自然就是父类了。当然在有的书上也将父类称为基类，将子类称为导出类，看你个人喜好了，在我这统一称为父、子类。好了，前面说了封装和继承，现在自然是要说多态了。多态应当是一种设计的思想，然后才体现在语言的具体实现。多态的核心思想是消除类型之间的耦合关系，可能你和我一样，刚看到这句话的时候有点懵逼，没关系举个小例子：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-b4b3923c4520c2bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="举个栗子"><br><a id="more"></a><br>现在我有个数据集，因为增删操作做的比较多，行吗，了解数据结构的你一定想到了链表。那好就用链表来搞起：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LinkedList&lt;Bean&gt; list = <span class="keyword">new</span> LinkedList&lt;Bean&gt;();</div></pre></td></tr></table></figure></p>
<p>可是过了一段时间，你们老大给你说需求改了，现在是查询操作做的比较多。一向对于代码效率严格要求的你一定能想到链表查起来效率有点低，好啊，改成ArryList也算是能接受了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Bean&gt; list = <span class="keyword">new</span> ArrayList&lt;Bean&gt;();</div></pre></td></tr></table></figure></p>
<p>刚改完发现ide里一片红叉叉，好吧，原来是以前的方法也没用泛型参数，还得自己一个一个的去改掉。恩，改完没两天你们老大又来……</p>
<p>以上只是个带点玩笑性质的表述，在实际的操作中一般你都会这么写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Bean&gt; list = <span class="keyword">new</span> ArrayList&lt;Bean&gt;();</div></pre></td></tr></table></figure></p>
<p>恩，= 右边只要是个List接口的实现类就可以了，这就是解耦了。当你采用这种写法时好处也是显而易见的：涉及到这个数据集的方法，你只要传入一个List的形参就可以了，之后管你用啥实现（当然了，要符合多态的规则哦），这代码还是照常跑。</p>
<p>如果你是个上手Java没多久的新人，可能会有些惊讶于这种“接口实例化”的写法。但事实上只是Java多态的一种表现：<strong> Java允许父类引用指向子类对象  </strong> 当然了，这句话里把父类换成接口，子类对象换成实现对象，也是可以的。</p>
<h3 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h3><p>写到这乐于思考的你一定能想到一些问题：上面说了在相应的方法里只要传入父类就行了，那也就是说那个方法并不知道他原来的类是啥，那么他在调用对象的方法时只会调用父类的方法了？直接上代码看看：<br>首先是父类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"I am Parent's method"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>子类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"I am Son's method"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跑起来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Parent p = <span class="keyword">new</span> Son();</div><div class="line">		Hello(p);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Hello</span><span class="params">(Parent p)</span> </span>&#123;</div><div class="line">		p.print();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-dba4cfeddfa311ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>
<p>对于这个结果我只想问一声，凭啥啊？明明只有一个父类参数被传进去，他为毛能知道子类的方法啊？这是因为Java实现多态采用了一种被称作“动态绑定”或者“后期绑定”的牛x套路。编译器一直不知道对象的类型，但是方法调用机制能找到正确的方法体，并加以调用。关于这个机制，现在暂时没有必要太去深究。经过以上一番探查，现在终于对Java的多态放了心，那么请开开心心的使用多态编写你的代码吧！</p>
<p>关于多态还有方法重载和方法覆盖，我的上一篇文章<a href="http://www.jianshu.com/p/54779fc96b2f" target="_blank" rel="external">第一话–从头再来</a>是有提到的，可以去看看。</p>
<h3 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h3><p>待更新…有点累了，先休息了，反正这文写给自己看的，任性点，明天再更完。<br>//开更干活！<br>首先是语法，接口是interface，抽象是abstract。</p>
<p>平时在抽取基类的时候少不了用一下抽象类，你可以指定几个抽象方法，让你子类去实现这些抽象方法。当然了你的子类也可以是一个抽象类，那么可以不实现这些抽象方法。当然了，包含抽象方法的一定是抽象类， 但是不包含抽象方法的你也可以指定他是抽象类，可以有效的阻止这个类生成对象，比如Android里的handler就没有一个抽象方法。</p>
<p>那么接口又是啥呢？接口是一个包含一个或者多个方法的东西，有的时候实现了这个接口的类就拥有了这个接口的“特性”，而在Java中接口有的时候也被用于回调。一般的来说接口是优于抽象类的，因为接口比抽象类更抽象，完全解除了类之间的耦合。但是这东西还是看实际情况的，有的时候接口满天飞感觉也不是很好。再者抽象类要比接口的定制性要好，毕竟抽象类完全可以当成一个普通的类来写，只不过在合适的地方加上合适的抽象方法，然后让子类去实现它。所以究竟采用哪个区实现你的多态，还是看你的需求和实现的。</p>
<p>接口很多时候会被用于“回调”，比如在Android中的MVP模式就少不了回调。对于回调的理解我有写过一篇简单的文章，感兴趣可以自己去看一下。对于回调，我认为在实质上回调就是想要在对的地方调对的方法，然后把对的数据、状态传递出去，让实现的类知道这个数据、状态然后加以处理。以上是我认为的回调的实质，之后不同的语言用什么方案解决，是函数指针还是接口，那都不是我所关心的东西了。</p>
<p>这一期暂时就到这了，本来还想加个内部类上来的，后来想想还是先缓缓。这类复习类的文，代码贴的比较少，大多是自己的一些总结性的话语……如果有人看到了，觉得不爽……只能说见谅了……</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;Java回炉系列也有十多天没更了，虽然心里一直没怎么放下，但是奈何有心无力。项目成堆问题在那，还好中秋得空，出去逛了一下午心情大好~好了，正文开始&lt;/p&gt;
&lt;h3 id=&quot;多态是啥，能吃吗？&quot;&gt;&lt;a href=&quot;#多态是啥，能吃吗？&quot; class=&quot;headerlink&quot; title=&quot;多态是啥，能吃吗？&quot;&gt;&lt;/a&gt;多态是啥，能吃吗？&lt;/h3&gt;&lt;p&gt;学Java一般都会听说“面向对象三大特征”：封装、继承、多态。封装是将一个事物抽象成为一个类，这个类有自己的属性和方法，某些属性和功能的实现不会对外公开，只暴露一些可供获取数据的方法。继承很容易理解，就是一个类继承另一类，这个类被称为子类，而另一个自然就是父类了。当然在有的书上也将父类称为基类，将子类称为导出类，看你个人喜好了，在我这统一称为父、子类。好了，前面说了封装和继承，现在自然是要说多态了。多态应当是一种设计的思想，然后才体现在语言的具体实现。多态的核心思想是消除类型之间的耦合关系，可能你和我一样，刚看到这句话的时候有点懵逼，没关系举个小例子：&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1976147-b4b3923c4520c2bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;举个栗子&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://xiasuhuei321.github.io/categories/java/"/>
    
    
      <category term="基础" scheme="https://xiasuhuei321.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>RxJava从放弃到入门（二）：学，不能停</title>
    <link href="https://xiasuhuei321.github.io/2016/09/17/RxJava%E4%BB%8E%E6%94%BE%E5%BC%83%E5%88%B0%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%AD%A6%EF%BC%8C%E4%B8%8D%E8%83%BD%E5%81%9C/"/>
    <id>https://xiasuhuei321.github.io/2016/09/17/RxJava从放弃到入门（二）：学，不能停/</id>
    <published>2016-09-17T01:04:07.000Z</published>
    <updated>2016-10-16T07:47:01.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>上篇文章<a href="http://www.jianshu.com/p/93ae2aa6a60a" target="_blank" rel="external">RxJava从放弃到入门（一）：基础篇</a>讲述的东西都是非常基础的东西，这一篇准备讲述以下一些东西：</p>
<p>创建Observable:</p>
<ul>
<li>just</li>
<li>defer</li>
</ul>
<p>操作符:</p>
<ul>
<li>map</li>
<li>flatmap</li>
</ul>
<p>经验总结:</p>
<ul>
<li>自己遇到的一些坑和经验</li>
</ul>
<h3 id="再叙Observable"><a href="#再叙Observable" class="headerlink" title="再叙Observable"></a>再叙Observable</h3><p>在上一篇里我们已经了解了在RxJava中Observable扮演了什么样的角色，如果你还没看过，没事，我们一起来回忆以下：在RxJava中，Observable扮演的是一个发射数据或数据序列的角色。Observer则是接收Observable发射的东西。上次只提到了一种hello world的打印方法，是否会让你感到不爽？让我们当一回孔乙己，学一下“茴”字的N种写法。当然在这我并不会以流水账的形式记录每一种创建操作的流程，那样无疑是没有必要的，实在想要了解你可以去看文档。<br><a id="more"></a></p>
<h4 id="just"><a href="#just" class="headerlink" title="just"></a>just</h4><p>首先肯定还是我们的hello world<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"hello"</span>,<span class="string">"world"</span>).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">               Log.e(TAG, s);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_II_1.png" alt="just.png"></p>
<p>上面出现了一个Action1，你去看他的继承关系可能会让你疑惑，因为接收数据的Observer或者是其子类都跟他没啥关系。没关系，我们直接看源码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Subscription <span class="title">subscribe</span><span class="params">(<span class="keyword">final</span> Action1&lt;? <span class="keyword">super</span> T&gt; onNext)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (onNext == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"onNext can not be null"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> subscribe(<span class="keyword">new</span> Subscriber&lt;T&gt;() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// do nothing</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OnErrorNotImplementedException(e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T args)</span> </span>&#123;</div><div class="line">            onNext.call(args);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以很明显的看到在这个方法内部，还是有一个Subscriber来接收数据的，这个Subscriber是观察者Observer的实现类（Subscriber本身是一个抽象类）。不同的只是在onNext方法中将处理数据的逻辑交给接口Action1的call方法，而最终实现逻辑是交由用户来实现的。这种设计明显是为了方便我们使用，弄明白这一点后，我们可以就可以安心的使用Action1来跑我们的代码了。</p>
<p>使用just方法创建的Observable会按照顺序将参数一一发射，如果不能理解的话，恩，官方文档的图也是极好的:<br><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_II_2.png" alt="文档"></p>
<p>看了just之后你可能会觉得这玩意很方便，可以不用自己手动调subscriber.onNext()和其他的方法了~但是有得必有失，你用一个create方法从头开始创建一个observable时，你对这个observable的特性是了解的。而你将目光投向一个经过封装的方法时，你需要花费更多的时间去了解他。下面来一个我曾看过的一篇文章里谈到的一个错误使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">aaobservable</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Observable.just(value);</div><div class="line">&#125;</div><div class="line">   <span class="comment">//调用以上方法创建一个Observable</span></div><div class="line">    Observable&lt;String&gt; aa = aaobservable();</div><div class="line">    value = <span class="string">"String"</span>;</div><div class="line">    aa.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">            Log.e(TAG, s);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>以上代码你觉得运行的结果会是什么？会是 String 吗？结果在下面<br><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_II_3.png" alt="你这么一说我就懂了.png"></p>
<p>啥？为毛是null？很简单，上源码里看看就行了。首先点进just(T value)这个方法里瞧瞧，他究竟干了啥。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">just</span><span class="params">(<span class="keyword">final</span> T value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ScalarSynchronousObservable.create(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>继续追踪，发现create()源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">ScalarSynchronousObservable&lt;T&gt; <span class="title">create</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScalarSynchronousObservable&lt;T&gt;(t);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我去，可算看到了，既然是调了构造方法，那应该不会再有什么幺蛾子了吧？进构造方法看一看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ScalarSynchronousObservable</span><span class="params">(<span class="keyword">final</span> T t)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> OnSubscribe&lt;T&gt;() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; s)</span> </span>&#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             *  We don't check isUnsubscribed as it is a significant performance impact in the fast-path use cases.</div><div class="line">             *  See PerfBaseline tests and https://github.com/ReactiveX/RxJava/issues/1383 for more information.</div><div class="line">             *  The assumption here is that when asking for a single item we should emit it and not concern ourselves with </div><div class="line">             *  being unsubscribed already. If the Subscriber unsubscribes at 0, they shouldn't have subscribed, or it will </div><div class="line">             *  filter it out (such as take(0)). This prevents us from paying the price on every subscription. </div><div class="line">             */</div><div class="line">            s.onNext(t);</div><div class="line">            s.onCompleted();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.t = t;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先抛开注释，直接调用了onNext和onCompleted，明显没其他多的东西。而那段注释，额用我比较差的英语水平来翻译一下第一句话……我们不检查是否被订阅，因为在用例中这会显著的影响性能。恩，出于各种考虑，他直接发射了数据，并不关心有没有人订阅之类的……哦，原来如此，在创建Observable的时候value还是null，在那时数据已经被发射了，之后再更改value的值也无济于事了。知晓了原因之后那该怎么解决这个问题呢？</p>
<p>很容易想到的一个方法是create()方法，毕竟这个方法会从头建造一个Observable，一切尽在你的掌握中。</p>
<h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>使用defer()来创建Observable会在有观察者订阅时才创建Observable，并且为每一个观察者创建一个新的Observable。回想一下，我们上面的代码之所以出现错误，就是因为过早的创建Observable和发射数据导致的。defer()这种在订阅时才创建是解决以上问题的方法之一，那么上代码:<br>创建Observable的方法:<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">aaobservable</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Observable.defer(<span class="keyword">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Observable.just(value);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>验证：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; aaobservable = aaobservable();</div><div class="line">value = <span class="string">"String"</span>;</div><div class="line">aaobservable.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(TAG, s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_II_4.png" alt="成功"></p>
<p>好了，对于just和defer就先告一段落，同时对于整个Observable也就告一段落了。可能到这你还觉得不够，毕竟归根到底我说到这也只讲了just和defer，不过我还是不打算继续下去了，我这里对于Observable的描述已经占去了太多的篇幅了。关于更多的创建操作我的建议是阅读官方文档。</p>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_II_5.png" alt="图来自于文档"></p>
<p>在我看来这个操作符体现的是一种“一对一”的转换，比如你现在需要一张图，但是你的输入是一个string（这算是比较经典的场景了），你就可以使用如下代码进行变换：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Observable.just(str).map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URLConnection con = <span class="keyword">new</span> URL(s).openConnection();</div><div class="line">            InputStream inputStream = con.getInputStream();</div><div class="line">            Bitmap bitmap = BitmapFactory.decodeStream(inputStream);</div><div class="line">            <span class="keyword">return</span> bitmap;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.newThread())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread());</div></pre></td></tr></table></figure></p>
<p>代码效果就不展示了，你懂就行。这篇文章里我暂时不会去解析map以及接下来会讲述的几个操作符的变换原理，留待以后更深入的了解之后再去用更清晰的语言来表述。</p>
<h4 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h4><p>上述map可以实现一对一的转换，那么flatmap则是实现一对多的转换。在RxJava的文档上是如此描述flatmap的：</p>
<p>将一个发射数据的Observable变换为多个Observables，然后将它们发射的数据合并后放进一个单独的Observable</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_II_6.png" alt="图片来自官方文档"></p>
<p>对于一个url你可以用map一对一的将其转换为一个bitmap，对于一个含有url的string数组你也可以采用以下的方式来转换：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Observable.just(str).map(<span class="keyword">new</span> Func1&lt;String[], Bitmap&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String[] s)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (String a : s) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                URLConnection con = <span class="keyword">new</span> URL(a).openConnection();</div><div class="line">                InputStream inputStream = con.getInputStream();</div><div class="line">                Bitmap bitmap = BitmapFactory.decodeStream(inputStream);</div><div class="line">                <span class="keyword">return</span> bitmap;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.newThread())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">.subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">        image.setImageBitmap(bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>但是写完之后会不会觉得有点不得劲？感觉这很不RxJava，很让人不愉快？那就对了，人要对自己好一点，觉得不爽就换个flatmap试试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Observable.from(str).flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Observable.just(s);</div><div class="line">    &#125;</div><div class="line">&#125;).map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Bitmap bt = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URL url = <span class="keyword">new</span> URL(s);</div><div class="line">            URLConnection con = url.openConnection();</div><div class="line">            bt = BitmapFactory.decodeStream(con.getInputStream());</div><div class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bt;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>不管效果如何，这一条链子写下来就是让人很舒服~同时逻辑也非常的清晰，以后再改这种代码的时候可以少骂几句娘了。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一次关于RxJava的不能停到这里就要告一段落了，好在我已经把我想要写的都写的差不多了，不过这里的小结也不能光灌水。最近本来打算开个项目把gank io的api搞一下，不过最近突然就忙起来了，所以那个东西先搁置一下，关于我初学时的项目的重构已经在进行了。使用了MVP，部分逻辑使用了RxJava，不过因为是初学时写的，自己不满意的地方实在是太多了。以下的两点是我最近在使用RxJava时自己总结的一点经验，不足之处欢迎指出：</p>
<h4 id="线程控制就交给RxJava去做"><a href="#线程控制就交给RxJava去做" class="headerlink" title="线程控制就交给RxJava去做"></a>线程控制就交给RxJava去做</h4><p>说实话，我还没有开始使用Retrofit，我使用的一直是Hongyang大神封装的OkhttpUtil，因为的确挺好用的。现在一般的请求框架也都会自己封装线程池，实现异步回调。我就在这上面吃了一个小亏，我在使用RxJava实现读取数据的逻辑的时候，先从网络获取数据，获取不到则读取本地缓存。结果每次读取的都是本地数据，这让我很奇怪，我打了log发现网络请求也是成功的。后来我有点明白了:</p>
<p>我使用okhttputil获取数据成功时回调，但是我在订阅的回调里面判断数据状态时，数据还没有获取到，所以执行了获取本地数据的逻辑。所以关于异步这个问题，我想说的就是写同步的代码，让RxJava做异步的事。当然，我的看法并不一定准确，你可以在底下评论说出你的想法，欢迎讨论。</p>
<p>最后再来个真正的小结吧，说实话，我觉得写这两篇RxJava的文章对我自己的帮助真的挺大的，让我对RxJava的认知又提升了一点。现在再看以前写的一些RxJava的代码，都觉得不够RxJava，所以要走的路还很长啊~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;上篇文章&lt;a href=&quot;http://www.jianshu.com/p/93ae2aa6a60a&quot;&gt;RxJava从放弃到入门（一）：基础篇&lt;/a&gt;讲述的东西都是非常基础的东西，这一篇准备讲述以下一些东西：&lt;/p&gt;
&lt;p&gt;创建Observable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;just&lt;/li&gt;
&lt;li&gt;defer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作符:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;flatmap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经验总结:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己遇到的一些坑和经验&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;再叙Observable&quot;&gt;&lt;a href=&quot;#再叙Observable&quot; class=&quot;headerlink&quot; title=&quot;再叙Observable&quot;&gt;&lt;/a&gt;再叙Observable&lt;/h3&gt;&lt;p&gt;在上一篇里我们已经了解了在RxJava中Observable扮演了什么样的角色，如果你还没看过，没事，我们一起来回忆以下：在RxJava中，Observable扮演的是一个发射数据或数据序列的角色。Observer则是接收Observable发射的东西。上次只提到了一种hello world的打印方法，是否会让你感到不爽？让我们当一回孔乙己，学一下“茴”字的N种写法。当然在这我并不会以流水账的形式记录每一种创建操作的流程，那样无疑是没有必要的，实在想要了解你可以去看文档。&lt;br&gt;
    
    </summary>
    
      <category term="RxJava" scheme="https://xiasuhuei321.github.io/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://xiasuhuei321.github.io/tags/RxJava/"/>
    
      <category term="进阶" scheme="https://xiasuhuei321.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>RxJava从放弃到入门(一):基础篇</title>
    <link href="https://xiasuhuei321.github.io/2016/09/09/RxJava%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/"/>
    <id>https://xiasuhuei321.github.io/2016/09/09/RxJava从入门到放弃-一/</id>
    <published>2016-09-09T15:41:47.000Z</published>
    <updated>2016-10-16T07:49:51.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>RxJava我一直是很想用的，扔物线老师的文章我也看了一点，但是说实话，其中很多东西交错在一起，对于我来说有点难以理解。而且看很多文章总是看了前面忘后面，还有一些结合lambda讲的，说实话，我是懵逼的。在这里把我自己对于RxJava的一些理解，看到的一些好文记录下来。</p>
<h3 id="RxJava是啥"><a href="#RxJava是啥" class="headerlink" title="RxJava是啥"></a>RxJava是啥</h3><blockquote>
<p>Rx是一个函数库，让开发者可以利用可观察序列和LINQ风格查询操作符来编写异步和基于事件的程序。</p>
</blockquote>
<p>好，对于C#不怎么了解的人一般不会知道LINQ是啥东东吧……这个介绍我们先选择略过。看看github上RxJava是怎样描述自己的。</p>
<p><strong>  a library for composing asynchronous and event-based programs by using observable sequences. </strong> 一个在Java VM上使用可观测的序列来组成异步的、基于事件的程序的库。</p>
<p>这句话对于还未用过、看过RxJava的人来说是比较难理解的，好在关于RxJava的资料非常多，我们可以站在巨人的肩膀上来总结。首先扔物线对于RxJava给出的关键词就是<strong> 异步 </strong>，归根到底它就是一个实现异步操作的库。而回过头来，再看一遍这个定义，我们可以看出另外两个关键词：可观测的序列、基于事件，你可能会说这不废话吗，这句话一共才几个词，都快给我说完了。没错，因为这句话概括的非常精准，让人难以再精简了。<br><a id="more"></a></p>
<h3 id="为啥要用RxJava"><a href="#为啥要用RxJava" class="headerlink" title="为啥要用RxJava"></a>为啥要用RxJava</h3><p>Android中实现异步的工具还是有的，那么问题来了，对于我们Android开发者来说，为什么要用RxJava而不是本来的工具？</p>
<p>Talk is cheap，下面选取部分我以前写的代码，用AsyncTask实现的加载数据的类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">ArrayList</span>&lt;<span class="title">ImageBean</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> ObjectOutputStream oos;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> ArrayList&lt;ImageBean&gt; <span class="title">doInBackground</span><span class="params">(<span class="keyword">final</span> String... params)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String imageUrl = params[<span class="number">0</span>];</div><div class="line">                HttpUtils.getJsonString(imageUrl, <span class="keyword">new</span> HttpUtils.HttpCallbackListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">(String response)</span> </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (JsonUtils.readJsonImageBean(response) != <span class="keyword">null</span>) &#123;</div><div class="line">                            imageList = JsonUtils.readJsonImageBean(response);</div><div class="line"><span class="comment">//                            memoryCache.addArrayListToMemory("imageList", imageList);</span></div><div class="line"></div><div class="line">                            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">                                <span class="comment">//序列化imageList</span></div><div class="line">                                <span class="keyword">if</span> (getActivity() != <span class="keyword">null</span>) &#123;</div><div class="line">                                    File imageCache = FileUtils.getDisCacheDir(getActivity(), <span class="string">"ImageBean"</span>);</div><div class="line">                                    <span class="keyword">try</span> &#123;</div><div class="line">                                        oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(imageCache));</div><div class="line">                                        oos.writeObject(imageList);</div><div class="line">                                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                                        e.printStackTrace();</div><div class="line">                                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                                        <span class="keyword">if</span> (oos != <span class="keyword">null</span>) &#123;</div><div class="line">                                            <span class="keyword">try</span> &#123;</div><div class="line">                                                oos.close();</div><div class="line">                                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                                                e.printStackTrace();</div><div class="line">                                            &#125;</div><div class="line">                                        &#125;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                                count++;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">return</span> imageList;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>上面那段代码表示先从文件中读取list，然后再从网络获取数据（初学时的代码，没有考虑好一些逻辑关系）。当我打算重构代码，看到这一段的时候，我的内心是崩溃的。虽然逻辑并不复杂，但是这些迷之缩进实在是看的蛋疼。那么如果我用RxJava重写一下上面的逻辑，会是怎样的呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">0</span>, <span class="number">1</span>)</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribeOn(Schedulers.newThread())</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (integer == TYPE_NETWORK) &#123;</div><div class="line">                    <span class="keyword">return</span> getUrl(pageIndex, type);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="string">"cache"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (s.equals(<span class="string">"cache"</span>)) &#123;</div><div class="line">           <span class="comment">//加载缓存</span></div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">//从网络获取数据</span></div><div class="line">           onCompleted();</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>以上代码实现的非常不科学，非常的不RxJava，但是在这里仅仅是作为一个示例，让你感受一下RxJava的特性：简洁。你可能会说这哪里简洁了啊？代码量不跟以前差不多吗，是的，甚至有的时候代码量还会增加一点，但是这样的代码能让你感觉到清晰的逻辑。一切逻辑都在链子里了，而且如果你使用lambda会得到更加简洁的代码。。</p>
<p>这就是我们要用RxJava的原因之一了：<strong> 简洁 </strong> </p>
<p>这里的简洁不是指代码量的少，而是指代码逻辑的简洁。而且这种优势随着逻辑的复杂而更加明显。在这里我并不会将lambda和RxJava结合在一起，一是因为自己的确不熟，二也是因为自己初接触RxJava，对于我这种入门级选手还是要先排除一些干扰项</p>
<h3 id="RxJava核心-amp-基础"><a href="#RxJava核心-amp-基础" class="headerlink" title="RxJava核心&amp;基础"></a>RxJava核心&amp;基础</h3><p>在开始撸RxJava的代码之前，我们首先要弄清楚RxJava中的三个基本也是核心的概念：观察者（Observer）、订阅（Subscribe()）和被观察者（Observable）。熟悉设计模式的你可能会立刻想到，这不就是观察者模式吗。是的，就是观察者模式。</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_I_1.png" alt="订阅.png"></p>
<p>观察者模式定义了对象间一种一对多的依赖关系，每当一个对象状态发生改变，所有依赖于它的对象都会得到通知并被自动更新。在Android中比较经典的例子有Button的点击，只有当Button被点击的时候，观察者OnClickListener在Button的点击状态发生改变时将点击事件传送给注册的OnClickListener。而对于RxJava来说也是如此，接下来我将换一种我喜欢的描述来讲解我所理解的RxJava。RxJava中Observable是发射数据的源，无论他是“热”启动还是“冷”启动，总之，他最终都是用来发射数据的。Observer则是数据接收者，而Observer和Observable则通过subscribe()（订阅）结合在一起，从而达到Observer接收Observable发射的数据的目的。</p>
<p>在讲解完了RxJava的核心之后，还需要注意一些细节：<br>在RxJava的文档中指出，无论哪种语言，你的观察者（Observer）需要实现以下方法的子集：</p>
<ul>
<li><p>onNext(T item)<br>Observable调用这个方法发射数据，方法的参数就是Observable发射的数据，这个方法调用次数取决于实现。</p>
</li>
<li><p>onError(Exception e)<br>Observable遇到错误时会调用这个方法，这个调用会终止Observable，onError和以下将要介绍的onComplete是互斥的，即同一个事件序列中二者只能有一个被调用。</p>
</li>
<li><p>onComplete()<br>正常终止</p>
</li>
</ul>
<p>好了，烦人的概念时间终于过去了，让我们开始愉悦的Hello World时间！</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><p>打码之前记得加上依赖：</p>
<blockquote>
<p>compile ‘io.reactivex:rxjava:1.0.14’<br>compile ‘io.reactivex:rxandroid:1.0.1’</p>
</blockquote>
<p>我这的依赖好像还是看扔物线文的时候添加的……应该比较老了……</p>
<p>话不多说直接上码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建被观察者</span></div><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        <span class="comment">//回调</span></div><div class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"World"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;<span class="comment">//被订阅</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onError"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(TAG, s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_I_2.png" alt="hello world.png"></p>
<p>刚接触到这一坨代码你可能会说卧槽这什么东西，大兄弟先别忙着走，我那么写只是为了把RxJava链式调用的特点展现在你面前，接下来让我们从Observeable和Observer的创建开始。</p>
<ul>
<li>创建Observable<br>创建Observable的方式非常的多，先介绍一下非常基本的<strong> Create </strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"World"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"!"</span>);                </div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过create()方法可以创建一个Observable对象我们是知道了，那么create()方法中的参数是什么呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Invoked when Observable.subscribe is called.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnSubscribe</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Action1</span>&lt;<span class="title">Subscriber</span>&lt;? <span class="title">super</span> <span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="comment">// cover for generics insanity</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个参数是个接口，那么很明显了——这个参数是用来干回调这事的，发射数据的时候将会用这个接口的实现类通过这个参数发射数据。而call方法则来源于其父接口Action1。call这个方法给出了一个subscriber参数，让我们看一下这个subscriber究竟是谁。</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_I_3.png" alt="是谁？.png"></p>
<p>可能你会说这不废话吗……闭着眼我都能知道这是炮姐……继续我们的话题，在这个类实现的接口里我们发现了一个看起来非常熟悉的东西<strong> Observer </strong>是了，这个subscriber就是一个订阅者，一个订阅者加强版。他相对于Observer主要有两点区别，一个onStart()会在订阅开始，事件发送前执行，所以你可以在这个方法里做一些准备工作。另一点是实现的另外一个接口提供的unsubscribe()，取消订阅。据扔物线的文章说，不取消订阅可能会有内存泄露的风险，关于这一点我并不是很清楚，因为我还没有读过这方面的代码，弄清楚他们的实现方式，在这里就不多加揣测了。</p>
<ul>
<li>创建Observer<br>看完了Observable的创建，我们再来看一下Observer的创建<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(TAG,s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>按照老样子，点进Observer发现这个也是个接口，那么我们在使用多态创建这个方法的时候必须要实现他的三个方法。</p>
<ul>
<li>订阅<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(observer);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面的代码看起来像是observable订阅了observer，但事实上这种设计是出于流式api的考虑，什么是流式api？看看我的hello world实例代码是怎么写的，那就是流式api设计的好处。整个代码看起来像是一个链子，优雅而简洁。</p>
<p>好了，最基本的介绍完了，你现在可以去尝试一下你的Hello World了。不过在尝试之前，我需要纠正我上述Hello World示例代码的一个错误：RxJava文档中对于Observable的描述有这么一段话，一个形式正确的Observable必须尝试调用一次onCompleted或者调用一次onError方法。很明显，我的demo是一个使用方法错误的例子。此处对Observable和Observer的api介绍非常的少，因为我觉得一次性把文档上的方法全给你搬上来并不明智，一是用不上那么多，二是容易混淆。</p>
<h3 id="线程控制——Scheduler"><a href="#线程控制——Scheduler" class="headerlink" title="线程控制——Scheduler"></a>线程控制——Scheduler</h3><p>终于要到重点了，线程控制绝对是RxJava的重点之一。在不指定线程的情况下，RxJava遵循的是线程不变的原则，在哪个线程调用subscribe()，就在哪个线程生产、消费事件。这对于大部分开发人员来说都是难以接受的事，因为如果是耗时操作可能会阻塞当前线程，这是开发者不想看到的，好在我们是可以切换线程的。下面同样是摘自的描述：</p>
<ul>
<li><p>Schedulers.computation( )：用于计算任务，如事件循环或回调处理，不要用于IO操作，默认线程数等于处理器的数量。</p>
</li>
<li><p>Schedulers.from(executor)：使用指定的Executor作为调度器</p>
</li>
<li><p>Schedulers.immediate( )：在当前线程立即开始执行任务</p>
</li>
<li><p>Schedulers.io( )：用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长；Schedulers.io()默认是一个CachedThreadScheduler，很像一个有线程缓存的新线程调度器。</p>
</li>
<li><p>Schedulers.newThread( )：为每个任务创建一个新线程</p>
</li>
<li><p>Schedulers.trampoline( )：当其它排队的任务完成后，在当前线程排队开始执行</p>
</li>
</ul>
<p>这里只是初步的了解一下，毕竟本文定位是一篇基础级的文，以下给出一个简单的加载图片的例子。</p>
<h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><p>首先明确我们要干的事：通过一个url加载一张图，恩为了演示RxJava和线程控制，我用HttpUrlConnection来做一个实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Bitmap&gt; subscriber)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                URL url = <span class="keyword">new</span> URL(<span class="string">"http://img4.imgtn.bdimg.com/it/u=815679381,647288773&amp;fm=21&amp;gp=0.jpg"</span>);</div><div class="line">                HttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class="line">                connection.setRequestMethod(<span class="string">"GET"</span>);</div><div class="line">                connection.setConnectTimeout(<span class="number">8000</span>);</div><div class="line">                connection.setReadTimeout(<span class="number">8000</span>);</div><div class="line"></div><div class="line">                InputStream in = connection.getInputStream();</div><div class="line">                Bitmap bitmap = BitmapFactory.decodeStream(in);</div><div class="line">                subscriber.onNext(bitmap);</div><div class="line">            &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">            .observeOn(AndroidSchedulers.mainThread())  <span class="comment">//指定subscriber的回调发生在UI线程</span></div><div class="line">            .subscribeOn(Schedulers.newThread())        <span class="comment">//指定subscribe()发生在新线程</span></div><div class="line">            .subscribe(<span class="keyword">new</span> Subscriber&lt;Bitmap&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                    plan.setVisibility(View.GONE);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">                        image.setImageBitmap(bitmap);</div><div class="line">                        onCompleted();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/RxJava_I_4.gif" alt="炮姐.gif"></p>
<p>上面的代码写的很清楚了，我是通过observeOn(AndroidSchedulers.mainThread())指定订阅者的回调发生在主线程，因为这里给ImageView设置图片需要在主线程进行，通过subscribeOn(Schedulers.newThread())指定subscribe()发生在新线程。</p>
<p>最后请忽略最后几秒的蜜汁小圆点，因为我不摸屏幕AndroidStudio的录制就会停留在加载出图片后的那一段时间，录制出来的效果非常差。我加载的这张图是非常小的，我通过限制wifi网速为5k/s来达到“加载”这个目的。</p>
<h3 id="一些反思"><a href="#一些反思" class="headerlink" title="一些反思"></a>一些反思</h3><p>本文说的并不深入，只是一篇基础，看完了这篇可能你只能写两个小demo。但是就如我上文所说的，我认为学一个东西，基础是十分重要的，只要你梳理清楚基础和关键，学习起来无疑是事半功倍的。</p>
<p>我在文章最开头写的demo我为什么要说这很不“RxJava”？因为我只是传递了两个Integer类型的数，之后通过map操作符将这两个转换为String，在订阅的回调里处理这两个字符，并执行相应的逻辑。这给我的感觉就和以前写代码的感觉差不多，没有一种链式调用的爽快感，反而有一种强行用RxJava的感觉。那么RxJava的应用场景和操作符究竟有什么玄机？我会继续探索，继续分享。请期待~</p>
<h3 id="推荐资料"><a href="#推荐资料" class="headerlink" title="推荐资料"></a>推荐资料</h3><p>给Android开发者的RxJava详解：<a href="http://gank.io/post/560e15be2dca930e00da1083#toc_14" target="_blank" rel="external">http://gank.io/post/560e15be2dca930e00da1083#toc_14</a></p>
<p>ReactiveX/RxJava文档中文版：<a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="external">https://mcxiaoke.gitbooks.io/rxdocs/content/</a></p>
<p>大头鬼深入浅出RxJava系列：<a href="http://blog.csdn.net/lzyzsd/article/details/44094895" target="_blank" rel="external">http://blog.csdn.net/lzyzsd/article/details/44094895</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;RxJava我一直是很想用的，扔物线老师的文章我也看了一点，但是说实话，其中很多东西交错在一起，对于我来说有点难以理解。而且看很多文章总是看了前面忘后面，还有一些结合lambda讲的，说实话，我是懵逼的。在这里把我自己对于RxJava的一些理解，看到的一些好文记录下来。&lt;/p&gt;
&lt;h3 id=&quot;RxJava是啥&quot;&gt;&lt;a href=&quot;#RxJava是啥&quot; class=&quot;headerlink&quot; title=&quot;RxJava是啥&quot;&gt;&lt;/a&gt;RxJava是啥&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Rx是一个函数库，让开发者可以利用可观察序列和LINQ风格查询操作符来编写异步和基于事件的程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好，对于C#不怎么了解的人一般不会知道LINQ是啥东东吧……这个介绍我们先选择略过。看看github上RxJava是怎样描述自己的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  a library for composing asynchronous and event-based programs by using observable sequences. &lt;/strong&gt; 一个在Java VM上使用可观测的序列来组成异步的、基于事件的程序的库。&lt;/p&gt;
&lt;p&gt;这句话对于还未用过、看过RxJava的人来说是比较难理解的，好在关于RxJava的资料非常多，我们可以站在巨人的肩膀上来总结。首先扔物线对于RxJava给出的关键词就是&lt;strong&gt; 异步 &lt;/strong&gt;，归根到底它就是一个实现异步操作的库。而回过头来，再看一遍这个定义，我们可以看出另外两个关键词：可观测的序列、基于事件，你可能会说这不废话吗，这句话一共才几个词，都快给我说完了。没错，因为这句话概括的非常精准，让人难以再精简了。&lt;br&gt;
    
    </summary>
    
      <category term="RxJava" scheme="https://xiasuhuei321.github.io/categories/RxJava/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="RxJava" scheme="https://xiasuhuei321.github.io/tags/RxJava/"/>
    
      <category term="进阶" scheme="https://xiasuhuei321.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>第一话-从头再来</title>
    <link href="https://xiasuhuei321.github.io/2016/09/04/%E7%AC%AC%E4%B8%80%E8%AF%9D-%E4%BB%8E%E5%A4%B4%E5%86%8D%E6%9D%A5/"/>
    <id>https://xiasuhuei321.github.io/2016/09/04/第一话-从头再来/</id>
    <published>2016-09-04T08:44:55.000Z</published>
    <updated>2016-09-04T11:09:07.497Z</updated>
    
    <content type="html"><![CDATA[<p>一直打算让自己的Java回炉重新锻造一下，那么，从现在开始吧。</p>
<p>本文是阅读《Thinking in Java》(以下简称TIJ)第七章之后的产物，会包含以下：</p>
<ul>
<li>一个问题</li>
<li>一些思考</li>
<li>重载与重写</li>
<li>final</li>
</ul>
<h3 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h3><p>如图代码，test明明是类A的私有成员变量，（1）为什么其子类B的实例能够正常使用set方法打印出test?（2）这又使我想起了前一段时间一个朋友问我的问题，new一个子类的时候，是不是会同时new出对应的父类？构造方法到底仅仅只是初始化成员变量，还是同时会申请内存空间？<br><img src="http://upload-images.jianshu.io/upload_images/1976147-bb49ffa7bdc02a97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p>
<ul>
<li>为什么子类B的实例能够正常使用set方法打印出test？</li>
<li>new一个子类的时候，是不是会同时new出对应的父类？<a id="more"></a>
首先我们需要明确的继承的一些特性，<strong> 子类拥有父类的所有属性和方法 </strong>，这是一点。第二点，<strong> private修饰的变量、方法仅类内可访问 </strong>，出了这个类，对不起你看不到。当然了，通过反射之类的技巧还是有办法的，但是这不在我的讨论范围之内。</li>
</ul>
<p>TIJ对第一点有一些印证的描述：<br>子类对象的正确初始化至关重要，而且也仅有一种方法来保证这一点，在构造器中调用父类构造器来执行初始化，父类构造器具有执行父类初始化所需要的所有东西。</p>
<p>那么以上的问题应该可以迎刃而解了：private修饰的test仅在A类中是可以访问到的，虽然B类继承了A类，拥有这一属性，但是遗憾的是他并没有打开箱子的密码，并不能访问到。但是public修饰的set方法子类B是可以访问的，于是调用set方法打印了test的值。在new一个子类的时候并不会同时new出对应的父类，而是会调用父类的构造器。构造方法可以理解成一段比较特殊的代码，可以用来初始化实例的数据，但是只有在new 构造方法名 的时候才会申请内存空间。</p>
<h3 id="一些思考（1）"><a href="#一些思考（1）" class="headerlink" title="一些思考（1）"></a>一些思考（1）</h3><p>即使在子类中调用父类的构造器，有时也无法保证所有成员都被初始化。事实上在我们平时写代码的时候，有很多成员并非是在构造器中初始化的，而是在我们需要用之前初始化，所以当我们在考虑到继承的情况下，需要多考虑一些未在构造器中被初始化的成员。</p>
<h3 id="重载与重写"><a href="#重载与重写" class="headerlink" title="重载与重写"></a>重载与重写</h3><ul>
<li><p>重载<br>重载是指方法名都一样，但是参数不一样，返回值也可以一样。但是如果参数完全相同，只有返回值是不一样的，那是不可行的。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-ead64610921b9516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p>
</li>
<li><p>重写<br>重写通常发生在子类，子类写一个父类中有的同名方法（方法参数，返回类型一致），那么在调用这个名字的方法时将会调用子类中的这个方法。当你确定要覆盖父类的方法时，建议使用注解@Override，这样可以防止你在不想重载时而以外地进行了重载。</p>
</li>
</ul>
<h3 id="一些思考（2）"><a href="#一些思考（2）" class="headerlink" title="一些思考（2）"></a>一些思考（2）</h3><p>看到Override这一块的时候，不经想起来了Android中的Handler，平时我们的写法都是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>关于以上写static修饰符将会在下文给出解释。</p>
<p>首先Handler是个抽象类，但是我点进去，搜了一下abstract这个关键字，没有!一个都没有！<br><img src="http://upload-images.jianshu.io/upload_images/1976147-abce9bf24ad7b7f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="没有abstract.png"></p>
<p>关于abstract class 文档是这样描述的：抽象类是不完全的类，或者被认为是不完全的。那么这个就容易理解了，抽象类并未强制要求你一定要有abstract method，只要你自己认为这个类是abstract class就可以给他加上。那么”=”右边的写法是怎么回事呢？</p>
<p>右边的写法想要表达的意思是：创建一个继承自Handler的匿名类对象。可能你会和我有一样的疑惑，名字不是handler在左边挂着呢么？如果你有这个疑惑……恭喜，你该和我一起回去重造Java了……因为上面说的很清楚了是”=”右边的，右边通过new表达式返回的引用被自动转型为Handler，所以说这是一个Handler的子类，用一个通俗易懂的问结束这个话题：那么这个子类的名呢？</p>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final关键字根据上下文和修饰对象的不同可能会有一些差别。</p>
<ul>
<li><p>变量<br>如果final修饰的是基本数据类型，那么此变量恒定不变。如果final修饰的是引用类型，那么一旦该引用类型被初始化指向一个对象，那么久无法将他改为指向另一个对象。但是需要注意的是对象本身的值是可以改变的。</p>
</li>
<li><p>方法<br>final修饰的方法不可以被复写。</p>
</li>
<li><p>类<br>final修饰的方法不可以被继承。</p>
</li>
</ul>
<h3 id="为什么匿名内部类中形参要是final的？"><a href="#为什么匿名内部类中形参要是final的？" class="headerlink" title="为什么匿名内部类中形参要是final的？"></a>为什么匿名内部类中形参要是final的？</h3><p>在写Android程序时，很多时候都会碰到需要向匿名内部类传参的情况。一般这种情况我们也就是改一下……那么为什么要传入final类型呢？</p>
<p>在内部类中的属性和外部方法的参数两者从外表上看是同一个东西，但实际上却不是，所以他们两者是可以任意变化的，也就是说在内部类中我对属性的改变并不会影响到外部的形参，然而这从程序员的角度来看这是不可行的，毕竟站在程序的角度来看这两个根本就是同一个，如果内部类该变了，而外部方法的形参却没有改变这是难以理解和不可接受的，所以为了保持参数的一致性，就规定使用 final 来避免形参的不改变。<br><strong> 简单理解就是，拷贝引用，为了避免引用值发生改变，例如被外部类的方法修改等，而导致内部类得到的值不一致，于是用 final 来让该引用不可改变。 </strong><br><strong> 故如果定义了一个匿名内部类，并且希望它使用一个其外部定义的参数，那么编译器会要求该参数引用是 final 的。 </strong></p>
<p>最后揭晓一下以上为什么要用static修饰Handler，因为内部类会隐性的持有一个外部类的引用，这个外部类可能是个Activity，因为这可能会导致Activity无法被回收，从而导致内存泄漏。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直打算让自己的Java回炉重新锻造一下，那么，从现在开始吧。&lt;/p&gt;
&lt;p&gt;本文是阅读《Thinking in Java》(以下简称TIJ)第七章之后的产物，会包含以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个问题&lt;/li&gt;
&lt;li&gt;一些思考&lt;/li&gt;
&lt;li&gt;重载与重写&lt;/li&gt;
&lt;li&gt;final&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一个问题&quot;&gt;&lt;a href=&quot;#一个问题&quot; class=&quot;headerlink&quot; title=&quot;一个问题&quot;&gt;&lt;/a&gt;一个问题&lt;/h3&gt;&lt;p&gt;如图代码，test明明是类A的私有成员变量，（1）为什么其子类B的实例能够正常使用set方法打印出test?（2）这又使我想起了前一段时间一个朋友问我的问题，new一个子类的时候，是不是会同时new出对应的父类？构造方法到底仅仅只是初始化成员变量，还是同时会申请内存空间？&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1976147-bb49ffa7bdc02a97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么子类B的实例能够正常使用set方法打印出test？&lt;/li&gt;
&lt;li&gt;new一个子类的时候，是不是会同时new出对应的父类？
    
    </summary>
    
      <category term="Java" scheme="https://xiasuhuei321.github.io/categories/Java/"/>
    
    
      <category term="基础" scheme="https://xiasuhuei321.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Fragment结合ViewPager之懒加载</title>
    <link href="https://xiasuhuei321.github.io/2016/09/02/Fragment%E7%BB%93%E5%90%88ViewPager%E4%B9%8B%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>https://xiasuhuei321.github.io/2016/09/02/Fragment结合ViewPager之懒加载/</id>
    <published>2016-09-02T14:00:25.000Z</published>
    <updated>2016-09-03T11:14:58.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是懒加载？为什么要用懒加载？"><a href="#什么是懒加载？为什么要用懒加载？" class="headerlink" title="什么是懒加载？为什么要用懒加载？"></a>什么是懒加载？为什么要用懒加载？</h3><h4 id="1、什么是懒加载"><a href="#1、什么是懒加载" class="headerlink" title="1、什么是懒加载"></a>1、什么是懒加载</h4><p>懒加载就是当ViewPager和Fragment结合在一起使用时，Fragment呈现在用户面前时才加载数据，当其从未被呈现在用户面前时，不会执行加载数据的代码。这就是我所理解的懒加载。</p>
<h4 id="2、为什么要用懒加载"><a href="#2、为什么要用懒加载" class="headerlink" title="2、为什么要用懒加载"></a>2、为什么要用懒加载</h4><p>ViewPager默认会预加载下一页，如果下一页是某个重量级的Fragment无疑会造成很大的开销，当然了，如果对于你来说这些开销是必要的，也不必无脑用懒加载。</p>
<h3 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h3><p>很多时候我们都会将ViewPager和Fragment结合在一起使用，因为Android给我们提供了非常便利的<strong>FragmentPageAdapter</strong>,而这个adapter实现起来非常简单：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TechFragmentPageAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; fragmentList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TechFragmentPageAdapter</span><span class="params">(FragmentManager fm, List&lt;Fragment&gt; fragmentList)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        <span class="keyword">this</span>.fragmentList = fragmentList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> fragmentList.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> fragmentList.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们一般的Activity都是继承于AppCompatActivity，而这个activity可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getSupportFragmentManager();</div></pre></td></tr></table></figure></p>
<p>那么在实现以上的adapter时我们只要传入我们的fragmentList就可以了。这样的adapter既看起来舒服，又好使。但是ViewPager默认会加载下一页，当你调用setOffscreenPageLimit()，并且将值设置为0，抱歉，没啥用，因为当你设置的值小于1的时候默认还是1。那么，这个时候就需要我们自己去实现懒加载了。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现懒加载的关键是在于以下两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 文档对于这个方法的描述是：Set a hint to the system about whether this </div><div class="line"> * fragment's UI is currently visible to the user.</div><div class="line"> **/</div><div class="line">getUserVisibleHint()</div><div class="line">setUserVisibleHint(<span class="keyword">boolean</span> isVisibleToUser)</div></pre></td></tr></table></figure></p>
<p>接下来让我通过一段Log来了解这段故事，因为代码结构比较简单，只放其中的一段代码上来，其他的，靠我们脑补就行了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FirstFragment"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onAttach"</span>);</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onCreate"</span>);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onCreateView"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateView(inflater, container, savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onActivityCreated"</span>);</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onStart"</span>);</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onResume"</span>);</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onPause"</span>);</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onStop"</span>);</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDestroyView"</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroyView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDestroy"</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDetach"</span>);</div><div class="line">        <span class="keyword">super</span>.onDetach();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getUserVisibleHint</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"getUserVisibleHint"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getUserVisibleHint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</div><div class="line">        Log.e(TAG, <span class="string">"setUserVisibleHint:"</span> + isVisibleToUser);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>非常简单的一个Fragment，我只是在其中的各个方法中加入了Log这个操作而已，为了方便查看我使用了e这个级别的日志。类似的Fragment还有SecondFragment和ThirdFragment。当我使用FragmentPagerAdapter和ViewPager的时候，他们的Log输出如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-61a8b90cc542510c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Log日志.png"></p>
<p>首先和我们预料的一样，ViewPager的确有加载下一页的特性，然后我们滑动到第二页查看Log。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-a8c0fcc0fc43014f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第二页Log.png"><br>我们可以发现，当我们滑动到第二页时，第三页开始预加载，而且第二页的setUserVisibleHint中的值已经被置为了true。也就是说当前页面可见时，我们调用getUserVisibleHint()的值是true。那么我们可以根据这个特性去实现懒加载：</p>
<p><strong>当前页面不可见，但是ViewPager预加载的时候，我们判断当前页面是否可见，不可见则不进行加载数据的操作，仅仅做布局初始化的工作。在当前页面变为可用的时候，我们调用加载数据的方法，那么数据便在ViewPager滑动到当前页面的时候开始加载了。</strong></p>
<p>以下是我封装的代码，我封装无力，各位如果觉得可以便自取，如果觉得不行可以自己改进~<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.net.ConnectivityManager;</div><div class="line"><span class="keyword">import</span> android.net.NetworkInfo;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"></div><div class="line"><span class="keyword">import</span> gank.io.luo.view.TechView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Luo_xiasuhuei321@163.com on 2016/8/29.</div><div class="line"> * </div><div class="line"> * 实现懒加载的Fragment</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseLazyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> View mRootView;</div><div class="line">    <span class="keyword">protected</span> Context mContext;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isVisible;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isPrepared;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirst = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">//--------------------system method callback------------------------//</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">        isPrepared = <span class="keyword">true</span>;</div><div class="line">        initPrepare();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</div><div class="line">        <span class="keyword">if</span> (getUserVisibleHint()) &#123;</div><div class="line">            isVisible = <span class="keyword">true</span>;</div><div class="line">            lazyLoad();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            isVisible = <span class="keyword">false</span>;</div><div class="line">            onInvisible();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mContext = getActivity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mRootView == <span class="keyword">null</span>) &#123;</div><div class="line">            mRootView = initView(inflater, container, savedInstanceState);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mRootView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//--------------------------------method---------------------------//</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 懒加载</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">lazyLoad</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isPrepared || !isVisible || !isFirst) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        initData();</div><div class="line">        isFirst = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//--------------------------abstract method------------------------//</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在onActivityCreated中调用的方法，可以用来进行初始化操作。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initPrepare</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * fragment被设置为不可见时调用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onInvisible</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这里获取数据，刷新界面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化布局，请不要把耗时操作放在这个方法里，这个方法用来提供一个</div><div class="line">     * 基本的布局而非一个完整的布局，以免ViewPager预加载消耗大量的资源。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> View <span class="title">initView</span><span class="params">(LayoutInflater inflater,</span></span></div><div class="line">                                     @Nullable ViewGroup container,</div><div class="line">                                     @Nullable Bundle savedInstanceState);</div></pre></td></tr></table></figure></p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>最近我搭建了自己的个人博客，虽然今天（9.2）没时间完善了，但是以后有空我会完善一下的。而且有些文章我也不会再简书更新……比如我想把我的java回炉重造一下……但是有关java的这些东西不怎么想放到简书上，还是放到我自己的小窝里~</p>
<p>最后附上链接吧：<a href="https://xiasuhuei321.github.io">https://xiasuhuei321.github.io</a><br>恩，域名暂时没买，先就这么用着吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是懒加载？为什么要用懒加载？&quot;&gt;&lt;a href=&quot;#什么是懒加载？为什么要用懒加载？&quot; class=&quot;headerlink&quot; title=&quot;什么是懒加载？为什么要用懒加载？&quot;&gt;&lt;/a&gt;什么是懒加载？为什么要用懒加载？&lt;/h3&gt;&lt;h4 id=&quot;1、什么是懒加载&quot;&gt;&lt;a href=&quot;#1、什么是懒加载&quot; class=&quot;headerlink&quot; title=&quot;1、什么是懒加载&quot;&gt;&lt;/a&gt;1、什么是懒加载&lt;/h4&gt;&lt;p&gt;懒加载就是当ViewPager和Fragment结合在一起使用时，Fragment呈现在用户面前时才加载数据，当其从未被呈现在用户面前时，不会执行加载数据的代码。这就是我所理解的懒加载。&lt;/p&gt;
&lt;h4 id=&quot;2、为什么要用懒加载&quot;&gt;&lt;a href=&quot;#2、为什么要用懒加载&quot; class=&quot;headerlink&quot; title=&quot;2、为什么要用懒加载&quot;&gt;&lt;/a&gt;2、为什么要用懒加载&lt;/h4&gt;&lt;p&gt;ViewPager默认会预加载下一页，如果下一页是某个重量级的Fragment无疑会造成很大的开销，当然了，如果对于你来说这些开销是必要的，也不必无脑用懒加载。&lt;/p&gt;
&lt;h3 id=&quot;背景简介&quot;&gt;&lt;a href=&quot;#背景简介&quot; class=&quot;headerlink&quot; title=&quot;背景简介&quot;&gt;&lt;/a&gt;背景简介&lt;/h3&gt;&lt;p&gt;很多时候我们都会将ViewPager和Fragment结合在一起使用，因为Android给我们提供了非常便利的&lt;strong&gt;FragmentPageAdapter&lt;/strong&gt;,而这个adapter实现起来非常简单：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="性能优化" scheme="https://xiasuhuei321.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android透明状态栏解决方案</title>
    <link href="https://xiasuhuei321.github.io/2016/08/28/Android%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://xiasuhuei321.github.io/2016/08/28/Android透明状态栏解决方案/</id>
    <published>2016-08-28T05:34:19.000Z</published>
    <updated>2016-09-03T05:36:15.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近新开了个项目，准备花点时间做一下，不过文也不能少，一周一篇是最起码的了。关于沉浸式状态栏，网上的教程应该是非常非常多的，那么我为什么还要发呢？很简单，有些东西我记不大住，所以都发到我的简书上，以后我就不用到处去找了，麻烦~<br><a id="more"></a></p>
<h2 id="自定义顶部布局的沉浸式状态栏"><a href="#自定义顶部布局的沉浸式状态栏" class="headerlink" title="自定义顶部布局的沉浸式状态栏"></a>自定义顶部布局的沉浸式状态栏</h2><p>什么叫自定义顶部布局呢？这个要首先解释一下，处于一些原因的考虑，有一些项目可能不愿意使用Toolbar或者ActionBar，进入Activity的第一件事情就是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</div></pre></td></tr></table></figure></p>
<p>直接把顶部干掉，然后换上自己的顶部布局。对于这样的情况，先看一下实现之后的状况</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b0730b5fc85694ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="沉浸式.png"></p>
<p>效果好像还可以，那么究竟该怎么实现呢？</p>
<h2 id="Android5-0-LOLLIPOP"><a href="#Android5-0-LOLLIPOP" class="headerlink" title="Android5.0 LOLLIPOP"></a>Android5.0 LOLLIPOP</h2><p>为什么先讲Android5.0(API 21)呢，因为Android5.0之后可以直接改变状态栏的颜色，所以实现起来比较方便，先看一下xml配置实现的方法。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-2908263288f7e2d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="values21.png"></p>
<p>首先我们需要新建一个values-v21，然后新建styles，代码如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>#f13f00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>之后跑出来的效果就是上面的图的样子了，但是，这并没有什么用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b0f7e456225181b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并没有什么卵用"><br>是的，这并没有什么卵用，除了我们自己玩玩的项目，现在不可能直接把项目最小版本定为5.0，看看下面的版本分布你就能感受到了……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-81ef9a08860790cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分布图.png"></p>
<p>5.0版本以下的用户不可忽视，但是5.0以下的版本并没有可以改变状态栏颜色的方法，不过4.4(API 19)版本是可以将状态栏颜色设置为透明的，我们可以根据这一特性得出一些沉浸式状态栏的解决方案，而且我个人也比较推荐采用4.4及以上的这种解决方案。</p>
<h2 id="Android4-4-KITKAT"><a href="#Android4-4-KITKAT" class="headerlink" title="Android4.4 KITKAT"></a>Android4.4 KITKAT</h2><p>首先和上面差不多，在res下新建values-v19这个文件夹，然后新建styles文件，代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ImageTranslucentTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里我仅仅是设置了透明状态栏，如果你有其他的需要可以自己添加进去。这个时候运行一下看看效果<br><img src="http://upload-images.jianshu.io/upload_images/1976147-2a7406c1555ee742.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="透明.png"></p>
<p>恩，真的透明了，那么我们怎么让颜色延伸到状态栏呢？很容易想到的一种是根节点设置</p>
<blockquote>
<p>android:fitsSystemWindows=”true”</p>
</blockquote>
<p>然后设置根节点的颜色和自己的自定义标题栏一致，上布局代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:weightSum</span>=<span class="string">"1"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#f13f00"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">".lockscreen.view.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--标题布局--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"0.1"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#f13f00"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/main_title"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"ginbol"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></div><div class="line">            <span class="attr">android:textStyle</span>=<span class="string">"bold"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上图：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-97458cdee05a1eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一片红.png"></p>
<p>状态栏颜色成功变色，只要我们在使用其他布局的时候改变背景色就可以成功的实现沉浸式状态栏的效果了，但是，我在如此使用使用的时候曾经碰到一个bug，会导致部分布局颜色发生变化。使用这种布局实现的沉浸式所导致的bug，我没能解决，所以我只好换一种实现方法了……而且，在4.4的解决方案中我也推荐这种方法……这种方法是在看<a href="http://stormzhang.com/android/2015/08/16/boohee-toolbar/" target="_blank" rel="external">stormzhang-薄荷Toolbar(ActionBar)适配解决方案</a>中看到的，同样适用于我这里。</p>
<p>首先布局和标题栏和刚刚差不多，但是根节点不用</p>
<blockquote>
<p>android:fitsSystemWindows=”true”</p>
</blockquote>
<p>在自定义标题栏中加上</p>
<blockquote>
<p>android:paddingTop=”@dimen/topview_padding”</p>
</blockquote>
<p>这个paddingTop在api19以上的版本是25dp，以下是0，在使用这个方法之后运行出来的结果也是对的，就不放图了。至于这个值为什么是25dp，stormzhang的解释是在源码中看到了状态栏的高度就是那么多。</p>
<h2 id="最后的TIPS"><a href="#最后的TIPS" class="headerlink" title="最后的TIPS"></a>最后的TIPS</h2><p>有些手机可能在xml中设置状态栏透明并不起作用，使用代码在Activity中设置效果更佳。对于使用toolbar的项目，可以去看我上面提到的<a href="http://stormzhang.com/android/2015/08/16/boohee-toolbar/" target="_blank" rel="external">博客</a>，而且在他的博客中也有提到在代码中设置透明状态栏以及BaseActivity的抽取。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近新开了个项目，准备花点时间做一下，不过文也不能少，一周一篇是最起码的了。关于沉浸式状态栏，网上的教程应该是非常非常多的，那么我为什么还要发呢？很简单，有些东西我记不大住，所以都发到我的简书上，以后我就不用到处去找了，麻烦~&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://xiasuhuei321.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World--无关代码</title>
    <link href="https://xiasuhuei321.github.io/2016/08/20/Hello-World-%E6%97%A0%E5%85%B3%E4%BB%A3%E7%A0%81/"/>
    <id>https://xiasuhuei321.github.io/2016/08/20/Hello-World-无关代码/</id>
    <published>2016-08-20T11:17:35.000Z</published>
    <updated>2016-09-03T05:19:46.219Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Studio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>做一个宅男太久了，应该是从高二开始的？到现在已经有5年了？这期间有沉迷于网络小说，也有一段时间沉迷于游戏。所幸大学里并不是什么东西都没有学到，虽然自己曾放弃过多个目标（C，C#，C++），但是也在Android方面得到了一点动力。如果经常关注我的人应该能发现我的文章底下经常有<a href="http://www.jianshu.com/users/86f25f8b198b/latest_articles" target="_blank" rel="external">iamxiarui</a>的评论，事实上我和他几乎在同一时间开始认真学习Android。大学里如果要说哪个同学关系比较铁的，感觉只有他了。不过这货有一段时间趁着我忙于期末大作业疯狂发文，搞的我压力好大，但是<strong>有个朋友加对手感觉真棒</strong>。</p>
<p>以前的以前总是想的很多而做的很少，而之后则是想的少做的也少。现在，我想我应该<strong>少想一点，多做一点</strong>。平时看过我文章的人应该都能感觉到，我写文都会尽量保持欢脱愉快的气氛，不过code这种事么，那种气氛总是会被代码打断的。而我在现实生活中，却是一个并不怎么善于表达的人，宅男么，总是这样的。最近也在知乎上看到了一些很有趣的问题，比如<a href="https://www.zhihu.com/question/22580687" target="_blank" rel="external">为何我可以和同学老师朋友相处得很好，但一放假回家和父母每天都要吵嚷？</a>我的回答是：<br><strong>缺乏交流</strong>。因为平时我经常和父母交流，虽然可能会在一些事情上会有分歧，但是我们会尽量进行足够的沟通去弥补这些。平时与父母交流其实也免不了吵，但是其实这些都不算什么问题，只要有足够的交流就好了。而我的父母，最可爱的一点就是他们会认真的听我的发言。而且在平时，就算他们不是非常明白我讲的东西（技术相关）也会认真的听。</p>
<p>我很欣赏我的父母，虽然他们可能有各种缺点，但是我想成为他们那样的人。即使不懂得你在说什么，但我也会做一个好的倾听者。虽然能力不够，但是我也努力做到最好。好的，老爸我知道你们在看，我平时生活有些话是绝对不会说出口的，在这都跟你讲了。你其实算是我的偶像之一吧，不说以后，我现在就在努力的成为一个能负得起责任的人。</p>
<p>写到这里貌似都没写今天干的事啊，人一旦感慨一起来就没个完了……今天和以前的高中同学一起出去玩了一波，感觉很高兴。说实话，作为一个宅的生物，今天出去看到那么多人真是有点尴尬。果然对于“玩”这种事情我还是个hello world呢（入门者）。</p>
<p>我觉得下午的这段时间很轻松愉快的过去了，虽然对于我那可怜的高中同学并非如此……要陪着一个黑胖宅度过一下午，我自己想想都怕……玩笑，五年没见了，见面真的挺高兴的。当然了，见面前叫的那杯奇奇怪怪的果汁让我很不愉悦！跟番茄汁似的！整个下午感觉过的都很安闲，感觉有点奇怪，周围其实是很吵闹的，但是心是平静的。</p>
<p>下午也聊了一些话题，想拿出来写一下的大概是那句：</p>
<blockquote>
<p>……<br>而且我爸爸说就算我不工作他也养得活我。</p>
</blockquote>
<p>经过同学提醒说这样有点“啃老”的意思……我单独抽出来这句话的确容易造成误解，我本意并非如此。我的表达有所欠缺，所以用个在知乎上看到的东西来解释一下。南海问题发生后，有人问为什么这么多人无动于衷，很多人的回答都差不多是这个意思：中国发展强大不正是为了就算出了一些问题，内部也能歌舞升平吗？</p>
<p>我想表达的也是这个意思，而且我那同学现在也在努力的工作。</p>
<p>对于体现人与人之间闪光点的东西，我总是不吝于欣赏。而我，希望以后我能做一个她爸那样的人，能对我的父母说，你们吃吃玩玩就行，不干活我来养活你们。当然了，现在情况肯定是我爸对我说这句话，无以为报，唯有努力。</p>
<p>本来想写篇出去的感想的，结果变成这种了……看来真的太久没写文了，都不知道跑偏到哪里去了。不过感觉像我这种不太善于交流的人一个人出去也没啥好玩的，所以最后还是感谢一下同学！</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Studio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello world!\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://xiasuhuei321.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://xiasuhuei321.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>MVP初尝试</title>
    <link href="https://xiasuhuei321.github.io/2016/08/19/MVP%E5%88%9D%E5%B0%9D%E8%AF%95/"/>
    <id>https://xiasuhuei321.github.io/2016/08/19/MVP初尝试/</id>
    <published>2016-08-19T01:25:10.000Z</published>
    <updated>2016-10-16T07:58:11.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>又到了周末了，本来这周准备总结一下透明状态栏之类的东西……但是突然群里就吹起了MVP的牛，这让我这个MVC都只有小半桶水的人都不敢说话。但是程序员不会吹牛跟条咸鱼又有什么区别？<br><img src="http://of4pq0ldx.bkt.clouddn.com/MVP1.jpg" alt=""><br>所以我毅然决然的打开了搜索引擎，利用我科学上网的本领搜集了一些MVP相关的文章，不过看完也没啥感觉是真的，果然对于coder来说talk is cheap果断撸code才是正道。好了，日常吹牛、唠嗑(1/1)。<br><a id="more"></a></p>
<h2 id="MVC与MVP"><a href="#MVC与MVP" class="headerlink" title="MVC与MVP"></a>MVC与MVP</h2><p>对于Android开发者来说，MVC应该是比较熟悉的。首先我自制一副极简风格的MVC图来做说明。</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/MVP2.png" alt="Paste_Image.png"></p>
<p>MVC是一种软件设计典范，用一种业务逻辑、数据、界面分离的方法组织代码。但是在Android中用MVC有一点明显的不足：View层与Controller层难以明确的划分出去。因为在Android中各种布局文件是View层没错，但是各个Activity和Fragment呢？这些东西既像View又像Controller，但我们一般会将其划分为Controller层，对于View层的更新一般都会放在对应的Activity或者Fragment(或者其他)中，而我们所需要做的仅仅是抽取出一个Model来实现MVC。</p>
<p>可以，这很Android。</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/MVP3.gif" alt=""></p>
<p>MVC在Android中看上去不是很标准，那么MVP的出现之后与MVC一对比，相信各个Android开发者都会觉得：</p>
<p>这玩意还不错诶~靠谱！<br><img src="http://of4pq0ldx.bkt.clouddn.com/MVP4.png" alt="算了不自己画了……"></p>
<p>从图中可以很明显的看出View层不再和Model层互知，View层和Model层通过Presenter层交互。在这了借用hongyang大神的那句话：之所以MVP会让人感觉耳目一新，是因为这次的跳跃是从并不标准的MVC到MVP的一个转变，减少了Activity的职责，简化了Activity中的代码，将复杂的逻辑代码提取到了Presenter中进行处理。与之对应的好处就是，耦合度更低，更方便的进行测试。</p>
<h2 id="MVP小DEMO-演练"><a href="#MVP小DEMO-演练" class="headerlink" title="MVP小DEMO 演练"></a>MVP小DEMO 演练</h2><p>这个小demo花了我不少时间去想通，让我错过了林丹与杨宗纬的大战！郁闷！</p>
<p>国际惯例先上目录：</p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/MVP5.png" alt="目录.png"></p>
<p>我的demo是图片加载的小demo，adapter里的适配器是recyclerview的适配器，ImageBean是图片数据，里面包含了一个Url和一个图片相关的描述。utils里是以前自己以前封装的解析这个接口的工具，Urls里保存的是接口。先把非重点在前面讲了，后面开始介绍一下我写的mvp。</p>
<h3 id="Model与View层"><a href="#Model与View层" class="headerlink" title="Model与View层"></a>Model与View层</h3><p>我上来是先写Model层与View层的，因为这俩货在MVP里是解耦的，不能互相感知，所以我可以在设计者两层的时候只考虑需求与实现，不考虑在Presenter里干的事。</p>
<p>首先是Model层：<br>我要加载图片，我这加载图片用的是Glide，如果你不了解这个强大的开源库，你可以先去百度一下。所以需要我在Model中做的事情就是获取图片信息的集合。首先定义一个Model层的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageModel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LoadImageList</span><span class="params">(ImageModelImp.OnLoadImageListListener listener,<span class="keyword">int</span> pageIndex)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>图片比较多，采用分页加载，至于这个listener是一个获取数据成功和失败的回调，可以在回调中进行相应的操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageModelImp</span> <span class="keyword">implements</span> <span class="title">ImageModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadImageList</span><span class="params">(<span class="keyword">final</span> OnLoadImageListListener listener,<span class="keyword">int</span> pageIndex)</span> </span>&#123;</div><div class="line">        OkHttpUtils.get().url(Urls.IMAGE_URL+pageIndex).build().execute(<span class="keyword">new</span> StringCallback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Call call, Exception e, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">                listener.onFailure(e);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">                List&lt;ImageBean&gt; imageBeen = JsonUtils.readJsonImageBean(response);</div><div class="line">                listener.onSuccess(imageBeen);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnLoadImageListListener</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;ImageBean&gt; list)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取数据的代码量不是非常的多，因为我用的都是封装的工具进行请求和解析json。这个Model层的类实现了我刚刚定义的接口，执行具体的逻辑。</p>
<p>以上是Model层的代码，接下来分析一下View层需要什么东西。我这个demo只是加载图片而已，我所采用的是recyclerview，那么我需要的仅仅是一个集合，然后将这个集合传入adapter中，剩下的事情adapter都会帮我处理好的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageLoadView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getImageList</span><span class="params">(List&lt;ImageBean&gt; list)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>让MainActivity实现这个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ImageLoadView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView image_list;</div><div class="line">    <span class="keyword">private</span> ImagePresenter imagePresenter;</div><div class="line">    <span class="keyword">private</span> List&lt;ImageBean&gt; imageList = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> ImageListAdapter adapter;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageIndex = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> GridLayoutManager staggeredGridLayoutManager;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initView();</div><div class="line">        adapter = <span class="keyword">new</span> ImageListAdapter(<span class="keyword">this</span>);  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getImageList</span><span class="params">(List&lt;ImageBean&gt; list)</span> </span>&#123;</div><div class="line">        adapter.setisShow(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">if</span> (imageList == <span class="keyword">null</span>) &#123;</div><div class="line">            imageList = <span class="keyword">new</span> ArrayList&lt;ImageBean&gt;();</div><div class="line">        &#125;</div><div class="line">        imageList.addAll(list);</div><div class="line">        <span class="keyword">if</span> (pageIndex == <span class="number">1</span>) &#123;</div><div class="line">            adapter.setData(list);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//如果没有更多数据则隐藏脚布局</span></div><div class="line">                adapter.setisShow(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//setData方法中含有刷新，无需刷新了。</span></div><div class="line">        adapter.setData(imageList);</div><div class="line">        pageIndex += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>中间还有很多代码，我这里只是抽取出来一部分代码。可以看出在我这个demo里V层和M层的定义简直不废吹灰之力，但是……<br><img src="http://of4pq0ldx.bkt.clouddn.com/MVP6.jpg" alt="并没有什么卵用"></p>
<h3 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h3><p>Presenter层的逻辑着实让我烧了一会脑子，有些东西就是这样，想通了就很简单，想不通就会很痛苦。如何让M层与V层交互？首先我们需要明确的一点是：获取数据的逻辑在Model层那个实现类里面</p>
<p>你可能说这不废话吗……的确是废话，既然在那个实现类里，那我们肯定需要一个这个类的实例对象，不然怎么去执行那段代码？加载图片需要我们在presenter里做的事情也非常的少，只有获取图片集合这一件事可干而已。所以定义如下接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImagePresenter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadList</span><span class="params">(<span class="keyword">int</span> pageIndex)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来看一下Presenter层的实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImagePresenterImp</span> <span class="keyword">implements</span> <span class="title">ImagePresenter</span>,<span class="title">ImageModelImp</span>.<span class="title">OnLoadImageListListener</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ImageLoadView imageLoadView;</div><div class="line">    <span class="keyword">private</span> ImageModel imageModel;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImagePresenterImp</span><span class="params">(ImageLoadView imageLoadView)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.imageModel = <span class="keyword">new</span> ImageModelImp();</div><div class="line">        <span class="keyword">this</span>.imageLoadView = imageLoadView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;ImageBean&gt; list)</span> </span>&#123;</div><div class="line">        imageLoadView.getImageList(list);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">        <span class="comment">//我这里就不做处理了</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadList</span><span class="params">(<span class="keyword">int</span> pageIndex)</span> </span>&#123;</div><div class="line">        imageModel.LoadImageList(<span class="keyword">this</span>,pageIndex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到在这个实现类里，持有了一个M层实现类的对象，持有了一个V层的接口。这个类实现了P层接口和M层请求失败成功的接口。可以看到在loadList()方法中用了M层对象去执行具体的获取数据的代码，而在请求成功的回调方法中用持有的V层接口对象将此list传出。所以在MainActivity实现了V层接口后就可以获取list数据了。</p>
<p>说了那么多你可能会有点被绕糊涂了，很简单，用我极简的作图风格来帮你理解，当然了，如果你对于回调还不十分了解的话建议去看我的这篇文章<a href="http://www.jianshu.com/p/7ac60e182449" target="_blank" rel="external">Android之回调函数</a></p>
<p><img src="http://of4pq0ldx.bkt.clouddn.com/MVP7.png" alt="最终图"></p>
<p>可能看了以上的图你也不是很明白，没关系，网上资料很多，同时别忘了自己动手！<br>对了，放个最终跑起来的样子吧……<br><img src="http://of4pq0ldx.bkt.clouddn.com/MVP8.gif" alt="效果图"></p>
<p>对了项目名字写错了，写了MVC……你们懂就好……</p>
<p>最后挂上demo获取方式</p>
<blockquote>
<p>github:<a href="https://github.com/ForgetAll/StudyForMVC" target="_blank" rel="external">https://github.com/ForgetAll/StudyForMVC</a></p>
</blockquote>
<hr>
<p>↑以上是更新的分割线，更新时间：16.8.29</p>
<p>说实话刚写完这个代码我就感觉有点不对劲，但是没深入考虑。后来实在是有点担心会发生内存泄露，毕竟我实现的这种MVP模式P层是需要持有一个V层接口引用的，而实现V层接口的是Activity，这样要是发生了内存泄露可不是小事，所以还需要我们将MVP和Activity的生命周期关联起来。</p>
<p>首先简单分析一下这种内存泄露可能发生的场景：Presenter经常性的通过Model执行一些耗时的代码，而Presenter持有Activity的引用，如果在耗时操作完成之前Activity就被销毁了，那么因为Presenter持有Activity强引用而导致Activity对象无法被回收，此时就发生了内存泄露。</p>
<p>对于这种可能发生的内存泄露，最简单粗暴的方式莫过于让Presenter和Activity一起挂掉。关于MVP更多的事情会在以后更新，敬请期待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;又到了周末了，本来这周准备总结一下透明状态栏之类的东西……但是突然群里就吹起了MVP的牛，这让我这个MVC都只有小半桶水的人都不敢说话。但是程序员不会吹牛跟条咸鱼又有什么区别？&lt;br&gt;&lt;img src=&quot;http://of4pq0ldx.bkt.clouddn.com/MVP1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;所以我毅然决然的打开了搜索引擎，利用我科学上网的本领搜集了一些MVP相关的文章，不过看完也没啥感觉是真的，果然对于coder来说talk is cheap果断撸code才是正道。好了，日常吹牛、唠嗑(1/1)。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="设计模式" scheme="https://xiasuhuei321.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义View你需要了解的一些东西</title>
    <link href="https://xiasuhuei321.github.io/2016/08/13/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF/"/>
    <id>https://xiasuhuei321.github.io/2016/08/13/Android自定义View你需要了解的一些东西/</id>
    <published>2016-08-13T07:53:54.000Z</published>
    <updated>2016-09-03T05:41:45.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>终于周末了，当我想要松懈一会去浪的时候，脑海中突然闪过了这个东西……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-6d1bda58afc75f85.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="学习.jpg"><br>一图胜千言，日常唠嗑（1/1）。</p>
<h3 id="1-进入正题"><a href="#1-进入正题" class="headerlink" title="1 进入正题"></a>1 进入正题</h3><p>Android中自定义控件一直是一个比较难但又不得不面对的东西，虽然<strong>github+google</strong>能解决你的大部分需求，但是说实话，当一些bug发生在第三方控件上时，你仍然需要花费大量的时间去搞定。所以先了解一些和自定义相关的东西绝对是不亏的，话不多说，进入正题。</p>
<p>Android中自定义控件一般分以下三种：</p>
<ul>
<li>继承已有控件实现，可以理解为对原有控件功能的加强</li>
<li>组合控件，将多个控件结合在一起实现一些功能</li>
<li>完全自定义控件，一般继承于View或者ViewGroup</li>
</ul>
<p>这三类控件在实现方式上有什么异同呢？一般来说第一种控件是对于原有控件功能的增强，比如给ListView增加下拉刷新，上拉加载更多的功能，我们不需要考虑ListView中每个item如何测量如何绘制，我们需要考虑的是如何实现需要增添的功能。第二种组合几种控件，比如轮播图的实现，你可以组合Viewpager+ImageView，这东西说实话也就是功能的实现，但是如果你没有封装好则会让你的代码显得杂乱无章。第三种则是比较难以上手的，因为他需要你了解一些View相关的知识。</p>
<p>View相关的东西很多，多到可以另开一篇文章写了，所以我尽量摘取重点，咳咳，大伙注意听了啊，小本本都可以拿出来了啊，xiasuhuei老师开始划重点了啊。<br><a id="more"></a></p>
<h3 id="2-xiasuhuei321的重点"><a href="#2-xiasuhuei321的重点" class="headerlink" title="2 xiasuhuei321的重点"></a>2 xiasuhuei321的重点</h3><p>一个展示在屏幕上的View需要经历measure(测量)，layout(布局)，和draw(绘制)三个过程，其中measure确定View的宽高，layout确定View的最终宽高和四个顶点的位置，而draw则将View绘制到屏幕上。</p>
<p>为了更好的了解这个过程，我们首先需要了解的一个东西就是<strong>MeasureSpec</strong>：<br>MeasureSpec是一个32位的int值，高2位代表SpecMode，低30位代表SpecSize。SpecMode代表测量模式，SpecSize代表的是在前一种测量模式下的测量值。</p>
<p>了解了MeasureSpec后，我们需要了解<strong>SpecMode</strong>：<br>SpecMode有三种，表示三种测量模式：</p>
<p>1)UNSPECIFIED：<br>要多大给多大，父容器不对View有任何限制，这种情况一般不需要我们考虑。</p>
<p>2)EXACTLY<br>从字面上就能看出来，精确模式，包含了你声明控件宽高的数值和match_parent这两种情况。</p>
<p>3)AT_MOST<br>对应于wrap_content，这里需要注意，AT_MOST是父容器制定了一个SpecSize，View的大小不能大于这个值。如果你继承于View的代码没有处理wrap_content的话，那么wrap_content和match_parent的效果是一样的。</p>
<p>以上大概讲了一点View相关的知识，View相关的东西远远不及这些，有兴趣可以查阅其他的资料或者阅读源码了解，我这里便不再赘述了。</p>
<h3 id="3-自定义控件小案例——验证码"><a href="#3-自定义控件小案例——验证码" class="headerlink" title="3 自定义控件小案例——验证码"></a>3 自定义控件小案例——验证码</h3><p>最近在看<a href="http://blog.csdn.net/lmj623565791/article/details/24252901" target="_blank" rel="external">hongyang</a>大神的博客，刚好翻到了这个小案例，让我通过这个小案例一步一步的为你解析完全自定义控件(继承于View)的神秘面纱。</p>
<p>在上手做之前先分析一下这个验证码需要我们实现的功能：<br>1.生成随机数字或者字符串<br>2.点击要能够更换字符串</p>
<p>一个自定View要能做到以下几点：<br>1)自定义View的属性，要能在xml文件里直接用，方便使用<br>2)重写omMeasure<br>3)重写onDraw<br>第二步并不是必须的，但如果你的东西需要能处理wrap_content的话，那你还是乖乖的重写onMeasure去处理吧。</p>
<p>让我们跟着以上的步骤过一遍：</p>
<h4 id="3-1-自定义View属性"><a href="#3-1-自定义View属性" class="headerlink" title="3.1 自定义View属性"></a>3.1 自定义View属性</h4><p>在res/values下新建一个attrs.xml文件，在里面定义我们的属性和声明。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleText"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CustomTitleView"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleText"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextColor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextSize"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果你用的是eclipse的话，需要你在xml文件里添加</p>
<blockquote>
<p>xmlns:custom=”<a href="http://schemas.android.com/apk/res/+包名" target="_blank" rel="external">http://schemas.android.com/apk/res/+包名</a></p>
</blockquote>
<p>而如果你是Android Studio的话则添加以下：</p>
<blockquote>
<p>xmlns:custom=”<a href="http://schemas.android.com/apk/res-auto" target="_blank" rel="external">http://schemas.android.com/apk/res-auto</a>“</p>
</blockquote>
<p>自定义属性有以下几种值:</p>
<ul>
<li>color：颜色值</li>
<li>boolean：布尔值</li>
<li>dimesion：尺寸值</li>
<li>float：浮点值</li>
<li>integer：整型值</li>
<li>string：字符串</li>
<li>fraction：百分数</li>
<li>enum：枚举值</li>
<li>reference：引用</li>
</ul>
<p>以上仅仅是说明一下，如果以后有用到碰到不明白的可以google或者百度。</p>
<p>这样就能够在xml文件里使用我们自定义的属性了，之后我们在代码中定义相应的字段：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 文本</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> String mTitleText;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 文本的颜色</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mTitleTextColor;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 文本的大小</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mTitleTextSize;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制时控制文本绘制的范围</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Rect mBound;    </div><div class="line"><span class="keyword">private</span> Paint mPaint;</div></pre></td></tr></table></figure></p>
<p>接下来需要我们做的便是获取这些属性，并且在代码中作出相应的处理。</p>
<p>在代码中获取属性值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomTitleView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取我们所定义的自定义样式属性</div><div class="line">     */</div><div class="line">    TypedArray a = context.getTheme()</div><div class="line">            .obtainStyledAttributes(attrs, R.styleable.CustomTitleView, defStyleAttr, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n = a.getIndexCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> attr = a.getIndex(i);</div><div class="line">        <span class="keyword">switch</span> (attr) &#123;</div><div class="line">            <span class="keyword">case</span> R.styleable.CustomTitleView_titleText:</div><div class="line">                mTitleText = a.getString(attr);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> R.styleable.CustomTitleView_titleTextColor:</div><div class="line">                <span class="comment">//默认颜色为黑色</span></div><div class="line">                mTitleTextColor = a.getColor(attr, Color.BLACK);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> R.styleable.CustomTitleView_titleTextSize:</div><div class="line">                <span class="comment">//默认设置为16sp,TypeValue也可以把sp转化为px</span></div><div class="line">                mTitleTextSize = a.getDimensionPixelSize(attr, (<span class="keyword">int</span>) TypedValue.applyDimension(</div><div class="line">                        </div><div class="line">                TypedValue.COMPLEX_UNIT_SP, <span class="number">16</span>, getResources().getDisplayMetrics()));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    a.recycle();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取绘制文本的宽和高</div><div class="line">     */</div><div class="line">    mPaint = <span class="keyword">new</span> Paint();</div><div class="line">    mPaint.setTextSize(mTitleTextSize);</div><div class="line">    mBound = <span class="keyword">new</span> Rect();</div><div class="line">    mPaint.getTextBounds(mTitleText, <span class="number">0</span>, mTitleText.length(), mBound);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="comment">//获取随机字符串</span></div><div class="line">            mTitleText = randomText();</div><div class="line">            postInvalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">    a.recycle();</div></pre></td></tr></table></figure></p>
<p>前面我说如果继承于View的控件在代码中不对wrap_content作出处理，那么这个控件的wrap_content和match_parent的效果将会是一样的，那么就让我们试一试。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       Log.i(TAG,<span class="string">"onDraw"</span>);</div><div class="line">       mPaint.setColor(Color.YELLOW);</div><div class="line">       canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, getMeasuredWidth(), getMeasuredHeight(), mPaint);</div><div class="line"></div><div class="line">       mPaint.setColor(mTitleTextColor);</div><div class="line">       canvas.drawText(mTitleText, getWidth() / <span class="number">2f</span> - mBound.width() / <span class="number">2f</span>, getHeight() / <span class="number">2f</span> + mBound.height() / <span class="number">2f</span>, mPaint);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>以上的onMeasure()方法直接继承于View，没有做任何的修改，在xml文件中声明如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.example.luo_pc.view.CustomView.CustomTitleView</span></span></div><div class="line">    <span class="attr">custom:titleText</span>=<span class="string">"1234"</span></div><div class="line">    <span class="attr">custom:titleTextColor</span>=<span class="string">"#ff0000"</span></div><div class="line">    <span class="attr">custom:titleTextSize</span>=<span class="string">"40sp"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>看好咯，我声明的是wrap_content对吧？让我们来看下运行的结果<br><img src="http://upload-images.jianshu.io/upload_images/1976147-569099babe8947c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="全屏.png"></p>
<p>黄色并非我设置的背景，而是想要包裹验证码的背景。正如我所说的，如果不处理的话，就是这种效果，很明显这不是我们想要的，那么该如何处理呢？</p>
<p>View的measure()方法是final的，所以这个方法是无法被重写的，但是View提供了onMeasure()方法让我们来处理这些事。onMeasure()方法中带了两个int类型的参数</p>
<blockquote>
<p>onMeasure(int widthMeasureSpec, int heightMeasureSpec)</p>
</blockquote>
<p>看着这两个东西有没有回想起什么，前面我们了解过MeasureSpec。而这两个正是系统测量出的View的宽和高的MeasureSpec，所以我们便可以在onMeasure()中处理wrap_content的问题。</p>
<p>首先处理宽度：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line"></div><div class="line">Log.i(TAG,<span class="string">"onMeasure"</span>);</div><div class="line"><span class="comment">//设置宽度</span></div><div class="line"><span class="keyword">int</span> specMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line"><span class="keyword">int</span> specSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (specMode) &#123;</div><div class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:   <span class="comment">//精准模式，包含指定大小和match_parent</span></div><div class="line">        width = getPaddingLeft() + getPaddingRight() + specSize;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:   <span class="comment">//一般为wrap_content</span></div><div class="line">        width = getPaddingLeft() + getPaddingRight() + mBound.width();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前面说了MeasureSpec是SpecMode和SpecSize的打包，我们首先要做的就是拆包。然后根据specMode来确定宽度。如果是EXACTLY自不必多说，直接左右padding加上指定的宽度(或match_parent宽度)就是我们所需的width。而如果是AT_MOST，在本案例中则是我们绘制的矩形背景的宽度。在处理高度的时候也是同样的道理。最终完整onMeasure()代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</div><div class="line">    Log.i(TAG,<span class="string">"onMeasure"</span>);</div><div class="line">    <span class="comment">//设置宽度</span></div><div class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:   <span class="comment">//精准模式，包含指定大小和match_parent</span></div><div class="line">            width = getPaddingLeft() + getPaddingRight() + specSize;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:   <span class="comment">//一般为wrap_content</span></div><div class="line">            width = getPaddingLeft() + getPaddingRight() + mBound.width();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置高度</span></div><div class="line">    specMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">    specSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">            height = getPaddingTop() + getPaddingBottom() + specSize;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">            height = getPaddingTop() + getPaddingBottom() + mBound.height();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    setMeasuredDimension(width, height);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后记得setMeasuredDimension(width, height);<br>如果不调用这个方法来存储width和height将会在View测量的过程中引发异常。其他的代码并没有变化，再跑一遍看看咋样了。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-f412effdda7368ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功处理"></p>
<p>恩，包住了，点击也能换数字了，不过如果是验证码的话，还需要一个获取验证码内容的方法，这个不难，直接在生成的时候设置一个就成了。还有一个是背景色，现在是写死的，如果我想换个颜色呢，我自己可以改源码，但是要给别人用的话可不能让人这么用。不过实现起来都很简单，直接上代码。</p>
<p>获取文字内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  *生成随机数字字符串</div><div class="line">  **/</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">randomText</span><span class="params">()</span> </span>&#123;</div><div class="line">    Random random = <span class="keyword">new</span> Random();</div><div class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">    <span class="keyword">while</span> (set.size() &lt; <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">int</span> randomInt = random.nextInt(<span class="number">10</span>);</div><div class="line">        set.add(randomInt);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (Integer i : set) &#123;</div><div class="line">        sb.append(<span class="string">""</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//赋值</span></div><div class="line">    text = sb.toString();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String text;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> text;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>设置背景色，在attr的xml文件里加上两句:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleBackGroudColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!--在&lt;declare-styleable name="CustomTitleView"&gt;中加入--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleBackGroudColor"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>在自定义View中加入获取此属性的case：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> R.styleable.CustomTitleView_titleBackGroudColor:  </div><div class="line">          mTitleBackColor = a.getColor(attr,Color.YELLOW);</div></pre></td></tr></table></figure></p>
<p>在绘制时加入获取到的颜色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setColor(mTitleBackColor);</div></pre></td></tr></table></figure></p>
<p>上面获取text的效果就不查看了，看代码就够一目了然了，下面我们将背景设置为灰色查看一下效果：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.example.luo_pc.view.CustomView.CustomTitleView</span></span></div><div class="line">        <span class="attr">custom:titleText</span>=<span class="string">"1234"</span></div><div class="line">        <span class="attr">custom:titleTextColor</span>=<span class="string">"#ff0000"</span></div><div class="line">        <span class="attr">custom:titleTextSize</span>=<span class="string">"40sp"</span></div><div class="line">        <span class="attr">custom:titleBackGroudColor</span>=<span class="string">"#bcbcbc"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-3391d5f9651f95f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="灰色.png"></p>
<p>再次重申一下，以上这个小案例是从<a href="http://blog.csdn.net/lmj623565791/article/details/24252901" target="_blank" rel="external">hongyang</a>大神那看到的，各位如果想要深入学习自定义View，hongyang大神那的系列文章绝对是极好的。</p>
<p>参考资料：</p>
<blockquote>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/24252901" target="_blank" rel="external">Android 自定义View (一)——by hongyang</a><br>《开发艺术探索》</p>
</blockquote>
<p>源码地址：<br><a href="http://download.csdn.net/detail/lmj623565791/7227061" target="_blank" rel="external">hongyang的源码</a><br><a href="https://github.com/ForgetAll/View" target="_blank" rel="external">我整理的Android Studio版源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;终于周末了，当我想要松懈一会去浪的时候，脑海中突然闪过了这个东西……&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1976147-6d1bda58afc75f85.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;学习.jpg&quot;&gt;&lt;br&gt;一图胜千言，日常唠嗑（1/1）。&lt;/p&gt;
&lt;h3 id=&quot;1-进入正题&quot;&gt;&lt;a href=&quot;#1-进入正题&quot; class=&quot;headerlink&quot; title=&quot;1 进入正题&quot;&gt;&lt;/a&gt;1 进入正题&lt;/h3&gt;&lt;p&gt;Android中自定义控件一直是一个比较难但又不得不面对的东西，虽然&lt;strong&gt;github+google&lt;/strong&gt;能解决你的大部分需求，但是说实话，当一些bug发生在第三方控件上时，你仍然需要花费大量的时间去搞定。所以先了解一些和自定义相关的东西绝对是不亏的，话不多说，进入正题。&lt;/p&gt;
&lt;p&gt;Android中自定义控件一般分以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承已有控件实现，可以理解为对原有控件功能的加强&lt;/li&gt;
&lt;li&gt;组合控件，将多个控件结合在一起实现一些功能&lt;/li&gt;
&lt;li&gt;完全自定义控件，一般继承于View或者ViewGroup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三类控件在实现方式上有什么异同呢？一般来说第一种控件是对于原有控件功能的增强，比如给ListView增加下拉刷新，上拉加载更多的功能，我们不需要考虑ListView中每个item如何测量如何绘制，我们需要考虑的是如何实现需要增添的功能。第二种组合几种控件，比如轮播图的实现，你可以组合Viewpager+ImageView，这东西说实话也就是功能的实现，但是如果你没有封装好则会让你的代码显得杂乱无章。第三种则是比较难以上手的，因为他需要你了解一些View相关的知识。&lt;/p&gt;
&lt;p&gt;View相关的东西很多，多到可以另开一篇文章写了，所以我尽量摘取重点，咳咳，大伙注意听了啊，小本本都可以拿出来了啊，xiasuhuei老师开始划重点了啊。&lt;br&gt;
    
    </summary>
    
      <category term="Android自定义View" scheme="https://xiasuhuei321.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="进阶" scheme="https://xiasuhuei321.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="自定义View基础" scheme="https://xiasuhuei321.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Okhttp3-addHeader小坑记</title>
    <link href="https://xiasuhuei321.github.io/2016/08/09/Okhttp3-addHeader%E5%B0%8F%E5%9D%91%E8%AE%B0/"/>
    <id>https://xiasuhuei321.github.io/2016/08/09/Okhttp3-addHeader小坑记/</id>
    <published>2016-08-09T08:10:39.000Z</published>
    <updated>2016-09-03T02:30:47.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近感觉自己看了不少东西，不过在上班所以并没有很多的时间来写东西。我有一些半成品不过都不想发出来，毕竟缺少一点自己的东西在里面。好了日常唠嗑(1/1)。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前面也说了最近在上班，接触到的项目里用的都是被抛弃的httpclient，打算换个请求。所以最近着手看需要重构一些相关的东西，重构之前首先选定要拿什么做。经过慎重的思考之后决定:项目尽量采用MVC的模式做，网络请求用okhttp(用hongyang封装的okhttp-utils)，图片的处理和加载想采用glide，但是目前来看还有一些问题。好了背景介绍到这，下面说坑。<br><a id="more"></a></p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>既然采用Okhttp来重写网络请求，我当然得挑几个出来跑一下试试。这一试问题就出来了，见下图:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-bb687ddc655e7f83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error.png"></p>
<p>415介质错误，等等，难道我请求写的有问题？好吧，真有可能，可能因为自己平时就粗心大意的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">      OkHttpUtils.postString()</div><div class="line"><span class="comment">//                .mediaType(MediaType.parse("application/json; charset=utf-8"))</span></div><div class="line">                .content(jo.toString())</div><div class="line">                .addHeader(<span class="string">"tkn"</span>, <span class="string">"--"</span>)</div><div class="line">                .addHeader(<span class="string">"uid"</span>, <span class="string">"--"</span>)</div><div class="line">                .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</div><div class="line">                .url(<span class="string">" "</span>)</div><div class="line">                .build()</div><div class="line">                .execute(<span class="keyword">new</span> BitmapCallback() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Call call, Exception e, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                        tvTest.setText(<span class="string">"纳尼，竟然会错?"</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Bitmap response, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">                        ivImg.setImageBitmap(response);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>由于有保密的缘故，url我就不加上去了。tkn和uid是验证登录的东西，这个东西我肯定是写的没错的，我这个请求我仔细看了一遍也没发现哪出了问题。但错就在那啊！</p>
<p>可能有细心的看官已经发现了，我注释了一行。是的，那一行就是解决问题的方法。在http头里面声明”Content-Type”, “application/json”在okhttp里面是没什么卵用的，okhttp中需要在mediaType中声明介质类型。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最近由于工作先后接触了HttpUrlConnection、HttpClient、okhttp，感觉api有的差不多，有的差别很大，关键还是你对于http协议的理解。只要你对http有一定的了解，对于一个有良好设计的东西来说找到对应的api是很容易的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近感觉自己看了不少东西，不过在上班所以并没有很多的时间来写东西。我有一些半成品不过都不想发出来，毕竟缺少一点自己的东西在里面。好了日常唠嗑(1/1)。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;前面也说了最近在上班，接触到的项目里用的都是被抛弃的httpclient，打算换个请求。所以最近着手看需要重构一些相关的东西，重构之前首先选定要拿什么做。经过慎重的思考之后决定:项目尽量采用MVC的模式做，网络请求用okhttp(用hongyang封装的okhttp-utils)，图片的处理和加载想采用glide，但是目前来看还有一些问题。好了背景介绍到这，下面说坑。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="爬坑" scheme="https://xiasuhuei321.github.io/tags/%E7%88%AC%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>百度地图Key验证失败230错误</title>
    <link href="https://xiasuhuei321.github.io/2016/07/21/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEKey%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5230%E9%94%99%E8%AF%AF/"/>
    <id>https://xiasuhuei321.github.io/2016/07/21/百度地图Key验证失败230错误/</id>
    <published>2016-07-21T02:13:40.000Z</published>
    <updated>2016-09-03T02:29:28.812Z</updated>
    
    <content type="html"><![CDATA[<h4 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h4><p>最近有需求要用到地图，同学和我说高德地图社区都关了，他都换百度了……所以我果断……直接用百度地图吧。按照官方文档的步骤，一路下来都很简单。但是在使用官方示例demo的时候却碰到了如下的错误：</p>
<blockquote>
<p>baidumapsdk.demo E/baidumapsdk: Authentication Error errorcode: 230 uid: -1 appid -1 msg: APP Scode码校验失败<br><a id="more"></a><br>首先我可以确认我包名是没有错的，而且我还进了gradle里看了下，确认都是一致的。那么问题一定时候出在SHA1上的了，但是讲道理我用你的demo我又没打包发布，用的肯定是debug.keystore吧……</p>
</blockquote>
<p>诶？等等……难不成他指定了debug.keystore所以导致我获取到的SHA1并不对？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-d602a63ec701c8ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="debug.png"></p>
<p>我看了一眼……哎哟卧槽还真是，难怪一直验证失败。那接下来的事情就好办了，要么获取这个debug.keystore的SHA1，要么把这个keystore路径换掉。我直接获取了这个debug.keystore的SHA1并且和我电脑上默认的作了一下对比</p>
<blockquote>
<p>keytool -list -v -keystore debug.keystore</p>
</blockquote>
<p>好了走你~！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-18be5a30e0d51f8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="真不一样.png"></p>
<p>可以很明显的看出来，这俩是不一样的，所以验证失败是可以理解的……我的问题就这么解决了，值得注意的是发布版的签名证书又不一样了，到时候还得重新获取SHA1信息，重新获取AK。（当然百度其实是给了发布版和开发板两个SHA1让你填的，我手上并没有打包的东西，所以不怎么了解这一块）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;进入正题&quot;&gt;&lt;a href=&quot;#进入正题&quot; class=&quot;headerlink&quot; title=&quot;进入正题&quot;&gt;&lt;/a&gt;进入正题&lt;/h4&gt;&lt;p&gt;最近有需求要用到地图，同学和我说高德地图社区都关了，他都换百度了……所以我果断……直接用百度地图吧。按照官方文档的步骤，一路下来都很简单。但是在使用官方示例demo的时候却碰到了如下的错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;baidumapsdk.demo E/baidumapsdk: Authentication Error errorcode: 230 uid: -1 appid -1 msg: APP Scode码校验失败&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="爬坑" scheme="https://xiasuhuei321.github.io/tags/%E7%88%AC%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView以及OOM的一些处理</title>
    <link href="https://xiasuhuei321.github.io/2016/05/30/RecyclerView%E4%BB%A5%E5%8F%8AOOM%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%84%E7%90%86/"/>
    <id>https://xiasuhuei321.github.io/2016/05/30/RecyclerView以及OOM的一些处理/</id>
    <published>2016-05-30T14:55:31.000Z</published>
    <updated>2016-09-03T05:35:59.300Z</updated>
    
    <content type="html"><![CDATA[<p>今天关于是写ListView还是RecyclerView着实纠结了一会，毕竟这二者都很重要，不过最近做的东西里用的是RecyclerView，所以还是先写RecyclerView了，而且代码也撸好了。好了日常唠嗑（1/1），下面进入正题。</p>
<p>本文包含以下几个方面：</p>
<ul>
<li>使用RecyclerView实现ListView的效果</li>
<li>RecyclerView加载图片出现OOM时的一些处理</li>
<li>RecyclerView实现瀑布流</li>
<li>RecyclerView滑动卡顿的一些优化<a id="more"></a>
RecyclerView与ListView原理是类似的：都是仅仅维护少量的View并且可以展示大量的数据，不过RecyclerView相比ListView更加高级和灵活。RecyclerView本身只负责View的回收和复用，这从它名字本身也能看出一些端倪。既然RecyclerView只关心View的回收和复用，那么这玩意到底该怎么才能玩起来？</li>
</ul>
<p>好问题，虽然是我自己问的……借用一句别人说的：真正牛逼的人是不需要什么都管的，只要底下有人就行。LayoutManager负责Item布局和展示,Item之间的间隔由ItemDecoration来解决，Item的增加与删除的动画由ItemAnimator来解决，Adapter用来将数据与Item界面绑定。</p>
<p>好了作了基本的了解，开始上码吧，有关如何在Android Studio中使用RecyclerView和我的代码获取方法，将在文末作相应的说明。首先第一要实现的，就是和ListView类似的效果，先看效果图，原谅我不会做动图……</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-4349b482ad7d122c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-5619d16337071225.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果2"></p>
<p>好了，看完效果，开码，首先是主界面的xml文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    tools:context="com.example.luo_pc.testforrecyclerview.MainActivity"&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v7.widget.RecyclerView</div><div class="line">        android:id="@+id/rv_test"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"&gt;&lt;/android.support.v7.widget.RecyclerView&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>没啥玩意，就是一个线性布局里加一个RecyclerView，接下来与ListView一样，列表item的xml文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="wrap_content"</div><div class="line">    android:orientation="vertical"</div><div class="line">    android:background="#ffffff"</div><div class="line">    &gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id="@+id/iv_item_img"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        android:scaleType="centerCrop"</div><div class="line">        android:adjustViewBounds="true"</div><div class="line">        android:layout_gravity="center"</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id="@+id/tv_item_desc"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:gravity="center"</div><div class="line">        android:textColor="#000000"</div><div class="line">        /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>主界面代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; itemList;</div><div class="line">    <span class="keyword">private</span> RecyclerView rv_test;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        rv_test = (RecyclerView) findViewById(R.id.rv_test);</div><div class="line">        initData();</div><div class="line">        <span class="comment">//设置线性layoutManager</span></div><div class="line">        rv_test.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getApplicationContext()));</div><div class="line">        </div><div class="line">        mAdapter myAdapter = <span class="keyword">new</span> mAdapter();</div><div class="line">        <span class="comment">//设置myAdapter的数据</span></div><div class="line">        myAdapter.setData(itemList);</div><div class="line">        <span class="comment">//设置Adapter</span></div><div class="line">        rv_test.setAdapter(myAdapter);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>&#123;</div><div class="line">        itemList = <span class="keyword">new</span> ArrayList&lt;ItemBean&gt;();</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird, <span class="string">"南小鸟1"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.xiyangyang, <span class="string">"喜羊羊"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird3, <span class="string">"南小鸟2"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.blackcat, <span class="string">"黑猫"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.dog, <span class="string">"狗与剪刀"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.nike3, <span class="string">"妮可妮可"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.paojie, <span class="string">"炮姐"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber1, <span class="string">"吾王1"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber2, <span class="string">"吾王2"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的ItemBean代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemBean</span> </span>&#123;</div><div class="line">    <span class="comment">//R.drawable....</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> img;</div><div class="line">    <span class="keyword">private</span> String desc;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemBean</span><span class="params">(<span class="keyword">int</span> img,String desc)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.img = img;</div><div class="line">        <span class="keyword">this</span>.desc = desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImg</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> img;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImg</span><span class="params">(<span class="keyword">int</span> img)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.img = img;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.desc = desc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是重头戏了，Adapter的代码。我们需要创建一个类继承RecyclerView.Adapter，以此来创建RecyclerView的适配器，继承RecyclerView.Adapter需要实现 onCreateViewHolder()、onBindViewHolder()和getItemCount()方法，而onCreateView的返回值是RecyclerView.ViewHolder，所以我们需要创建一个RecyclerView.ViewHolder。而RecyclerView.ViewHolder是一个抽象类，所以我们必须新建一个类继承该类，该抽象类中的构造函数也必须实现。说了这么多，可能有点绕，让我们从代码中学习如何操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">mAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span></span>&#123;</div><div class="line">        <span class="comment">//数据</span></div><div class="line">        <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; itemList;</div><div class="line"><span class="comment">//        private ImageResizer imgResizer = new ImageResizer();</span></div><div class="line">        <span class="comment">//设置数据</span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ArrayList&lt;ItemBean&gt; itemList)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.itemList = itemList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">            <span class="comment">//得到item的view</span></div><div class="line">            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_item, parent, <span class="keyword">false</span>);</div><div class="line">            <span class="comment">//返回viewholder</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> mViewHolder(view);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//绑定数据</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            ItemBean it = itemList.get(position);</div><div class="line">            mViewHolder mholder = (mViewHolder)holder;</div><div class="line">            <span class="comment">//设置imageView的图片</span></div><div class="line">            mholder.iv_item_img.setImageResource(it.getImg());</div><div class="line"><span class="comment">//            mholder.iv_item_img.setImageBitmap(imgResizer.decodeSampledBitmapFromResource(getResources(),it.getImg()));</span></div><div class="line">            <span class="comment">//设置textView的文字</span></div><div class="line">            mholder.tv_item_desc.setText(it.getDesc());</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> itemList.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">mViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line">            ImageView iv_item_img;</div><div class="line">            TextView tv_item_desc;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="title">mViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>(itemView);</div><div class="line">                iv_item_img = (ImageView) itemView.findViewById(R.id.iv_item_img);</div><div class="line">                tv_item_desc = (TextView)itemView.findViewById(R.id.tv_item_desc);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我这有些地方写的不是很好，在写一个类继承RecyclerView.Holder时这么写会更好</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>&lt;<span class="title">mViewHolder</span>&gt;</span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>如此在onBindViewHolder方法中便可以直接使用holder了，而不必再强转。</p>
<p>好了代码也写完了，是时候跑一波了！我的图片都是在百度上找的，随便下了那么几张。跑的时候果然不负我望，OOM!</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-751246a0afc89dc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OOM"></p>
<p>诶？OOM？那么我之前放的效果图是怎么回事？没错……我压缩了一下图片，才跑出来开头放的效果图……关于该如何操作，容我细细道来。</p>
<p>我从网上下的图都是比较大的，大多为jpg格式，用个看图软件打开显示是1125*1674像素在windows系统上是436K大小。对于jpg我不太了解，只知道这换算成ARGB_8888每个像素占4byte，得7M了。而且</p>
<p>反正是OOM了，容我说一下我的处理方法：</p>
<p><strong>压缩</strong></p>
<p>图片有不同的形状与大小。在大多数情况下它们的实际大小都比需要呈现的尺寸大很多。考虑到在有限的内存下工作，理想情况是我们只需要在内存中加载一个低分辨率的图片即可。</p>
<p>BitmapFactory提供了一些解码的方法，用来从不同的资源中创建一个Bitmap。每一种解码方法都可以通过BitmapFactory.Options设置一些附加的标记，以此来指定解码选项。设置inJustDecodeBounds属性为true可以在解码的时候获取到图片的原始宽/高信息，并不会真正的去加载图片。</p>
<p>获取到图片的宽高意义何在呢？你可能会有这样的疑问，事实上只要指定Options的inSampleSize并在decode时传入Options，再将inJustDecodeBounds设置为false，就可以获得压缩后的Bitmap。而我们获取了原始图片的宽高，就可以根据我们所需要的宽高计算出压缩的比例。例如一个ARGB_8888的Bitmap分辨率为2048x1536直接加载所需的内存是12M，而指定inSampleSize为4，那么会得到一个512x384的Bitmap，所需的内存仅为0.75M。</p>
<p>上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeBitmapFromResource</span><span class="params">(Resources res,<span class="keyword">int</span> resId,<span class="keyword">int</span> reqWidth,<span class="keyword">int</span> reqHeight)</span></span>&#123;</div><div class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">        <span class="comment">//可以只获取宽高而不加载</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">        BitmapFactory.decodeResource(res,resId,options);</div><div class="line"></div><div class="line">        <span class="comment">//计算压缩比例</span></div><div class="line">        options.inSampleSize = calculateInSampleaSize(options,reqWidth,reqHeight);</div><div class="line"></div><div class="line">        <span class="comment">//解码</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(res,resId,options);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleaSize</span><span class="params">(BitmapFactory.Options options, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</div><div class="line">        <span class="comment">// 图片的高宽</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</div><div class="line">        <span class="comment">//默认不压缩</span></div><div class="line">        <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</div><div class="line">            <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt; reqHeight</div><div class="line">                    &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) &#123;</div><div class="line">                <span class="comment">//这里设置inSampleSize为2的幂是因为解码器最终还是会对非2的幂的数进行向下处理，</span></div><div class="line">                <span class="comment">// 获取到最靠近2的幂的数</span></div><div class="line">                inSampleSize *= <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> inSampleSize;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>当我们使用ImageView加载期望大小为100*100像素的图片时就可以按照如下格式写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mImageView.setImageBitmap(</div><div class="line">        decodeBitmapFromResource(getResources(),R.id.drawa,<span class="number">100</span>,<span class="number">100</span>));</div></pre></td></tr></table></figure>
<p>压缩的流程大概就到这了，继续回到RecyclerView，上面的代码实现了和ListView类似的效果，接下来要实现的是瀑布流的效果。说的高大上，其实大致流程与之前差不多，不过改一下LayoutManager就行了，直接上完整的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView rv_test;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; itemList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initData();</div><div class="line">        rv_test = (RecyclerView) findViewById(R.id.rv_test);</div><div class="line">        <span class="comment">//设置layoutManager</span></div><div class="line">        rv_test.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">2</span>, StaggeredGridLayoutManager.VERTICAL));</div><div class="line"></div><div class="line">        myAdapter mAdapter = <span class="keyword">new</span> myAdapter();</div><div class="line">        mAdapter.setItemList(itemList);</div><div class="line">        rv_test.setAdapter(mAdapter);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        itemList = <span class="keyword">new</span> ArrayList&lt;ItemBean&gt;();</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird, <span class="string">"南小鸟1"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.xiyangyang, <span class="string">"喜羊羊"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird3, <span class="string">"南小鸟2"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.blackcat, <span class="string">"黑猫"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.dog, <span class="string">"狗与剪刀"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.nike3, <span class="string">"妮可妮可"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.paojie, <span class="string">"炮姐"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber1, <span class="string">"吾王1"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber2, <span class="string">"吾王2"</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">myAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; ItemList;</div><div class="line">        ImageResizer imgResizer = <span class="keyword">new</span> ImageResizer();</div><div class="line">        BitmapMemoryCache lruBitmapCache = <span class="keyword">new</span> BitmapMemoryCache();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemList</span><span class="params">(ArrayList&lt;ItemBean&gt; ItemList)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.ItemList = ItemList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_item, parent, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> myViewHolder(view);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            myViewHolder mholder = (myViewHolder) holder;</div><div class="line">            ItemBean it = itemList.get(position);</div><div class="line">            <span class="keyword">if</span>(lruBitmapCache.getBitmapFromMemory(it.getDesc()) != <span class="keyword">null</span>)&#123;</div><div class="line">                mholder.iv_item_img.setImageBitmap(lruBitmapCache.getBitmapFromMemory(it.getDesc()));</div><div class="line"></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//缓存图片</span></div><div class="line">                lruBitmapCache.addBitmapToMemory(it.getDesc(),imgResizer.decodeSampledBitmapFromResource(getResources(),</div><div class="line">                        it.getImg()));</div><div class="line"></div><div class="line">                mholder.iv_item_img.setImageBitmap(imgResizer.decodeSampledBitmapFromResource(getResources(),</div><div class="line">                        it.getImg()));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mholder.tv_item_desc.setText(it.getDesc());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> ItemList.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">myViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">            ImageView iv_item_img;</div><div class="line">            TextView tv_item_desc;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="title">myViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>(itemView);</div><div class="line">                iv_item_img = (ImageView) itemView.findViewById(R.id.iv_item_img);</div><div class="line">                tv_item_desc = (TextView) itemView.findViewById(R.id.tv_item_desc);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-5618087689875ae9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="瀑布流"></p>
<p>其中有两个类是之前没有的，ImageResizer和BitmapMemoryCache，前者是用来压缩的，后者是用来缓存的。因为是瀑布流，所以我没有设置期望的宽高，直接设置inSampleSize为4，压缩之后图片还是大了，在滑动的时候列表有卡顿现象，所以做了LruCache。大致就是这样，代码如下：</p>
<p>ImageResizer</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageResizer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">        <span class="comment">//解析图片而不会真正的加载</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">        BitmapFactory.decodeResource(res, resId, options);</div><div class="line">        options.inSampleSize = <span class="number">4</span>;</div><div class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(res,resId,options);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>BitmapMemoryCache</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapMemoryCache</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">"BitmapMemoryCache"</span>;</div><div class="line">    <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>)(Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">    <span class="keyword">int</span> catchSize = maxMemory / <span class="number">8</span>;</div><div class="line">    LruCache&lt;String,Bitmap&gt; lruCache = <span class="keyword">new</span> LruCache&lt;String,Bitmap&gt;(catchSize)&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToMemory</span><span class="params">(String key,Bitmap bitmap)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(getBitmapFromMemory(key) == <span class="keyword">null</span>)&#123;</div><div class="line">            lruCache.put(key,bitmap);</div><div class="line">            Log.i(TAG,<span class="string">" "</span>+maxMemory);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromMemory</span><span class="params">(String key)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> lruCache.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>做了缓存之后，第一次滑动……说实话还是有点卡，但是之后的确没有卡顿的现象了。果然人不能作死，没事加载大图作死不好！这里因为我的图比较少，从打的log来看我手机为一个app分配的内存是128M，1/8的内存16M来做缓存够了。如果图片比较多，内存做缓存不够的话，可以考虑用DisLruCache，不过sdk里是没有的，需要去下。关于滑动的优化还没有说完，不过今天暂时不打算继续了，明天或者有空的时候继续回来填这个坑。还有本来想写个RecyclerView上拉刷新的例子，可惜扯着扯着扯歪了，给忘了……有空再来来补上。</p>
<p>以后有机会再写一篇关于缓存的文吧，这里就不多写了。</p>
<blockquote>
<p>最后本文源码可以在<a href="https://github.com/ForgetAll/TestForRecyclerView" target="_blank" rel="external">我的github</a>获取</p>
<blockquote>
<p>在Android Studio中使用RecyclerView请在build.gradle中添加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:recyclerview-v7:23.4.0'</span></div></pre></td></tr></table></figure></p>
</blockquote>
</blockquote>
<p>eclipse中请自行百度……</p>
<blockquote>
<p>资料来源：《Android开发艺术探索》<br>　　　　　　<a href="http://hukai.me/android-training-course-in-chinese/graphics/displaying-bitmaps/load-bitmap.html" target="_blank" rel="external">Google官方培训文档中文版</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天关于是写ListView还是RecyclerView着实纠结了一会，毕竟这二者都很重要，不过最近做的东西里用的是RecyclerView，所以还是先写RecyclerView了，而且代码也撸好了。好了日常唠嗑（1/1），下面进入正题。&lt;/p&gt;
&lt;p&gt;本文包含以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用RecyclerView实现ListView的效果&lt;/li&gt;
&lt;li&gt;RecyclerView加载图片出现OOM时的一些处理&lt;/li&gt;
&lt;li&gt;RecyclerView实现瀑布流&lt;/li&gt;
&lt;li&gt;RecyclerView滑动卡顿的一些优化
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="基础" scheme="https://xiasuhuei321.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android消息机制浅析</title>
    <link href="https://xiasuhuei321.github.io/2016/05/29/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/"/>
    <id>https://xiasuhuei321.github.io/2016/05/29/Android消息机制浅析/</id>
    <published>2016-05-29T15:23:37.000Z</published>
    <updated>2016-09-04T05:56:25.174Z</updated>
    
    <content type="html"><![CDATA[<p>　　写在前面：<br>　　如果你在看本文之前没有对Android消息机制作过了解，可能会比较吃力，关于源码，不需要全部看懂，能看懂其中关键的几句代码就行了。如果在阅读过程中感到吃力，请直接跳到结尾部分看概述。</p>
<p>　　最近在看《Android开发艺术探索》，感觉真的是一本好书，恩，让我非常有读完欲望的一本书。话不多说，分享一下我的读书收获。</p>
<p>　　Android中的耗时操作需要在子线程中完成，当这些操作完成后可能会需要对UI进行相应的更新。但是Android中的UI不是线程安全的，在多线程中并发访问可能会导致UI控件处于不可预期的状态。Google没有用上锁机制来解决这个问题，而是让开发者通过Handler切换线程来达到更新UI的目的。<strong>Handler</strong>是Android消息机制的上层接口，想要解析Android消息机制还需要了解<strong>Looper</strong>和<strong>消息队列(MessageQueue)</strong>。</p>
<p>　　在具体的了解Handler、Looper和MessageQueue之前，先让我们把我们平时切换线程的流程过一遍。首先我们在主线程中创建Handler，然后在子线程中通过handler的sendMessage方法将携带子线程操作结果的数据传出，通过handler的handleMessage方法进行UI的更新，代码如下：<br>    <a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">	<span class="comment">//注1</span></div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            tvContent.setText((String)msg.obj);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">private</span> TextView tvContent;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        tvContent = (TextView) findViewById(R.id.tv_content);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//...一些耗时操作</span></div><div class="line"></div><div class="line">                <span class="comment">//耗时操作的结果</span></div><div class="line">                String result = <span class="string">"我是结果"</span>;</div><div class="line"></div><div class="line">                Message msg = Message.obtain();</div><div class="line">                msg.obj = result;</div><div class="line">                handler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>   —————————–更新的分割线，16.9.4———————————<br>   注1：这篇算是挺久之前的文了吧，现在看来有一个比较致命的东西，private Handler handler;这个东西是一个内部类，在Java中内部类都会隐含的持有一个外部类的引用，一般来说这个外部类的引用就是Activity。如果因为Handler持有了Activity的引用而导致Activity无法被销毁，则会导致内存泄露，解决方法就是用static修饰，static修饰的内部类不会持有外部类的引用。</p>
<p>　　因为代码比较简单，就不上结果图了。接下来解析一下以上简单的代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        tvContent.setText((String)msg.obj);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>　　首先是构造一个Handler对象，用的是默认的构造方法，看一下源码是如何实例化的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　再追踪一下源码，发现最终是用的如下的构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">        <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">        <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                klass.getCanonicalName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　说实话大部分代码我也是看不懂的，但是mLooper = Looper.myLooper()和mQueue = mLooper.mQueue，可以看出Handler得到了一个Looper和一个“队列”。查看myLooper方法的注释</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Return the Looper object associated with the current thread.  Returns </div><div class="line">* null if the calling thread is not associated with a Looper.</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>　　返回的是当前线程的Looper，如果当前线程没有Looper就返回null。所以在Handler的构造方法中，会有</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">        <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　所以在没有Looper的线程中创建Handler对象会抛以上异常。我们可以为没有Looper的线程创建一个Looper不过这里先不谈。看完了如何创建Handler之后，继续我们的流程，在子线程中我们使用handler的sendMessage()方法发送了一个Message对象，让我们看看这背后隐藏了怎样的py交……，不，怎样的操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　通过追踪源码发现最终执行了如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    MessageQueue queue = mQueue;</div><div class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　最后一句代码是向queue中插入msg的意思，也就是说handler.sendMessage()这个方法所执行的操作就是向消息队列插入了一条message，那么这条消息又是经历了怎样的辗转才切换到了当前线程呢？显然这其中有Looper的参与,不过在了解Looper之前，需要先了解一下MessageQueue。</p>
<hr>
<h1 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h1><p>　　MessageQueue虽然叫消息队列，但实际上他是通过一个单链表的数据结构来维护消息列表。至于为什么采用单链表的数据结构，因为MessageQueue主要操作是插入和读取，而读取包含着删除操作，而单链表在插入和删除上比较有优势。关于MessageQueue还需要知道enqueueMessage()是插入操作，next()是读取并且删除的操作。需要了解的暂时就这么多了。</p>
<hr>
<h1 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h1><p>　　Looper会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。Looper最重要的方法便是loop()方法，让我们看一下loop()方法是怎样的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">        Printer logging = me.mLogging;</div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　如果MessageQueue的next方法返回了新的消息，Looper就会处理这条消息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg.target.dispatchMessage(msg);</div></pre></td></tr></table></figure>
<p>　　msg.target就是发送这条消息的Handler对象，这样Handler发送的消息最终又交给它的dispatchMessage方法来处理了。查看dispatchMessage方法源码会发现，我们之前使用的Handler的构造方法和得到Message对象的方法，最终会导致dispatchMessage方法调用handleMessage方法。</p>
<hr>
<h1 id="总结与拓展"><a href="#总结与拓展" class="headerlink" title="总结与拓展"></a>总结与拓展</h1><p>　　总的来说，我们平常使用Handler所经历的流程就是：<br>　　１.使用当前线程的Looper对象创建Handler。<br>　　２.handler.sendMessage()向Looper中的消息队列插入消息。<br>　　３.Looper通过loop方法获取消息队列的新消息，通过msg.target(发送消息的Handler)调用dispatchMessage方法处理消息。而该方法在loop方法中被调用，loop被当前线程Looper调用，所以该消息被切换到当前线程中执行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-51727507a12e18e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程.png"></p>
<p>　　在了解了Android的消息机制之后，我们可以尝试使用Handler和Looper实现两个子线程之间的消息传递。通过new Thread()创建的线程并没有Looper，为他创建一个Looper就可以使用Handler了。Looper可以通过prepare方法来创建，好了说明就到这，直接上代码！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.Looper;</div><div class="line"><span class="keyword">import</span> android.os.Message;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> Handler mhandler;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1();</div><div class="line">        thread1.setName(<span class="string">"Thread#1"</span>);</div><div class="line">        thread1.start();</div><div class="line"></div><div class="line">        mhandler = thread1.getHandler();</div><div class="line">        <span class="keyword">while</span>(mhandler == <span class="keyword">null</span>)&#123;</div><div class="line">            mhandler = thread1.getHandler();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                    Message msg = Message.obtain();</div><div class="line">                    msg.obj = System.currentTimeMillis();</div><div class="line">                    mhandler.sendMessage(msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"Thread#2"</span>).start();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> Handler mhandler;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> mhandler;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//为该线程创建Looper</span></div><div class="line">            Looper.prepare();</div><div class="line">            <span class="comment">//初始化handler</span></div><div class="line">            mhandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                    Log.i(TAG, Thread.currentThread().getName() + <span class="string">" the message is:"</span> + msg.obj);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            Looper.loop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-e2562d08f3400709.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果.png"></p>
<p>　　很明显,Thread#2成功地将消息传递到了Thread#1的handler中。其实关于Looper.prepare()也值得深究，涉及到了ThreadLocal，不过我这里就不管了。<br>　　<br>　　最后再安排一下今后一段时间内要做的事，从第一篇简书文章到这第二篇，中间隔了很久了。倒是没有偷懒，一直在敲代码，不过最近算是把一直想做的东西做了，是时候来一波学习总结了。</p>
<blockquote>
<p>资料来源：《Android开发艺术探索》</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　写在前面：&lt;br&gt;　　如果你在看本文之前没有对Android消息机制作过了解，可能会比较吃力，关于源码，不需要全部看懂，能看懂其中关键的几句代码就行了。如果在阅读过程中感到吃力，请直接跳到结尾部分看概述。&lt;/p&gt;
&lt;p&gt;　　最近在看《Android开发艺术探索》，感觉真的是一本好书，恩，让我非常有读完欲望的一本书。话不多说，分享一下我的读书收获。&lt;/p&gt;
&lt;p&gt;　　Android中的耗时操作需要在子线程中完成，当这些操作完成后可能会需要对UI进行相应的更新。但是Android中的UI不是线程安全的，在多线程中并发访问可能会导致UI控件处于不可预期的状态。Google没有用上锁机制来解决这个问题，而是让开发者通过Handler切换线程来达到更新UI的目的。&lt;strong&gt;Handler&lt;/strong&gt;是Android消息机制的上层接口，想要解析Android消息机制还需要了解&lt;strong&gt;Looper&lt;/strong&gt;和&lt;strong&gt;消息队列(MessageQueue)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　在具体的了解Handler、Looper和MessageQueue之前，先让我们把我们平时切换线程的流程过一遍。首先我们在主线程中创建Handler，然后在子线程中通过handler的sendMessage方法将携带子线程操作结果的数据传出，通过handler的handleMessage方法进行UI的更新，代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="基础" scheme="https://xiasuhuei321.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android之回调函数</title>
    <link href="https://xiasuhuei321.github.io/2016/05/12/Android%E4%B9%8B%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://xiasuhuei321.github.io/2016/05/12/Android之回调函数/</id>
    <published>2016-05-12T12:33:58.000Z</published>
    <updated>2016-09-03T05:49:07.964Z</updated>
    
    <content type="html"><![CDATA[<p>最近对Android中的回调产生了一些疑问，看了不少博文才算是明白了一点，接下来分享一下我的收获。</p>
<p><strong> 写在正文之前，大神可以跳过： </strong><br>　　1.接口不可以实例化，但可以创建一个接口对象。<br>　　2.你可能见过这样的语法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Button bt_add = (Button) findViewById(R.id.bt_add);</div><div class="line">bt_add.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　我们都知道OnClickListener()是一个接口，但是上文中  new OnClickListener()并非是实例化接口，而是表示一个匿名内部类实现该接口。<br><a id="more"></a></p>
<hr>
<h4 id="1-回调函数定义"><a href="#1-回调函数定义" class="headerlink" title="1.回调函数定义"></a>1.回调函数定义</h4><p>　　回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。<br>　　当然，看了这么正式的定义，其实对我来说并没有多大的帮助，毕竟对指针直接接触比较少，对于这个定义也没有多深的感受。还是直接看回调机制吧！</p>
<hr>
<h4 id="2-回调机制"><a href="#2-回调机制" class="headerlink" title="2.回调机制"></a>2.回调机制</h4><p>⑴定义一个回调函数；<br>⑵提供函数实现的一方在初始化的时候，将回调函数的函数指针注册给调用者；<br>⑶当特定的事件或条件发生的时候，调用者使用函数指针调用回调函数对事件进行处理。</p>
<p>　　对于百度百科上的这个说法，有一股扑面而来的熟悉感，就算是“函数指针”这么个陌生的名词都挡不住。这不就是上文代码吗？onClick()方法就是回调方法，在Button被点击这个事件发生时，我们使用onClick()回调方法对事件进行处理。不同的时我们不能提供指针，而是提供了一个接口。事实上在java中正是通过接口来实现回调方法。</p>
<hr>
<h4 id="3-模拟自定义控件实现回调方法"><a href="#3-模拟自定义控件实现回调方法" class="headerlink" title="3.模拟自定义控件实现回调方法"></a>3.模拟自定义控件实现回调方法</h4><p>　　网上很多用打电话的例子来说明，而我最近刚看了一点自定义控件，有点感觉，就用控件来说明。<br>　　假设我现在自定义了一个继承于View的开关控件，什么onMeasure()，onDraw()之类的都写好了，不用关心了，而且这个开关需要我关心的就是他是开还是关的状态。这时候我们就需要一个回调方法，将开关的“开”和“关”状态传递出来。好，你大概了解了功能和需求，以下是模拟控件的代码，并非可以部署到真机上的代码：</p>
<p><strong> 接口代码： </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 状态变化监听</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StateChangeListener</span> </span>&#123;</div><div class="line">	<span class="comment">// 回调方法</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">StateChange</span><span class="params">(<span class="keyword">boolean</span> State)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 开关控件代码： </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自定义开关--!</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenClose</span> </span>&#123;</div><div class="line">	<span class="comment">// 持有一个接口对象</span></div><div class="line">	StateChangeListener stateChangeListener;</div><div class="line"></div><div class="line">	<span class="comment">// 提供注册事件监听的方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnChangeListener</span><span class="params">(StateChangeListener stateChangeListener)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.stateChangeListener = stateChangeListener;</div><div class="line">        <span class="comment">//因为是模拟，所以需要在此将控件状态传出</span></div><div class="line">		IsClick(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">    <span class="comment">//是否被点击</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsClick</span><span class="params">(<span class="keyword">boolean</span> isClick)</span> </span>&#123;</div><div class="line">		<span class="comment">// 通过接口对象传控件状态</span></div><div class="line">		stateChangeListener.StateChange(isClick);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 测试代码： </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallBackTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		OpenClose oc = <span class="keyword">new</span> OpenClose();</div><div class="line">		oc.setOnChangeListener(<span class="keyword">new</span> StateChangeListener() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StateChange</span><span class="params">(<span class="keyword">boolean</span> State)</span> </span>&#123;</div><div class="line">				<span class="keyword">if</span> (State) &#123;</div><div class="line">					System.out.println(<span class="string">"开"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					System.out.println(<span class="string">"关"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我这还可以提供一张图，你可以很直观的感受到这是个什么样的控件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-c1a657e7ad78d465.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="别打我……"></p>
<p>以上就是我的收获，如果错误或者不同的看法和见解欢迎指出。</p>
<hr>
<blockquote>
<p><strong>回调函数定义和机制来自：</strong><a href="http://baike.baidu.com/link?url=95tuwFdMDbPr5IDqLrJoXKDaEcyv9c85ALl6o_GW_Y9-GF_GdHDswxHG-HcZEeuEiWMGHhtTENqokP9f6gpz3a" target="_blank" rel="external">百度百科</a></p>
</blockquote>
<p><strong>推荐阅读:</strong></p>
<blockquote>
<p><strong>这篇文章不错:</strong>  <a href="http://blog.csdn.net/maximus_chan/article/details/40381157" target="_blank" rel="external">java回调机制</a><br><strong>文中提到的控件的实现:</strong><a href="http://www.jianshu.com/p/7b5bbc96ad1b" target="_blank" rel="external">Android：初识自定义控件</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近对Android中的回调产生了一些疑问，看了不少博文才算是明白了一点，接下来分享一下我的收获。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 写在正文之前，大神可以跳过： &lt;/strong&gt;&lt;br&gt;　　1.接口不可以实例化，但可以创建一个接口对象。&lt;br&gt;　　2.你可能见过这样的语法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Button bt_add = (Button) findViewById(R.id.bt_add);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bt_add.setOnClickListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnClickListener() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　我们都知道OnClickListener()是一个接口，但是上文中  new OnClickListener()并非是实例化接口，而是表示一个匿名内部类实现该接口。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="基础" scheme="https://xiasuhuei321.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
