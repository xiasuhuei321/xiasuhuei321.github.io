<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiasuhuei321的博客</title>
  <subtitle>我要变强！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiasuhuei321.github.io/"/>
  <updated>2016-09-03T11:14:58.622Z</updated>
  <id>https://xiasuhuei321.github.io/</id>
  
  <author>
    <name>Luo_xiasuhuei321</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fragment结合ViewPager之懒加载</title>
    <link href="https://xiasuhuei321.github.io/2016/09/02/Fragment%E7%BB%93%E5%90%88ViewPager%E4%B9%8B%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>https://xiasuhuei321.github.io/2016/09/02/Fragment结合ViewPager之懒加载/</id>
    <published>2016-09-02T14:00:25.000Z</published>
    <updated>2016-09-03T11:14:58.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是懒加载？为什么要用懒加载？"><a href="#什么是懒加载？为什么要用懒加载？" class="headerlink" title="什么是懒加载？为什么要用懒加载？"></a>什么是懒加载？为什么要用懒加载？</h3><h4 id="1、什么是懒加载"><a href="#1、什么是懒加载" class="headerlink" title="1、什么是懒加载"></a>1、什么是懒加载</h4><p>懒加载就是当ViewPager和Fragment结合在一起使用时，Fragment呈现在用户面前时才加载数据，当其从未被呈现在用户面前时，不会执行加载数据的代码。这就是我所理解的懒加载。</p>
<h4 id="2、为什么要用懒加载"><a href="#2、为什么要用懒加载" class="headerlink" title="2、为什么要用懒加载"></a>2、为什么要用懒加载</h4><p>ViewPager默认会预加载下一页，如果下一页是某个重量级的Fragment无疑会造成很大的开销，当然了，如果对于你来说这些开销是必要的，也不必无脑用懒加载。</p>
<h3 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h3><p>很多时候我们都会将ViewPager和Fragment结合在一起使用，因为Android给我们提供了非常便利的<strong>FragmentPageAdapter</strong>,而这个adapter实现起来非常简单：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TechFragmentPageAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; fragmentList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TechFragmentPageAdapter</span><span class="params">(FragmentManager fm, List&lt;Fragment&gt; fragmentList)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        <span class="keyword">this</span>.fragmentList = fragmentList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> fragmentList.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> fragmentList.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们一般的Activity都是继承于AppCompatActivity，而这个activity可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getSupportFragmentManager();</div></pre></td></tr></table></figure></p>
<p>那么在实现以上的adapter时我们只要传入我们的fragmentList就可以了。这样的adapter既看起来舒服，又好使。但是ViewPager默认会加载下一页，当你调用setOffscreenPageLimit()，并且将值设置为0，抱歉，没啥用，因为当你设置的值小于1的时候默认还是1。那么，这个时候就需要我们自己去实现懒加载了。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现懒加载的关键是在于以下两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 文档对于这个方法的描述是：Set a hint to the system about whether this </div><div class="line"> * fragment's UI is currently visible to the user.</div><div class="line"> **/</div><div class="line">getUserVisibleHint()</div><div class="line">setUserVisibleHint(<span class="keyword">boolean</span> isVisibleToUser)</div></pre></td></tr></table></figure></p>
<p>接下来让我通过一段Log来了解这段故事，因为代码结构比较简单，只放其中的一段代码上来，其他的，靠我们脑补就行了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FirstFragment"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onAttach"</span>);</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onCreate"</span>);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onCreateView"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateView(inflater, container, savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onActivityCreated"</span>);</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onStart"</span>);</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onResume"</span>);</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onPause"</span>);</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onStop"</span>);</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDestroyView"</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroyView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDestroy"</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"onDetach"</span>);</div><div class="line">        <span class="keyword">super</span>.onDetach();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getUserVisibleHint</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"getUserVisibleHint"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getUserVisibleHint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</div><div class="line">        Log.e(TAG, <span class="string">"setUserVisibleHint:"</span> + isVisibleToUser);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>非常简单的一个Fragment，我只是在其中的各个方法中加入了Log这个操作而已，为了方便查看我使用了e这个级别的日志。类似的Fragment还有SecondFragment和ThirdFragment。当我使用FragmentPagerAdapter和ViewPager的时候，他们的Log输出如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-61a8b90cc542510c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Log日志.png"></p>
<p>首先和我们预料的一样，ViewPager的确有加载下一页的特性，然后我们滑动到第二页查看Log。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-a8c0fcc0fc43014f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第二页Log.png"><br>我们可以发现，当我们滑动到第二页时，第三页开始预加载，而且第二页的setUserVisibleHint中的值已经被置为了true。也就是说当前页面可见时，我们调用getUserVisibleHint()的值是true。那么我们可以根据这个特性去实现懒加载：</p>
<p><strong>当前页面不可见，但是ViewPager预加载的时候，我们判断当前页面是否可见，不可见则不进行加载数据的操作，仅仅做布局初始化的工作。在当前页面变为可用的时候，我们调用加载数据的方法，那么数据便在ViewPager滑动到当前页面的时候开始加载了。</strong></p>
<p>以下是我封装的代码，我封装无力，各位如果觉得可以便自取，如果觉得不行可以自己改进~<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.net.ConnectivityManager;</div><div class="line"><span class="keyword">import</span> android.net.NetworkInfo;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"></div><div class="line"><span class="keyword">import</span> gank.io.luo.view.TechView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Luo_xiasuhuei321@163.com on 2016/8/29.</div><div class="line"> * </div><div class="line"> * 实现懒加载的Fragment</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseLazyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> View mRootView;</div><div class="line">    <span class="keyword">protected</span> Context mContext;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isVisible;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isPrepared;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirst = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">//--------------------system method callback------------------------//</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">        isPrepared = <span class="keyword">true</span>;</div><div class="line">        initPrepare();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</div><div class="line">        <span class="keyword">if</span> (getUserVisibleHint()) &#123;</div><div class="line">            isVisible = <span class="keyword">true</span>;</div><div class="line">            lazyLoad();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            isVisible = <span class="keyword">false</span>;</div><div class="line">            onInvisible();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mContext = getActivity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mRootView == <span class="keyword">null</span>) &#123;</div><div class="line">            mRootView = initView(inflater, container, savedInstanceState);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mRootView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//--------------------------------method---------------------------//</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 懒加载</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">lazyLoad</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isPrepared || !isVisible || !isFirst) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        initData();</div><div class="line">        isFirst = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//--------------------------abstract method------------------------//</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在onActivityCreated中调用的方法，可以用来进行初始化操作。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initPrepare</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * fragment被设置为不可见时调用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onInvisible</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这里获取数据，刷新界面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化布局，请不要把耗时操作放在这个方法里，这个方法用来提供一个</div><div class="line">     * 基本的布局而非一个完整的布局，以免ViewPager预加载消耗大量的资源。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> View <span class="title">initView</span><span class="params">(LayoutInflater inflater,</span></span></div><div class="line">                                     @Nullable ViewGroup container,</div><div class="line">                                     @Nullable Bundle savedInstanceState);</div></pre></td></tr></table></figure></p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>最近我搭建了自己的个人博客，虽然今天（9.2）没时间完善了，但是以后有空我会完善一下的。而且有些文章我也不会再简书更新……比如我想把我的java回炉重造一下……但是有关java的这些东西不怎么想放到简书上，还是放到我自己的小窝里~</p>
<p>最后附上链接吧：<a href="https://xiasuhuei321.github.io">https://xiasuhuei321.github.io</a><br>恩，域名暂时没买，先就这么用着吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是懒加载？为什么要用懒加载？&quot;&gt;&lt;a href=&quot;#什么是懒加载？为什么要用懒加载？&quot; class=&quot;headerlink&quot; title=&quot;什么是懒加载？为什么要用懒加载？&quot;&gt;&lt;/a&gt;什么是懒加载？为什么要用懒加载？&lt;/h3&gt;&lt;h4 id=&quot;1、什么是懒加载&quot;&gt;&lt;a href=&quot;#1、什么是懒加载&quot; class=&quot;headerlink&quot; title=&quot;1、什么是懒加载&quot;&gt;&lt;/a&gt;1、什么是懒加载&lt;/h4&gt;&lt;p&gt;懒加载就是当ViewPager和Fragment结合在一起使用时，Fragment呈现在用户面前时才加载数据，当其从未被呈现在用户面前时，不会执行加载数据的代码。这就是我所理解的懒加载。&lt;/p&gt;
&lt;h4 id=&quot;2、为什么要用懒加载&quot;&gt;&lt;a href=&quot;#2、为什么要用懒加载&quot; class=&quot;headerlink&quot; title=&quot;2、为什么要用懒加载&quot;&gt;&lt;/a&gt;2、为什么要用懒加载&lt;/h4&gt;&lt;p&gt;ViewPager默认会预加载下一页，如果下一页是某个重量级的Fragment无疑会造成很大的开销，当然了，如果对于你来说这些开销是必要的，也不必无脑用懒加载。&lt;/p&gt;
&lt;h3 id=&quot;背景简介&quot;&gt;&lt;a href=&quot;#背景简介&quot; class=&quot;headerlink&quot; title=&quot;背景简介&quot;&gt;&lt;/a&gt;背景简介&lt;/h3&gt;&lt;p&gt;很多时候我们都会将ViewPager和Fragment结合在一起使用，因为Android给我们提供了非常便利的&lt;strong&gt;FragmentPageAdapter&lt;/strong&gt;,而这个adapter实现起来非常简单：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="性能优化" scheme="https://xiasuhuei321.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android透明状态栏解决方案</title>
    <link href="https://xiasuhuei321.github.io/2016/08/28/Android%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://xiasuhuei321.github.io/2016/08/28/Android透明状态栏解决方案/</id>
    <published>2016-08-28T05:34:19.000Z</published>
    <updated>2016-09-03T05:36:15.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近新开了个项目，准备花点时间做一下，不过文也不能少，一周一篇是最起码的了。关于沉浸式状态栏，网上的教程应该是非常非常多的，那么我为什么还要发呢？很简单，有些东西我记不大住，所以都发到我的简书上，以后我就不用到处去找了，麻烦~<br><a id="more"></a></p>
<h2 id="自定义顶部布局的沉浸式状态栏"><a href="#自定义顶部布局的沉浸式状态栏" class="headerlink" title="自定义顶部布局的沉浸式状态栏"></a>自定义顶部布局的沉浸式状态栏</h2><p>什么叫自定义顶部布局呢？这个要首先解释一下，处于一些原因的考虑，有一些项目可能不愿意使用Toolbar或者ActionBar，进入Activity的第一件事情就是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</div></pre></td></tr></table></figure></p>
<p>直接把顶部干掉，然后换上自己的顶部布局。对于这样的情况，先看一下实现之后的状况</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b0730b5fc85694ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="沉浸式.png"></p>
<p>效果好像还可以，那么究竟该怎么实现呢？</p>
<h2 id="Android5-0-LOLLIPOP"><a href="#Android5-0-LOLLIPOP" class="headerlink" title="Android5.0 LOLLIPOP"></a>Android5.0 LOLLIPOP</h2><p>为什么先讲Android5.0(API 21)呢，因为Android5.0之后可以直接改变状态栏的颜色，所以实现起来比较方便，先看一下xml配置实现的方法。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-2908263288f7e2d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="values21.png"></p>
<p>首先我们需要新建一个values-v21，然后新建styles，代码如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>#f13f00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>之后跑出来的效果就是上面的图的样子了，但是，这并没有什么用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b0f7e456225181b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并没有什么卵用"><br>是的，这并没有什么卵用，除了我们自己玩玩的项目，现在不可能直接把项目最小版本定为5.0，看看下面的版本分布你就能感受到了……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-81ef9a08860790cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分布图.png"></p>
<p>5.0版本以下的用户不可忽视，但是5.0以下的版本并没有可以改变状态栏颜色的方法，不过4.4(API 19)版本是可以将状态栏颜色设置为透明的，我们可以根据这一特性得出一些沉浸式状态栏的解决方案，而且我个人也比较推荐采用4.4及以上的这种解决方案。</p>
<h2 id="Android4-4-KITKAT"><a href="#Android4-4-KITKAT" class="headerlink" title="Android4.4 KITKAT"></a>Android4.4 KITKAT</h2><p>首先和上面差不多，在res下新建values-v19这个文件夹，然后新建styles文件，代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ImageTranslucentTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里我仅仅是设置了透明状态栏，如果你有其他的需要可以自己添加进去。这个时候运行一下看看效果<br><img src="http://upload-images.jianshu.io/upload_images/1976147-2a7406c1555ee742.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="透明.png"></p>
<p>恩，真的透明了，那么我们怎么让颜色延伸到状态栏呢？很容易想到的一种是根节点设置</p>
<blockquote>
<p>android:fitsSystemWindows=”true”</p>
</blockquote>
<p>然后设置根节点的颜色和自己的自定义标题栏一致，上布局代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:weightSum</span>=<span class="string">"1"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#f13f00"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">".lockscreen.view.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--标题布局--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"0.1"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#f13f00"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/main_title"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"ginbol"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></div><div class="line">            <span class="attr">android:textStyle</span>=<span class="string">"bold"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上图：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-97458cdee05a1eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一片红.png"></p>
<p>状态栏颜色成功变色，只要我们在使用其他布局的时候改变背景色就可以成功的实现沉浸式状态栏的效果了，但是，我在如此使用使用的时候曾经碰到一个bug，会导致部分布局颜色发生变化。使用这种布局实现的沉浸式所导致的bug，我没能解决，所以我只好换一种实现方法了……而且，在4.4的解决方案中我也推荐这种方法……这种方法是在看<a href="http://stormzhang.com/android/2015/08/16/boohee-toolbar/" target="_blank" rel="external">stormzhang-薄荷Toolbar(ActionBar)适配解决方案</a>中看到的，同样适用于我这里。</p>
<p>首先布局和标题栏和刚刚差不多，但是根节点不用</p>
<blockquote>
<p>android:fitsSystemWindows=”true”</p>
</blockquote>
<p>在自定义标题栏中加上</p>
<blockquote>
<p>android:paddingTop=”@dimen/topview_padding”</p>
</blockquote>
<p>这个paddingTop在api19以上的版本是25dp，以下是0，在使用这个方法之后运行出来的结果也是对的，就不放图了。至于这个值为什么是25dp，stormzhang的解释是在源码中看到了状态栏的高度就是那么多。</p>
<h2 id="最后的TIPS"><a href="#最后的TIPS" class="headerlink" title="最后的TIPS"></a>最后的TIPS</h2><p>有些手机可能在xml中设置状态栏透明并不起作用，使用代码在Activity中设置效果更佳。对于使用toolbar的项目，可以去看我上面提到的<a href="http://stormzhang.com/android/2015/08/16/boohee-toolbar/" target="_blank" rel="external">博客</a>，而且在他的博客中也有提到在代码中设置透明状态栏以及BaseActivity的抽取。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近新开了个项目，准备花点时间做一下，不过文也不能少，一周一篇是最起码的了。关于沉浸式状态栏，网上的教程应该是非常非常多的，那么我为什么还要发呢？很简单，有些东西我记不大住，所以都发到我的简书上，以后我就不用到处去找了，麻烦~&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://xiasuhuei321.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World--无关代码</title>
    <link href="https://xiasuhuei321.github.io/2016/08/20/Hello-World-%E6%97%A0%E5%85%B3%E4%BB%A3%E7%A0%81/"/>
    <id>https://xiasuhuei321.github.io/2016/08/20/Hello-World-无关代码/</id>
    <published>2016-08-20T11:17:35.000Z</published>
    <updated>2016-09-03T05:19:46.219Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Studio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>做一个宅男太久了，应该是从高二开始的？到现在已经有5年了？这期间有沉迷于网络小说，也有一段时间沉迷于游戏。所幸大学里并不是什么东西都没有学到，虽然自己曾放弃过多个目标（C，C#，C++），但是也在Android方面得到了一点动力。如果经常关注我的人应该能发现我的文章底下经常有<a href="http://www.jianshu.com/users/86f25f8b198b/latest_articles" target="_blank" rel="external">iamxiarui</a>的评论，事实上我和他几乎在同一时间开始认真学习Android。大学里如果要说哪个同学关系比较铁的，感觉只有他了。不过这货有一段时间趁着我忙于期末大作业疯狂发文，搞的我压力好大，但是<strong>有个朋友加对手感觉真棒</strong>。</p>
<p>以前的以前总是想的很多而做的很少，而之后则是想的少做的也少。现在，我想我应该<strong>少想一点，多做一点</strong>。平时看过我文章的人应该都能感觉到，我写文都会尽量保持欢脱愉快的气氛，不过code这种事么，那种气氛总是会被代码打断的。而我在现实生活中，却是一个并不怎么善于表达的人，宅男么，总是这样的。最近也在知乎上看到了一些很有趣的问题，比如<a href="https://www.zhihu.com/question/22580687" target="_blank" rel="external">为何我可以和同学老师朋友相处得很好，但一放假回家和父母每天都要吵嚷？</a>我的回答是：<br><strong>缺乏交流</strong>。因为平时我经常和父母交流，虽然可能会在一些事情上会有分歧，但是我们会尽量进行足够的沟通去弥补这些。平时与父母交流其实也免不了吵，但是其实这些都不算什么问题，只要有足够的交流就好了。而我的父母，最可爱的一点就是他们会认真的听我的发言。而且在平时，就算他们不是非常明白我讲的东西（技术相关）也会认真的听。</p>
<p>我很欣赏我的父母，虽然他们可能有各种缺点，但是我想成为他们那样的人。即使不懂得你在说什么，但我也会做一个好的倾听者。虽然能力不够，但是我也努力做到最好。好的，老爸我知道你们在看，我平时生活有些话是绝对不会说出口的，在这都跟你讲了。你其实算是我的偶像之一吧，不说以后，我现在就在努力的成为一个能负得起责任的人。</p>
<p>写到这里貌似都没写今天干的事啊，人一旦感慨一起来就没个完了……今天和以前的高中同学一起出去玩了一波，感觉很高兴。说实话，作为一个宅的生物，今天出去看到那么多人真是有点尴尬。果然对于“玩”这种事情我还是个hello world呢（入门者）。</p>
<p>我觉得下午的这段时间很轻松愉快的过去了，虽然对于我那可怜的高中同学并非如此……要陪着一个黑胖宅度过一下午，我自己想想都怕……玩笑，五年没见了，见面真的挺高兴的。当然了，见面前叫的那杯奇奇怪怪的果汁让我很不愉悦！跟番茄汁似的！整个下午感觉过的都很安闲，感觉有点奇怪，周围其实是很吵闹的，但是心是平静的。</p>
<p>下午也聊了一些话题，想拿出来写一下的大概是那句：</p>
<blockquote>
<p>……<br>而且我爸爸说就算我不工作他也养得活我。</p>
</blockquote>
<p>经过同学提醒说这样有点“啃老”的意思……我单独抽出来这句话的确容易造成误解，我本意并非如此。我的表达有所欠缺，所以用个在知乎上看到的东西来解释一下。南海问题发生后，有人问为什么这么多人无动于衷，很多人的回答都差不多是这个意思：中国发展强大不正是为了就算出了一些问题，内部也能歌舞升平吗？</p>
<p>我想表达的也是这个意思，而且我那同学现在也在努力的工作。</p>
<p>对于体现人与人之间闪光点的东西，我总是不吝于欣赏。而我，希望以后我能做一个她爸那样的人，能对我的父母说，你们吃吃玩玩就行，不干活我来养活你们。当然了，现在情况肯定是我爸对我说这句话，无以为报，唯有努力。</p>
<p>本来想写篇出去的感想的，结果变成这种了……看来真的太久没写文了，都不知道跑偏到哪里去了。不过感觉像我这种不太善于交流的人一个人出去也没啥好玩的，所以最后还是感谢一下同学！</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Studio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello world!\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://xiasuhuei321.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://xiasuhuei321.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>MVP初尝试</title>
    <link href="https://xiasuhuei321.github.io/2016/08/19/MVP%E5%88%9D%E5%B0%9D%E8%AF%95/"/>
    <id>https://xiasuhuei321.github.io/2016/08/19/MVP初尝试/</id>
    <published>2016-08-19T01:25:10.000Z</published>
    <updated>2016-09-03T05:33:42.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>又到了周末了，本来这周准备总结一下透明状态栏之类的东西……但是突然群里就吹起了MVP的牛，这让我这个MVC都只有小半桶水的人都不敢说话。但是程序员不会吹牛跟条咸鱼又有什么区别？<br><img src="http://upload-images.jianshu.io/upload_images/1976147-bc51e70906298050.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>所以我毅然决然的打开了搜索引擎，利用我科学上网的本领搜集了一些MVP相关的文章，不过看完也没啥感觉是真的，果然对于coder来说talk is cheap果断撸code才是正道。好了，日常吹牛、唠嗑(1/1)。<br><a id="more"></a></p>
<h2 id="MVC与MVP"><a href="#MVC与MVP" class="headerlink" title="MVC与MVP"></a>MVC与MVP</h2><p>对于Android开发者来说，MVC应该是比较熟悉的。首先我自制一副极简风格的MVC图来做说明。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-55cd71d2d9c94227.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>MVC是一种软件设计典范，用一种业务逻辑、数据、界面分离的方法组织代码。但是在Android中用MVC有一点明显的不足：View层与Controller层难以明确的划分出去。因为在Android中各种布局文件是View层没错，但是各个Activity和Fragment呢？这些东西既像View又像Controller，但我们一般会将其划分为Controller层，对于View层的更新一般都会放在对应的Activity或者Fragment(或者其他)中，而我们所需要做的仅仅是抽取出一个Model来实现MVC。</p>
<p>可以，这很Android。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-caf2f50caf5e6f8e.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p>MVC在Android中看上去不是很标准，那么MVP的出现之后与MVC一对比，相信各个Android开发者都会觉得：</p>
<p>这玩意还不错诶~靠谱！<br><img src="http://upload-images.jianshu.io/upload_images/1976147-bacc810e832c9537.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="算了不自己画了……"></p>
<p>从图中可以很明显的看出View层不再和Model层互知，View层和Model层通过Presenter层交互。在这了借用hongyang大神的那句话：之所以MVP会让人感觉耳目一新，是因为这次的跳跃是从并不标准的MVC到MVP的一个转变，减少了Activity的职责，简化了Activity中的代码，将复杂的逻辑代码提取到了Presenter中进行处理。与之对应的好处就是，耦合度更低，更方便的进行测试。</p>
<h2 id="MVP小DEMO-演练"><a href="#MVP小DEMO-演练" class="headerlink" title="MVP小DEMO 演练"></a>MVP小DEMO 演练</h2><p>这个小demo花了我不少时间去想通，让我错过了林丹与杨宗纬的大战！郁闷！</p>
<p>国际惯例先上目录：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-9ef8b104bd80f7be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录.png"></p>
<p>我的demo是图片加载的小demo，adapter里的适配器是recyclerview的适配器，ImageBean是图片数据，里面包含了一个Url和一个图片相关的描述。utils里是以前自己以前封装的解析这个接口的工具，Urls里保存的是接口。先把非重点在前面讲了，后面开始介绍一下我写的mvp。</p>
<h3 id="Model与View层"><a href="#Model与View层" class="headerlink" title="Model与View层"></a>Model与View层</h3><p>我上来是先写Model层与View层的，因为这俩货在MVP里是解耦的，不能互相感知，所以我可以在设计者两层的时候只考虑需求与实现，不考虑在Presenter里干的事。</p>
<p>首先是Model层：<br>我要加载图片，我这加载图片用的是Glide，如果你不了解这个强大的开源库，你可以先去百度一下。所以需要我在Model中做的事情就是获取图片信息的集合。首先定义一个Model层的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageModel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LoadImageList</span><span class="params">(ImageModelImp.OnLoadImageListListener listener,<span class="keyword">int</span> pageIndex)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>图片比较多，采用分页加载，至于这个listener是一个获取数据成功和失败的回调，可以在回调中进行相应的操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageModelImp</span> <span class="keyword">implements</span> <span class="title">ImageModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadImageList</span><span class="params">(<span class="keyword">final</span> OnLoadImageListListener listener,<span class="keyword">int</span> pageIndex)</span> </span>&#123;</div><div class="line">        OkHttpUtils.get().url(Urls.IMAGE_URL+pageIndex).build().execute(<span class="keyword">new</span> StringCallback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Call call, Exception e, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">                listener.onFailure(e);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">                List&lt;ImageBean&gt; imageBeen = JsonUtils.readJsonImageBean(response);</div><div class="line">                listener.onSuccess(imageBeen);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnLoadImageListListener</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;ImageBean&gt; list)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取数据的代码量不是非常的多，因为我用的都是封装的工具进行请求和解析json。这个Model层的类实现了我刚刚定义的接口，执行具体的逻辑。</p>
<p>以上是Model层的代码，接下来分析一下View层需要什么东西。我这个demo只是加载图片而已，我所采用的是recyclerview，那么我需要的仅仅是一个集合，然后将这个集合传入adapter中，剩下的事情adapter都会帮我处理好的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageLoadView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getImageList</span><span class="params">(List&lt;ImageBean&gt; list)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>让MainActivity实现这个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ImageLoadView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView image_list;</div><div class="line">    <span class="keyword">private</span> ImagePresenter imagePresenter;</div><div class="line">    <span class="keyword">private</span> List&lt;ImageBean&gt; imageList = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> ImageListAdapter adapter;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageIndex = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> GridLayoutManager staggeredGridLayoutManager;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initView();</div><div class="line">        adapter = <span class="keyword">new</span> ImageListAdapter(<span class="keyword">this</span>);  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getImageList</span><span class="params">(List&lt;ImageBean&gt; list)</span> </span>&#123;</div><div class="line">        adapter.setisShow(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">if</span> (imageList == <span class="keyword">null</span>) &#123;</div><div class="line">            imageList = <span class="keyword">new</span> ArrayList&lt;ImageBean&gt;();</div><div class="line">        &#125;</div><div class="line">        imageList.addAll(list);</div><div class="line">        <span class="keyword">if</span> (pageIndex == <span class="number">1</span>) &#123;</div><div class="line">            adapter.setData(list);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//如果没有更多数据则隐藏脚布局</span></div><div class="line">                adapter.setisShow(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//setData方法中含有刷新，无需刷新了。</span></div><div class="line">        adapter.setData(imageList);</div><div class="line">        pageIndex += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>中间还有很多代码，我这里只是抽取出来一部分代码。可以看出在我这个demo里V层和M层的定义简直不废吹灰之力，但是……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-b0f7e456225181b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并没有什么卵用"></p>
<h3 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h3><p>Presenter层的逻辑着实让我烧了一会脑子，有些东西就是这样，想通了就很简单，想不通就会很痛苦。如何让M层与V层交互？首先我们需要明确的一点是：获取数据的逻辑在Model层那个实现类里面</p>
<p>你可能说这不废话吗……的确是废话，既然在那个实现类里，那我们肯定需要一个这个类的实例对象，不然怎么去执行那段代码？加载图片需要我们在presenter里做的事情也非常的少，只有获取图片集合这一件事可干而已。所以定义如下接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImagePresenter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadList</span><span class="params">(<span class="keyword">int</span> pageIndex)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来看一下Presenter层的实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImagePresenterImp</span> <span class="keyword">implements</span> <span class="title">ImagePresenter</span>,<span class="title">ImageModelImp</span>.<span class="title">OnLoadImageListListener</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ImageLoadView imageLoadView;</div><div class="line">    <span class="keyword">private</span> ImageModel imageModel;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImagePresenterImp</span><span class="params">(ImageLoadView imageLoadView)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.imageModel = <span class="keyword">new</span> ImageModelImp();</div><div class="line">        <span class="keyword">this</span>.imageLoadView = imageLoadView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;ImageBean&gt; list)</span> </span>&#123;</div><div class="line">        imageLoadView.getImageList(list);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">        <span class="comment">//我这里就不做处理了</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadList</span><span class="params">(<span class="keyword">int</span> pageIndex)</span> </span>&#123;</div><div class="line">        imageModel.LoadImageList(<span class="keyword">this</span>,pageIndex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到在这个实现类里，持有了一个M层实现类的对象，持有了一个V层的接口。这个类实现了P层接口和M层请求失败成功的接口。可以看到在loadList()方法中用了M层对象去执行具体的获取数据的代码，而在请求成功的回调方法中用持有的V层接口对象将此list传出。所以在MainActivity实现了V层接口后就可以获取list数据了。</p>
<p>说了那么多你可能会有点被绕糊涂了，很简单，用我极简的作图风格来帮你理解，当然了，如果你对于回调还不十分了解的话建议去看我的这篇文章<a href="http://www.jianshu.com/p/7ac60e182449" target="_blank" rel="external">Android之回调函数</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b45145935c21b820.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终图"></p>
<p>可能看了以上的图你也不是很明白，没关系，网上资料很多，同时别忘了自己动手！<br>对了，放个最终跑起来的样子吧……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-5a13d3cdc368a479.gif?imageMogr2/auto-orient/strip" alt="效果图"></p>
<p>对了项目名字写错了，写了MVC……你们懂就好……</p>
<p>最后挂上demo获取方式</p>
<blockquote>
<p>github:<a href="https://github.com/ForgetAll/StudyForMVC" target="_blank" rel="external">https://github.com/ForgetAll/StudyForMVC</a></p>
</blockquote>
<hr>
<p>↑以上是更新的分割线，更新时间：16.8.29</p>
<p>说实话刚写完这个代码我就感觉有点不对劲，但是没深入考虑。后来实在是有点担心会发生内存泄露，毕竟我实现的这种MVP模式P层是需要持有一个V层接口引用的，而实现V层接口的是Activity，这样要是发生了内存泄露可不是小事，所以还需要我们将MVP和Activity的生命周期关联起来。</p>
<p>首先简单分析一下这种内存泄露可能发生的场景：Presenter经常性的通过Model执行一些耗时的代码，而Presenter持有Activity的引用，如果在耗时操作完成之前Activity就被销毁了，那么因为Presenter持有Activity强引用而导致Activity对象无法被回收，此时就发生了内存泄露。</p>
<p>对于这种可能发生的内存泄露，最简单粗暴的方式莫过于让Presenter和Activity一起挂掉。关于MVP更多的事情会在以后更新，敬请期待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;又到了周末了，本来这周准备总结一下透明状态栏之类的东西……但是突然群里就吹起了MVP的牛，这让我这个MVC都只有小半桶水的人都不敢说话。但是程序员不会吹牛跟条咸鱼又有什么区别？&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1976147-bc51e70906298050.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;所以我毅然决然的打开了搜索引擎，利用我科学上网的本领搜集了一些MVP相关的文章，不过看完也没啥感觉是真的，果然对于coder来说talk is cheap果断撸code才是正道。好了，日常吹牛、唠嗑(1/1)。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="设计模式" scheme="https://xiasuhuei321.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义View你需要了解的一些东西</title>
    <link href="https://xiasuhuei321.github.io/2016/08/13/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF/"/>
    <id>https://xiasuhuei321.github.io/2016/08/13/Android自定义View你需要了解的一些东西/</id>
    <published>2016-08-13T07:53:54.000Z</published>
    <updated>2016-09-03T05:41:45.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>终于周末了，当我想要松懈一会去浪的时候，脑海中突然闪过了这个东西……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-6d1bda58afc75f85.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="学习.jpg"><br>一图胜千言，日常唠嗑（1/1）。</p>
<h3 id="1-进入正题"><a href="#1-进入正题" class="headerlink" title="1 进入正题"></a>1 进入正题</h3><p>Android中自定义控件一直是一个比较难但又不得不面对的东西，虽然<strong>github+google</strong>能解决你的大部分需求，但是说实话，当一些bug发生在第三方控件上时，你仍然需要花费大量的时间去搞定。所以先了解一些和自定义相关的东西绝对是不亏的，话不多说，进入正题。</p>
<p>Android中自定义控件一般分以下三种：</p>
<ul>
<li>继承已有控件实现，可以理解为对原有控件功能的加强</li>
<li>组合控件，将多个控件结合在一起实现一些功能</li>
<li>完全自定义控件，一般继承于View或者ViewGroup</li>
</ul>
<p>这三类控件在实现方式上有什么异同呢？一般来说第一种控件是对于原有控件功能的增强，比如给ListView增加下拉刷新，上拉加载更多的功能，我们不需要考虑ListView中每个item如何测量如何绘制，我们需要考虑的是如何实现需要增添的功能。第二种组合几种控件，比如轮播图的实现，你可以组合Viewpager+ImageView，这东西说实话也就是功能的实现，但是如果你没有封装好则会让你的代码显得杂乱无章。第三种则是比较难以上手的，因为他需要你了解一些View相关的知识。</p>
<p>View相关的东西很多，多到可以另开一篇文章写了，所以我尽量摘取重点，咳咳，大伙注意听了啊，小本本都可以拿出来了啊，xiasuhuei老师开始划重点了啊。<br><a id="more"></a></p>
<h3 id="2-xiasuhuei321的重点"><a href="#2-xiasuhuei321的重点" class="headerlink" title="2 xiasuhuei321的重点"></a>2 xiasuhuei321的重点</h3><p>一个展示在屏幕上的View需要经历measure(测量)，layout(布局)，和draw(绘制)三个过程，其中measure确定View的宽高，layout确定View的最终宽高和四个顶点的位置，而draw则将View绘制到屏幕上。</p>
<p>为了更好的了解这个过程，我们首先需要了解的一个东西就是<strong>MeasureSpec</strong>：<br>MeasureSpec是一个32位的int值，高2位代表SpecMode，低30位代表SpecSize。SpecMode代表测量模式，SpecSize代表的是在前一种测量模式下的测量值。</p>
<p>了解了MeasureSpec后，我们需要了解<strong>SpecMode</strong>：<br>SpecMode有三种，表示三种测量模式：</p>
<p>1)UNSPECIFIED：<br>要多大给多大，父容器不对View有任何限制，这种情况一般不需要我们考虑。</p>
<p>2)EXACTLY<br>从字面上就能看出来，精确模式，包含了你声明控件宽高的数值和match_parent这两种情况。</p>
<p>3)AT_MOST<br>对应于wrap_content，这里需要注意，AT_MOST是父容器制定了一个SpecSize，View的大小不能大于这个值。如果你继承于View的代码没有处理wrap_content的话，那么wrap_content和match_parent的效果是一样的。</p>
<p>以上大概讲了一点View相关的知识，View相关的东西远远不及这些，有兴趣可以查阅其他的资料或者阅读源码了解，我这里便不再赘述了。</p>
<h3 id="3-自定义控件小案例——验证码"><a href="#3-自定义控件小案例——验证码" class="headerlink" title="3 自定义控件小案例——验证码"></a>3 自定义控件小案例——验证码</h3><p>最近在看<a href="http://blog.csdn.net/lmj623565791/article/details/24252901" target="_blank" rel="external">hongyang</a>大神的博客，刚好翻到了这个小案例，让我通过这个小案例一步一步的为你解析完全自定义控件(继承于View)的神秘面纱。</p>
<p>在上手做之前先分析一下这个验证码需要我们实现的功能：<br>1.生成随机数字或者字符串<br>2.点击要能够更换字符串</p>
<p>一个自定View要能做到以下几点：<br>1)自定义View的属性，要能在xml文件里直接用，方便使用<br>2)重写omMeasure<br>3)重写onDraw<br>第二步并不是必须的，但如果你的东西需要能处理wrap_content的话，那你还是乖乖的重写onMeasure去处理吧。</p>
<p>让我们跟着以上的步骤过一遍：</p>
<h4 id="3-1-自定义View属性"><a href="#3-1-自定义View属性" class="headerlink" title="3.1 自定义View属性"></a>3.1 自定义View属性</h4><p>在res/values下新建一个attrs.xml文件，在里面定义我们的属性和声明。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleText"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CustomTitleView"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleText"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextColor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleTextSize"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果你用的是eclipse的话，需要你在xml文件里添加</p>
<blockquote>
<p>xmlns:custom=”<a href="http://schemas.android.com/apk/res/+包名" target="_blank" rel="external">http://schemas.android.com/apk/res/+包名</a></p>
</blockquote>
<p>而如果你是Android Studio的话则添加以下：</p>
<blockquote>
<p>xmlns:custom=”<a href="http://schemas.android.com/apk/res-auto" target="_blank" rel="external">http://schemas.android.com/apk/res-auto</a>“</p>
</blockquote>
<p>自定义属性有以下几种值:</p>
<ul>
<li>color：颜色值</li>
<li>boolean：布尔值</li>
<li>dimesion：尺寸值</li>
<li>float：浮点值</li>
<li>integer：整型值</li>
<li>string：字符串</li>
<li>fraction：百分数</li>
<li>enum：枚举值</li>
<li>reference：引用</li>
</ul>
<p>以上仅仅是说明一下，如果以后有用到碰到不明白的可以google或者百度。</p>
<p>这样就能够在xml文件里使用我们自定义的属性了，之后我们在代码中定义相应的字段：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 文本</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> String mTitleText;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 文本的颜色</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mTitleTextColor;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 文本的大小</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mTitleTextSize;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制时控制文本绘制的范围</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Rect mBound;    </div><div class="line"><span class="keyword">private</span> Paint mPaint;</div></pre></td></tr></table></figure></p>
<p>接下来需要我们做的便是获取这些属性，并且在代码中作出相应的处理。</p>
<p>在代码中获取属性值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomTitleView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取我们所定义的自定义样式属性</div><div class="line">     */</div><div class="line">    TypedArray a = context.getTheme()</div><div class="line">            .obtainStyledAttributes(attrs, R.styleable.CustomTitleView, defStyleAttr, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n = a.getIndexCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> attr = a.getIndex(i);</div><div class="line">        <span class="keyword">switch</span> (attr) &#123;</div><div class="line">            <span class="keyword">case</span> R.styleable.CustomTitleView_titleText:</div><div class="line">                mTitleText = a.getString(attr);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> R.styleable.CustomTitleView_titleTextColor:</div><div class="line">                <span class="comment">//默认颜色为黑色</span></div><div class="line">                mTitleTextColor = a.getColor(attr, Color.BLACK);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> R.styleable.CustomTitleView_titleTextSize:</div><div class="line">                <span class="comment">//默认设置为16sp,TypeValue也可以把sp转化为px</span></div><div class="line">                mTitleTextSize = a.getDimensionPixelSize(attr, (<span class="keyword">int</span>) TypedValue.applyDimension(</div><div class="line">                        </div><div class="line">                TypedValue.COMPLEX_UNIT_SP, <span class="number">16</span>, getResources().getDisplayMetrics()));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    a.recycle();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取绘制文本的宽和高</div><div class="line">     */</div><div class="line">    mPaint = <span class="keyword">new</span> Paint();</div><div class="line">    mPaint.setTextSize(mTitleTextSize);</div><div class="line">    mBound = <span class="keyword">new</span> Rect();</div><div class="line">    mPaint.getTextBounds(mTitleText, <span class="number">0</span>, mTitleText.length(), mBound);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="comment">//获取随机字符串</span></div><div class="line">            mTitleText = randomText();</div><div class="line">            postInvalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">    a.recycle();</div></pre></td></tr></table></figure></p>
<p>前面我说如果继承于View的控件在代码中不对wrap_content作出处理，那么这个控件的wrap_content和match_parent的效果将会是一样的，那么就让我们试一试。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       Log.i(TAG,<span class="string">"onDraw"</span>);</div><div class="line">       mPaint.setColor(Color.YELLOW);</div><div class="line">       canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, getMeasuredWidth(), getMeasuredHeight(), mPaint);</div><div class="line"></div><div class="line">       mPaint.setColor(mTitleTextColor);</div><div class="line">       canvas.drawText(mTitleText, getWidth() / <span class="number">2f</span> - mBound.width() / <span class="number">2f</span>, getHeight() / <span class="number">2f</span> + mBound.height() / <span class="number">2f</span>, mPaint);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>以上的onMeasure()方法直接继承于View，没有做任何的修改，在xml文件中声明如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.example.luo_pc.view.CustomView.CustomTitleView</span></span></div><div class="line">    <span class="attr">custom:titleText</span>=<span class="string">"1234"</span></div><div class="line">    <span class="attr">custom:titleTextColor</span>=<span class="string">"#ff0000"</span></div><div class="line">    <span class="attr">custom:titleTextSize</span>=<span class="string">"40sp"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>看好咯，我声明的是wrap_content对吧？让我们来看下运行的结果<br><img src="http://upload-images.jianshu.io/upload_images/1976147-569099babe8947c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="全屏.png"></p>
<p>黄色并非我设置的背景，而是想要包裹验证码的背景。正如我所说的，如果不处理的话，就是这种效果，很明显这不是我们想要的，那么该如何处理呢？</p>
<p>View的measure()方法是final的，所以这个方法是无法被重写的，但是View提供了onMeasure()方法让我们来处理这些事。onMeasure()方法中带了两个int类型的参数</p>
<blockquote>
<p>onMeasure(int widthMeasureSpec, int heightMeasureSpec)</p>
</blockquote>
<p>看着这两个东西有没有回想起什么，前面我们了解过MeasureSpec。而这两个正是系统测量出的View的宽和高的MeasureSpec，所以我们便可以在onMeasure()中处理wrap_content的问题。</p>
<p>首先处理宽度：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line"></div><div class="line">Log.i(TAG,<span class="string">"onMeasure"</span>);</div><div class="line"><span class="comment">//设置宽度</span></div><div class="line"><span class="keyword">int</span> specMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line"><span class="keyword">int</span> specSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (specMode) &#123;</div><div class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:   <span class="comment">//精准模式，包含指定大小和match_parent</span></div><div class="line">        width = getPaddingLeft() + getPaddingRight() + specSize;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:   <span class="comment">//一般为wrap_content</span></div><div class="line">        width = getPaddingLeft() + getPaddingRight() + mBound.width();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前面说了MeasureSpec是SpecMode和SpecSize的打包，我们首先要做的就是拆包。然后根据specMode来确定宽度。如果是EXACTLY自不必多说，直接左右padding加上指定的宽度(或match_parent宽度)就是我们所需的width。而如果是AT_MOST，在本案例中则是我们绘制的矩形背景的宽度。在处理高度的时候也是同样的道理。最终完整onMeasure()代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</div><div class="line">    Log.i(TAG,<span class="string">"onMeasure"</span>);</div><div class="line">    <span class="comment">//设置宽度</span></div><div class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:   <span class="comment">//精准模式，包含指定大小和match_parent</span></div><div class="line">            width = getPaddingLeft() + getPaddingRight() + specSize;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:   <span class="comment">//一般为wrap_content</span></div><div class="line">            width = getPaddingLeft() + getPaddingRight() + mBound.width();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置高度</span></div><div class="line">    specMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">    specSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">            height = getPaddingTop() + getPaddingBottom() + specSize;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">            height = getPaddingTop() + getPaddingBottom() + mBound.height();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    setMeasuredDimension(width, height);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后记得setMeasuredDimension(width, height);<br>如果不调用这个方法来存储width和height将会在View测量的过程中引发异常。其他的代码并没有变化，再跑一遍看看咋样了。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-f412effdda7368ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功处理"></p>
<p>恩，包住了，点击也能换数字了，不过如果是验证码的话，还需要一个获取验证码内容的方法，这个不难，直接在生成的时候设置一个就成了。还有一个是背景色，现在是写死的，如果我想换个颜色呢，我自己可以改源码，但是要给别人用的话可不能让人这么用。不过实现起来都很简单，直接上代码。</p>
<p>获取文字内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  *生成随机数字字符串</div><div class="line">  **/</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">randomText</span><span class="params">()</span> </span>&#123;</div><div class="line">    Random random = <span class="keyword">new</span> Random();</div><div class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">    <span class="keyword">while</span> (set.size() &lt; <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">int</span> randomInt = random.nextInt(<span class="number">10</span>);</div><div class="line">        set.add(randomInt);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (Integer i : set) &#123;</div><div class="line">        sb.append(<span class="string">""</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//赋值</span></div><div class="line">    text = sb.toString();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String text;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> text;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>设置背景色，在attr的xml文件里加上两句:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleBackGroudColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!--在&lt;declare-styleable name="CustomTitleView"&gt;中加入--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"titleBackGroudColor"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>在自定义View中加入获取此属性的case：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> R.styleable.CustomTitleView_titleBackGroudColor:  </div><div class="line">          mTitleBackColor = a.getColor(attr,Color.YELLOW);</div></pre></td></tr></table></figure></p>
<p>在绘制时加入获取到的颜色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setColor(mTitleBackColor);</div></pre></td></tr></table></figure></p>
<p>上面获取text的效果就不查看了，看代码就够一目了然了，下面我们将背景设置为灰色查看一下效果：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.example.luo_pc.view.CustomView.CustomTitleView</span></span></div><div class="line">        <span class="attr">custom:titleText</span>=<span class="string">"1234"</span></div><div class="line">        <span class="attr">custom:titleTextColor</span>=<span class="string">"#ff0000"</span></div><div class="line">        <span class="attr">custom:titleTextSize</span>=<span class="string">"40sp"</span></div><div class="line">        <span class="attr">custom:titleBackGroudColor</span>=<span class="string">"#bcbcbc"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-3391d5f9651f95f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="灰色.png"></p>
<p>再次重申一下，以上这个小案例是从<a href="http://blog.csdn.net/lmj623565791/article/details/24252901" target="_blank" rel="external">hongyang</a>大神那看到的，各位如果想要深入学习自定义View，hongyang大神那的系列文章绝对是极好的。</p>
<p>参考资料：</p>
<blockquote>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/24252901" target="_blank" rel="external">Android 自定义View (一)——by hongyang</a><br>《开发艺术探索》</p>
</blockquote>
<p>源码地址：<br><a href="http://download.csdn.net/detail/lmj623565791/7227061" target="_blank" rel="external">hongyang的源码</a><br><a href="https://github.com/ForgetAll/View" target="_blank" rel="external">我整理的Android Studio版源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;终于周末了，当我想要松懈一会去浪的时候，脑海中突然闪过了这个东西……&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1976147-6d1bda58afc75f85.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;学习.jpg&quot;&gt;&lt;br&gt;一图胜千言，日常唠嗑（1/1）。&lt;/p&gt;
&lt;h3 id=&quot;1-进入正题&quot;&gt;&lt;a href=&quot;#1-进入正题&quot; class=&quot;headerlink&quot; title=&quot;1 进入正题&quot;&gt;&lt;/a&gt;1 进入正题&lt;/h3&gt;&lt;p&gt;Android中自定义控件一直是一个比较难但又不得不面对的东西，虽然&lt;strong&gt;github+google&lt;/strong&gt;能解决你的大部分需求，但是说实话，当一些bug发生在第三方控件上时，你仍然需要花费大量的时间去搞定。所以先了解一些和自定义相关的东西绝对是不亏的，话不多说，进入正题。&lt;/p&gt;
&lt;p&gt;Android中自定义控件一般分以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承已有控件实现，可以理解为对原有控件功能的加强&lt;/li&gt;
&lt;li&gt;组合控件，将多个控件结合在一起实现一些功能&lt;/li&gt;
&lt;li&gt;完全自定义控件，一般继承于View或者ViewGroup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三类控件在实现方式上有什么异同呢？一般来说第一种控件是对于原有控件功能的增强，比如给ListView增加下拉刷新，上拉加载更多的功能，我们不需要考虑ListView中每个item如何测量如何绘制，我们需要考虑的是如何实现需要增添的功能。第二种组合几种控件，比如轮播图的实现，你可以组合Viewpager+ImageView，这东西说实话也就是功能的实现，但是如果你没有封装好则会让你的代码显得杂乱无章。第三种则是比较难以上手的，因为他需要你了解一些View相关的知识。&lt;/p&gt;
&lt;p&gt;View相关的东西很多，多到可以另开一篇文章写了，所以我尽量摘取重点，咳咳，大伙注意听了啊，小本本都可以拿出来了啊，xiasuhuei老师开始划重点了啊。&lt;br&gt;
    
    </summary>
    
      <category term="Android自定义View" scheme="https://xiasuhuei321.github.io/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="进阶" scheme="https://xiasuhuei321.github.io/tags/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="自定义View基础" scheme="https://xiasuhuei321.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Okhttp3-addHeader小坑记</title>
    <link href="https://xiasuhuei321.github.io/2016/08/09/Okhttp3-addHeader%E5%B0%8F%E5%9D%91%E8%AE%B0/"/>
    <id>https://xiasuhuei321.github.io/2016/08/09/Okhttp3-addHeader小坑记/</id>
    <published>2016-08-09T08:10:39.000Z</published>
    <updated>2016-09-03T02:30:47.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近感觉自己看了不少东西，不过在上班所以并没有很多的时间来写东西。我有一些半成品不过都不想发出来，毕竟缺少一点自己的东西在里面。好了日常唠嗑(1/1)。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前面也说了最近在上班，接触到的项目里用的都是被抛弃的httpclient，打算换个请求。所以最近着手看需要重构一些相关的东西，重构之前首先选定要拿什么做。经过慎重的思考之后决定:项目尽量采用MVC的模式做，网络请求用okhttp(用hongyang封装的okhttp-utils)，图片的处理和加载想采用glide，但是目前来看还有一些问题。好了背景介绍到这，下面说坑。<br><a id="more"></a></p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>既然采用Okhttp来重写网络请求，我当然得挑几个出来跑一下试试。这一试问题就出来了，见下图:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-bb687ddc655e7f83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error.png"></p>
<p>415介质错误，等等，难道我请求写的有问题？好吧，真有可能，可能因为自己平时就粗心大意的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">      OkHttpUtils.postString()</div><div class="line"><span class="comment">//                .mediaType(MediaType.parse("application/json; charset=utf-8"))</span></div><div class="line">                .content(jo.toString())</div><div class="line">                .addHeader(<span class="string">"tkn"</span>, <span class="string">"--"</span>)</div><div class="line">                .addHeader(<span class="string">"uid"</span>, <span class="string">"--"</span>)</div><div class="line">                .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</div><div class="line">                .url(<span class="string">" "</span>)</div><div class="line">                .build()</div><div class="line">                .execute(<span class="keyword">new</span> BitmapCallback() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Call call, Exception e, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                        tvTest.setText(<span class="string">"纳尼，竟然会错?"</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Bitmap response, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">                        ivImg.setImageBitmap(response);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>由于有保密的缘故，url我就不加上去了。tkn和uid是验证登录的东西，这个东西我肯定是写的没错的，我这个请求我仔细看了一遍也没发现哪出了问题。但错就在那啊！</p>
<p>可能有细心的看官已经发现了，我注释了一行。是的，那一行就是解决问题的方法。在http头里面声明”Content-Type”, “application/json”在okhttp里面是没什么卵用的，okhttp中需要在mediaType中声明介质类型。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最近由于工作先后接触了HttpUrlConnection、HttpClient、okhttp，感觉api有的差不多，有的差别很大，关键还是你对于http协议的理解。只要你对http有一定的了解，对于一个有良好设计的东西来说找到对应的api是很容易的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近感觉自己看了不少东西，不过在上班所以并没有很多的时间来写东西。我有一些半成品不过都不想发出来，毕竟缺少一点自己的东西在里面。好了日常唠嗑(1/1)。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;前面也说了最近在上班，接触到的项目里用的都是被抛弃的httpclient，打算换个请求。所以最近着手看需要重构一些相关的东西，重构之前首先选定要拿什么做。经过慎重的思考之后决定:项目尽量采用MVC的模式做，网络请求用okhttp(用hongyang封装的okhttp-utils)，图片的处理和加载想采用glide，但是目前来看还有一些问题。好了背景介绍到这，下面说坑。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="爬坑" scheme="https://xiasuhuei321.github.io/tags/%E7%88%AC%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>百度地图Key验证失败230错误</title>
    <link href="https://xiasuhuei321.github.io/2016/07/21/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEKey%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5230%E9%94%99%E8%AF%AF/"/>
    <id>https://xiasuhuei321.github.io/2016/07/21/百度地图Key验证失败230错误/</id>
    <published>2016-07-21T02:13:40.000Z</published>
    <updated>2016-09-03T02:29:28.812Z</updated>
    
    <content type="html"><![CDATA[<h4 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h4><p>最近有需求要用到地图，同学和我说高德地图社区都关了，他都换百度了……所以我果断……直接用百度地图吧。按照官方文档的步骤，一路下来都很简单。但是在使用官方示例demo的时候却碰到了如下的错误：</p>
<blockquote>
<p>baidumapsdk.demo E/baidumapsdk: Authentication Error errorcode: 230 uid: -1 appid -1 msg: APP Scode码校验失败<br><a id="more"></a><br>首先我可以确认我包名是没有错的，而且我还进了gradle里看了下，确认都是一致的。那么问题一定时候出在SHA1上的了，但是讲道理我用你的demo我又没打包发布，用的肯定是debug.keystore吧……</p>
</blockquote>
<p>诶？等等……难不成他指定了debug.keystore所以导致我获取到的SHA1并不对？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-d602a63ec701c8ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="debug.png"></p>
<p>我看了一眼……哎哟卧槽还真是，难怪一直验证失败。那接下来的事情就好办了，要么获取这个debug.keystore的SHA1，要么把这个keystore路径换掉。我直接获取了这个debug.keystore的SHA1并且和我电脑上默认的作了一下对比</p>
<blockquote>
<p>keytool -list -v -keystore debug.keystore</p>
</blockquote>
<p>好了走你~！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-18be5a30e0d51f8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="真不一样.png"></p>
<p>可以很明显的看出来，这俩是不一样的，所以验证失败是可以理解的……我的问题就这么解决了，值得注意的是发布版的签名证书又不一样了，到时候还得重新获取SHA1信息，重新获取AK。（当然百度其实是给了发布版和开发板两个SHA1让你填的，我手上并没有打包的东西，所以不怎么了解这一块）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;进入正题&quot;&gt;&lt;a href=&quot;#进入正题&quot; class=&quot;headerlink&quot; title=&quot;进入正题&quot;&gt;&lt;/a&gt;进入正题&lt;/h4&gt;&lt;p&gt;最近有需求要用到地图，同学和我说高德地图社区都关了，他都换百度了……所以我果断……直接用百度地图吧。按照官方文档的步骤，一路下来都很简单。但是在使用官方示例demo的时候却碰到了如下的错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;baidumapsdk.demo E/baidumapsdk: Authentication Error errorcode: 230 uid: -1 appid -1 msg: APP Scode码校验失败&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="爬坑" scheme="https://xiasuhuei321.github.io/tags/%E7%88%AC%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView以及OOM的一些处理</title>
    <link href="https://xiasuhuei321.github.io/2016/05/30/RecyclerView%E4%BB%A5%E5%8F%8AOOM%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%84%E7%90%86/"/>
    <id>https://xiasuhuei321.github.io/2016/05/30/RecyclerView以及OOM的一些处理/</id>
    <published>2016-05-30T14:55:31.000Z</published>
    <updated>2016-09-03T05:35:59.300Z</updated>
    
    <content type="html"><![CDATA[<p>今天关于是写ListView还是RecyclerView着实纠结了一会，毕竟这二者都很重要，不过最近做的东西里用的是RecyclerView，所以还是先写RecyclerView了，而且代码也撸好了。好了日常唠嗑（1/1），下面进入正题。</p>
<p>本文包含以下几个方面：</p>
<ul>
<li>使用RecyclerView实现ListView的效果</li>
<li>RecyclerView加载图片出现OOM时的一些处理</li>
<li>RecyclerView实现瀑布流</li>
<li>RecyclerView滑动卡顿的一些优化<a id="more"></a>
RecyclerView与ListView原理是类似的：都是仅仅维护少量的View并且可以展示大量的数据，不过RecyclerView相比ListView更加高级和灵活。RecyclerView本身只负责View的回收和复用，这从它名字本身也能看出一些端倪。既然RecyclerView只关心View的回收和复用，那么这玩意到底该怎么才能玩起来？</li>
</ul>
<p>好问题，虽然是我自己问的……借用一句别人说的：真正牛逼的人是不需要什么都管的，只要底下有人就行。LayoutManager负责Item布局和展示,Item之间的间隔由ItemDecoration来解决，Item的增加与删除的动画由ItemAnimator来解决，Adapter用来将数据与Item界面绑定。</p>
<p>好了作了基本的了解，开始上码吧，有关如何在Android Studio中使用RecyclerView和我的代码获取方法，将在文末作相应的说明。首先第一要实现的，就是和ListView类似的效果，先看效果图，原谅我不会做动图……</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-4349b482ad7d122c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-5619d16337071225.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果2"></p>
<p>好了，看完效果，开码，首先是主界面的xml文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    tools:context="com.example.luo_pc.testforrecyclerview.MainActivity"&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v7.widget.RecyclerView</div><div class="line">        android:id="@+id/rv_test"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"&gt;&lt;/android.support.v7.widget.RecyclerView&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>没啥玩意，就是一个线性布局里加一个RecyclerView，接下来与ListView一样，列表item的xml文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="wrap_content"</div><div class="line">    android:orientation="vertical"</div><div class="line">    android:background="#ffffff"</div><div class="line">    &gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id="@+id/iv_item_img"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        android:scaleType="centerCrop"</div><div class="line">        android:adjustViewBounds="true"</div><div class="line">        android:layout_gravity="center"</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id="@+id/tv_item_desc"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:gravity="center"</div><div class="line">        android:textColor="#000000"</div><div class="line">        /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>主界面代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; itemList;</div><div class="line">    <span class="keyword">private</span> RecyclerView rv_test;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        rv_test = (RecyclerView) findViewById(R.id.rv_test);</div><div class="line">        initData();</div><div class="line">        <span class="comment">//设置线性layoutManager</span></div><div class="line">        rv_test.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getApplicationContext()));</div><div class="line">        </div><div class="line">        mAdapter myAdapter = <span class="keyword">new</span> mAdapter();</div><div class="line">        <span class="comment">//设置myAdapter的数据</span></div><div class="line">        myAdapter.setData(itemList);</div><div class="line">        <span class="comment">//设置Adapter</span></div><div class="line">        rv_test.setAdapter(myAdapter);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>&#123;</div><div class="line">        itemList = <span class="keyword">new</span> ArrayList&lt;ItemBean&gt;();</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird, <span class="string">"南小鸟1"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.xiyangyang, <span class="string">"喜羊羊"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird3, <span class="string">"南小鸟2"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.blackcat, <span class="string">"黑猫"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.dog, <span class="string">"狗与剪刀"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.nike3, <span class="string">"妮可妮可"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.paojie, <span class="string">"炮姐"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber1, <span class="string">"吾王1"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber2, <span class="string">"吾王2"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的ItemBean代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemBean</span> </span>&#123;</div><div class="line">    <span class="comment">//R.drawable....</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> img;</div><div class="line">    <span class="keyword">private</span> String desc;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemBean</span><span class="params">(<span class="keyword">int</span> img,String desc)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.img = img;</div><div class="line">        <span class="keyword">this</span>.desc = desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImg</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> img;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImg</span><span class="params">(<span class="keyword">int</span> img)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.img = img;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> desc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.desc = desc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是重头戏了，Adapter的代码。我们需要创建一个类继承RecyclerView.Adapter，以此来创建RecyclerView的适配器，继承RecyclerView.Adapter需要实现 onCreateViewHolder()、onBindViewHolder()和getItemCount()方法，而onCreateView的返回值是RecyclerView.ViewHolder，所以我们需要创建一个RecyclerView.ViewHolder。而RecyclerView.ViewHolder是一个抽象类，所以我们必须新建一个类继承该类，该抽象类中的构造函数也必须实现。说了这么多，可能有点绕，让我们从代码中学习如何操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">mAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span></span>&#123;</div><div class="line">        <span class="comment">//数据</span></div><div class="line">        <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; itemList;</div><div class="line"><span class="comment">//        private ImageResizer imgResizer = new ImageResizer();</span></div><div class="line">        <span class="comment">//设置数据</span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ArrayList&lt;ItemBean&gt; itemList)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.itemList = itemList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">            <span class="comment">//得到item的view</span></div><div class="line">            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_item, parent, <span class="keyword">false</span>);</div><div class="line">            <span class="comment">//返回viewholder</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> mViewHolder(view);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//绑定数据</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            ItemBean it = itemList.get(position);</div><div class="line">            mViewHolder mholder = (mViewHolder)holder;</div><div class="line">            <span class="comment">//设置imageView的图片</span></div><div class="line">            mholder.iv_item_img.setImageResource(it.getImg());</div><div class="line"><span class="comment">//            mholder.iv_item_img.setImageBitmap(imgResizer.decodeSampledBitmapFromResource(getResources(),it.getImg()));</span></div><div class="line">            <span class="comment">//设置textView的文字</span></div><div class="line">            mholder.tv_item_desc.setText(it.getDesc());</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> itemList.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">mViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line">            ImageView iv_item_img;</div><div class="line">            TextView tv_item_desc;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="title">mViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>(itemView);</div><div class="line">                iv_item_img = (ImageView) itemView.findViewById(R.id.iv_item_img);</div><div class="line">                tv_item_desc = (TextView)itemView.findViewById(R.id.tv_item_desc);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我这有些地方写的不是很好，在写一个类继承RecyclerView.Holder时这么写会更好</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">mAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>&lt;<span class="title">mViewHolder</span>&gt;</span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>如此在onBindViewHolder方法中便可以直接使用holder了，而不必再强转。</p>
<p>好了代码也写完了，是时候跑一波了！我的图片都是在百度上找的，随便下了那么几张。跑的时候果然不负我望，OOM!</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-751246a0afc89dc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OOM"></p>
<p>诶？OOM？那么我之前放的效果图是怎么回事？没错……我压缩了一下图片，才跑出来开头放的效果图……关于该如何操作，容我细细道来。</p>
<p>我从网上下的图都是比较大的，大多为jpg格式，用个看图软件打开显示是1125*1674像素在windows系统上是436K大小。对于jpg我不太了解，只知道这换算成ARGB_8888每个像素占4byte，得7M了。而且</p>
<p>反正是OOM了，容我说一下我的处理方法：</p>
<p><strong>压缩</strong></p>
<p>图片有不同的形状与大小。在大多数情况下它们的实际大小都比需要呈现的尺寸大很多。考虑到在有限的内存下工作，理想情况是我们只需要在内存中加载一个低分辨率的图片即可。</p>
<p>BitmapFactory提供了一些解码的方法，用来从不同的资源中创建一个Bitmap。每一种解码方法都可以通过BitmapFactory.Options设置一些附加的标记，以此来指定解码选项。设置inJustDecodeBounds属性为true可以在解码的时候获取到图片的原始宽/高信息，并不会真正的去加载图片。</p>
<p>获取到图片的宽高意义何在呢？你可能会有这样的疑问，事实上只要指定Options的inSampleSize并在decode时传入Options，再将inJustDecodeBounds设置为false，就可以获得压缩后的Bitmap。而我们获取了原始图片的宽高，就可以根据我们所需要的宽高计算出压缩的比例。例如一个ARGB_8888的Bitmap分辨率为2048x1536直接加载所需的内存是12M，而指定inSampleSize为4，那么会得到一个512x384的Bitmap，所需的内存仅为0.75M。</p>
<p>上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeBitmapFromResource</span><span class="params">(Resources res,<span class="keyword">int</span> resId,<span class="keyword">int</span> reqWidth,<span class="keyword">int</span> reqHeight)</span></span>&#123;</div><div class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">        <span class="comment">//可以只获取宽高而不加载</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">        BitmapFactory.decodeResource(res,resId,options);</div><div class="line"></div><div class="line">        <span class="comment">//计算压缩比例</span></div><div class="line">        options.inSampleSize = calculateInSampleaSize(options,reqWidth,reqHeight);</div><div class="line"></div><div class="line">        <span class="comment">//解码</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(res,resId,options);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleaSize</span><span class="params">(BitmapFactory.Options options, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</div><div class="line">        <span class="comment">// 图片的高宽</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</div><div class="line">        <span class="comment">//默认不压缩</span></div><div class="line">        <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</div><div class="line">            <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt; reqHeight</div><div class="line">                    &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) &#123;</div><div class="line">                <span class="comment">//这里设置inSampleSize为2的幂是因为解码器最终还是会对非2的幂的数进行向下处理，</span></div><div class="line">                <span class="comment">// 获取到最靠近2的幂的数</span></div><div class="line">                inSampleSize *= <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> inSampleSize;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>当我们使用ImageView加载期望大小为100*100像素的图片时就可以按照如下格式写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mImageView.setImageBitmap(</div><div class="line">        decodeBitmapFromResource(getResources(),R.id.drawa,<span class="number">100</span>,<span class="number">100</span>));</div></pre></td></tr></table></figure>
<p>压缩的流程大概就到这了，继续回到RecyclerView，上面的代码实现了和ListView类似的效果，接下来要实现的是瀑布流的效果。说的高大上，其实大致流程与之前差不多，不过改一下LayoutManager就行了，直接上完整的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView rv_test;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; itemList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initData();</div><div class="line">        rv_test = (RecyclerView) findViewById(R.id.rv_test);</div><div class="line">        <span class="comment">//设置layoutManager</span></div><div class="line">        rv_test.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">2</span>, StaggeredGridLayoutManager.VERTICAL));</div><div class="line"></div><div class="line">        myAdapter mAdapter = <span class="keyword">new</span> myAdapter();</div><div class="line">        mAdapter.setItemList(itemList);</div><div class="line">        rv_test.setAdapter(mAdapter);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        itemList = <span class="keyword">new</span> ArrayList&lt;ItemBean&gt;();</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird, <span class="string">"南小鸟1"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.xiyangyang, <span class="string">"喜羊羊"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird3, <span class="string">"南小鸟2"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.blackcat, <span class="string">"黑猫"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.dog, <span class="string">"狗与剪刀"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.nike3, <span class="string">"妮可妮可"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.paojie, <span class="string">"炮姐"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber1, <span class="string">"吾王1"</span>));</div><div class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber2, <span class="string">"吾王2"</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">myAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; ItemList;</div><div class="line">        ImageResizer imgResizer = <span class="keyword">new</span> ImageResizer();</div><div class="line">        BitmapMemoryCache lruBitmapCache = <span class="keyword">new</span> BitmapMemoryCache();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemList</span><span class="params">(ArrayList&lt;ItemBean&gt; ItemList)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.ItemList = ItemList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_item, parent, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> myViewHolder(view);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            myViewHolder mholder = (myViewHolder) holder;</div><div class="line">            ItemBean it = itemList.get(position);</div><div class="line">            <span class="keyword">if</span>(lruBitmapCache.getBitmapFromMemory(it.getDesc()) != <span class="keyword">null</span>)&#123;</div><div class="line">                mholder.iv_item_img.setImageBitmap(lruBitmapCache.getBitmapFromMemory(it.getDesc()));</div><div class="line"></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//缓存图片</span></div><div class="line">                lruBitmapCache.addBitmapToMemory(it.getDesc(),imgResizer.decodeSampledBitmapFromResource(getResources(),</div><div class="line">                        it.getImg()));</div><div class="line"></div><div class="line">                mholder.iv_item_img.setImageBitmap(imgResizer.decodeSampledBitmapFromResource(getResources(),</div><div class="line">                        it.getImg()));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mholder.tv_item_desc.setText(it.getDesc());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> ItemList.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">myViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">            ImageView iv_item_img;</div><div class="line">            TextView tv_item_desc;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="title">myViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>(itemView);</div><div class="line">                iv_item_img = (ImageView) itemView.findViewById(R.id.iv_item_img);</div><div class="line">                tv_item_desc = (TextView) itemView.findViewById(R.id.tv_item_desc);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-5618087689875ae9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="瀑布流"></p>
<p>其中有两个类是之前没有的，ImageResizer和BitmapMemoryCache，前者是用来压缩的，后者是用来缓存的。因为是瀑布流，所以我没有设置期望的宽高，直接设置inSampleSize为4，压缩之后图片还是大了，在滑动的时候列表有卡顿现象，所以做了LruCache。大致就是这样，代码如下：</p>
<p>ImageResizer</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageResizer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">        <span class="comment">//解析图片而不会真正的加载</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">        BitmapFactory.decodeResource(res, resId, options);</div><div class="line">        options.inSampleSize = <span class="number">4</span>;</div><div class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(res,resId,options);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>BitmapMemoryCache</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapMemoryCache</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">"BitmapMemoryCache"</span>;</div><div class="line">    <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>)(Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div><div class="line">    <span class="keyword">int</span> catchSize = maxMemory / <span class="number">8</span>;</div><div class="line">    LruCache&lt;String,Bitmap&gt; lruCache = <span class="keyword">new</span> LruCache&lt;String,Bitmap&gt;(catchSize)&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToMemory</span><span class="params">(String key,Bitmap bitmap)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(getBitmapFromMemory(key) == <span class="keyword">null</span>)&#123;</div><div class="line">            lruCache.put(key,bitmap);</div><div class="line">            Log.i(TAG,<span class="string">" "</span>+maxMemory);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromMemory</span><span class="params">(String key)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> lruCache.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>做了缓存之后，第一次滑动……说实话还是有点卡，但是之后的确没有卡顿的现象了。果然人不能作死，没事加载大图作死不好！这里因为我的图比较少，从打的log来看我手机为一个app分配的内存是128M，1/8的内存16M来做缓存够了。如果图片比较多，内存做缓存不够的话，可以考虑用DisLruCache，不过sdk里是没有的，需要去下。关于滑动的优化还没有说完，不过今天暂时不打算继续了，明天或者有空的时候继续回来填这个坑。还有本来想写个RecyclerView上拉刷新的例子，可惜扯着扯着扯歪了，给忘了……有空再来来补上。</p>
<p>以后有机会再写一篇关于缓存的文吧，这里就不多写了。</p>
<blockquote>
<p>最后本文源码可以在<a href="https://github.com/ForgetAll/TestForRecyclerView" target="_blank" rel="external">我的github</a>获取</p>
<blockquote>
<p>在Android Studio中使用RecyclerView请在build.gradle中添加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:recyclerview-v7:23.4.0'</span></div></pre></td></tr></table></figure></p>
</blockquote>
</blockquote>
<p>eclipse中请自行百度……</p>
<blockquote>
<p>资料来源：《Android开发艺术探索》<br>　　　　　　<a href="http://hukai.me/android-training-course-in-chinese/graphics/displaying-bitmaps/load-bitmap.html" target="_blank" rel="external">Google官方培训文档中文版</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天关于是写ListView还是RecyclerView着实纠结了一会，毕竟这二者都很重要，不过最近做的东西里用的是RecyclerView，所以还是先写RecyclerView了，而且代码也撸好了。好了日常唠嗑（1/1），下面进入正题。&lt;/p&gt;
&lt;p&gt;本文包含以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用RecyclerView实现ListView的效果&lt;/li&gt;
&lt;li&gt;RecyclerView加载图片出现OOM时的一些处理&lt;/li&gt;
&lt;li&gt;RecyclerView实现瀑布流&lt;/li&gt;
&lt;li&gt;RecyclerView滑动卡顿的一些优化
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="基础" scheme="https://xiasuhuei321.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android消息机制浅析</title>
    <link href="https://xiasuhuei321.github.io/2016/05/29/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/"/>
    <id>https://xiasuhuei321.github.io/2016/05/29/Android消息机制浅析/</id>
    <published>2016-05-29T15:23:37.000Z</published>
    <updated>2016-09-03T05:45:35.624Z</updated>
    
    <content type="html"><![CDATA[<p>　　写在前面：<br>　　如果你在看本文之前没有对Android消息机制作过了解，可能会比较吃力，关于源码，不需要全部看懂，能看懂其中关键的几句代码就行了。如果在阅读过程中感到吃力，请直接跳到结尾部分看概述。</p>
<p>　　最近在看《Android开发艺术探索》，感觉真的是一本好书，恩，让我非常有读完欲望的一本书。话不多说，分享一下我的读书收获。</p>
<p>　　Android中的耗时操作需要在子线程中完成，当这些操作完成后可能会需要对UI进行相应的更新。但是Android中的UI不是线程安全的，在多线程中并发访问可能会导致UI控件处于不可预期的状态。Google没有用上锁机制来解决这个问题，而是让开发者通过Handler切换线程来达到更新UI的目的。<strong>Handler</strong>是Android消息机制的上层接口，想要解析Android消息机制还需要了解<strong>Looper</strong>和<strong>消息队列(MessageQueue)</strong>。</p>
<p>　　在具体的了解Handler、Looper和MessageQueue之前，先让我们把我们平时切换线程的流程过一遍。首先我们在主线程中创建Handler，然后在子线程中通过handler的sendMessage方法将携带子线程操作结果的数据传出，通过handler的handleMessage方法进行UI的更新，代码如下：<br>    <a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private Handler handler = new Handler()&#123;</div><div class="line">        @Override</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            tvContent.setText((String)msg.obj);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    private TextView tvContent;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        tvContent = (TextView) findViewById(R.id.tv_content);</div><div class="line"></div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                //...一些耗时操作</div><div class="line"></div><div class="line">                //耗时操作的结果</div><div class="line">                String result = &quot;我是结果&quot;;</div><div class="line"></div><div class="line">                Message msg = Message.obtain();</div><div class="line">                msg.obj = result;</div><div class="line">                handler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　因为代码比较简单，就不上结果图了。接下来解析一下以上简单的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private Handler handler = new Handler()&#123;</div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg) &#123;</div><div class="line">        tvContent.setText((String)msg.obj);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>　　首先是构造一个Handler对象，用的是默认的构造方法，看一下源码是如何实例化的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public Handler() &#123;</div><div class="line">    this(null, false);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　再追踪一下源码，发现最终是用的如下的构造方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public Handler(Callback callback, boolean async) &#123;</div><div class="line">    if (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">        final Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">        if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == 0) &#123;</div><div class="line">            Log.w(TAG, &quot;The following Handler class should be static or leaks might occur: &quot; +</div><div class="line">                klass.getCanonicalName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    if (mLooper == null) &#123;</div><div class="line">        throw new RuntimeException(</div><div class="line">            &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　说实话大部分代码我也是看不懂的，但是mLooper = Looper.myLooper()和mQueue = mLooper.mQueue，可以看出Handler得到了一个Looper和一个“队列”。查看myLooper方法的注释</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Return the Looper object associated with the current thread.  Returns </div><div class="line">* null if the calling thread is not associated with a Looper.</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>　　返回的是当前线程的Looper，如果当前线程没有Looper就返回null。所以在Handler的构造方法中，会有</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">        <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　所以在没有Looper的线程中创建Handler对象会抛以上异常。我们可以为没有Looper的线程创建一个Looper不过这里先不谈。看完了如何创建Handler之后，继续我们的流程，在子线程中我们使用handler的sendMessage()方法发送了一个Message对象，让我们看看这背后隐藏了怎样的py交……，不，怎样的操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public final boolean sendMessage(Message msg)</div><div class="line">&#123;</div><div class="line">    return sendMessageDelayed(msg, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　通过追踪源码发现最终执行了如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public boolean sendMessageAtTime(Message msg, long uptimeMillis) &#123;</div><div class="line">    MessageQueue queue = mQueue;</div><div class="line">    if (queue == null) &#123;</div><div class="line">        RuntimeException e = new RuntimeException(</div><div class="line">                this + &quot; sendMessageAtTime() called with no mQueue&quot;);</div><div class="line">        Log.w(&quot;Looper&quot;, e.getMessage(), e);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    return enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　最后一句代码是向queue中插入msg的意思，也就是说handler.sendMessage()这个方法所执行的操作就是向消息队列插入了一条message，那么这条消息又是经历了怎样的辗转才切换到了当前线程呢？显然这其中有Looper的参与,不过在了解Looper之前，需要先了解一下MessageQueue。</p>
<hr>
<h1 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h1><p>　　MessageQueue虽然叫消息队列，但实际上他是通过一个单链表的数据结构来维护消息列表。至于为什么采用单链表的数据结构，因为MessageQueue主要操作是插入和读取，而读取包含着删除操作，而单链表在插入和删除上比较有优势。关于MessageQueue还需要知道enqueueMessage()是插入操作，next()是读取并且删除的操作。需要了解的暂时就这么多了。</p>
<hr>
<h1 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h1><p>　　Looper会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。Looper最重要的方法便是loop()方法，让我们看一下loop()方法是怎样的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">        Printer logging = me.mLogging;</div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　如果MessageQueue的next方法返回了新的消息，Looper就会处理这条消息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg.target.dispatchMessage(msg);</div></pre></td></tr></table></figure>
<p>　　msg.target就是发送这条消息的Handler对象，这样Handler发送的消息最终又交给它的dispatchMessage方法来处理了。查看dispatchMessage方法源码会发现，我们之前使用的Handler的构造方法和得到Message对象的方法，最终会导致dispatchMessage方法调用handleMessage方法。</p>
<hr>
<h1 id="总结与拓展"><a href="#总结与拓展" class="headerlink" title="总结与拓展"></a>总结与拓展</h1><p>　　总的来说，我们平常使用Handler所经历的流程就是：<br>　　１.使用当前线程的Looper对象创建Handler。<br>　　２.handler.sendMessage()向Looper中的消息队列插入消息。<br>　　３.Looper通过loop方法获取消息队列的新消息，通过msg.target(发送消息的Handler)调用dispatchMessage方法处理消息。而该方法在loop方法中被调用，loop被当前线程Looper调用，所以该消息被切换到当前线程中执行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-51727507a12e18e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程.png"></p>
<p>　　在了解了Android的消息机制之后，我们可以尝试使用Handler和Looper实现两个子线程之间的消息传递。通过new Thread()创建的线程并没有Looper，为他创建一个Looper就可以使用Handler了。Looper可以通过prepare方法来创建，好了说明就到这，直接上代码！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.Looper;</div><div class="line"><span class="keyword">import</span> android.os.Message;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> Handler mhandler;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1();</div><div class="line">        thread1.setName(<span class="string">"Thread#1"</span>);</div><div class="line">        thread1.start();</div><div class="line"></div><div class="line">        mhandler = thread1.getHandler();</div><div class="line">        <span class="keyword">while</span>(mhandler == <span class="keyword">null</span>)&#123;</div><div class="line">            mhandler = thread1.getHandler();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">                    Message msg = Message.obtain();</div><div class="line">                    msg.obj = System.currentTimeMillis();</div><div class="line">                    mhandler.sendMessage(msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"Thread#2"</span>).start();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> Handler mhandler;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> mhandler;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//为该线程创建Looper</span></div><div class="line">            Looper.prepare();</div><div class="line">            <span class="comment">//初始化handler</span></div><div class="line">            mhandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                    Log.i(TAG, Thread.currentThread().getName() + <span class="string">" the message is:"</span> + msg.obj);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            Looper.loop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-e2562d08f3400709.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果.png"></p>
<p>　　很明显,Thread#2成功地将消息传递到了Thread#1的handler中。其实关于Looper.prepare()也值得深究，涉及到了ThreadLocal，不过我这里就不管了。<br>　　<br>　　最后再安排一下今后一段时间内要做的事，从第一篇简书文章到这第二篇，中间隔了很久了。倒是没有偷懒，一直在敲代码，不过最近算是把一直想做的东西做了，是时候来一波学习总结了。</p>
<blockquote>
<p>资料来源：《Android开发艺术探索》</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　写在前面：&lt;br&gt;　　如果你在看本文之前没有对Android消息机制作过了解，可能会比较吃力，关于源码，不需要全部看懂，能看懂其中关键的几句代码就行了。如果在阅读过程中感到吃力，请直接跳到结尾部分看概述。&lt;/p&gt;
&lt;p&gt;　　最近在看《Android开发艺术探索》，感觉真的是一本好书，恩，让我非常有读完欲望的一本书。话不多说，分享一下我的读书收获。&lt;/p&gt;
&lt;p&gt;　　Android中的耗时操作需要在子线程中完成，当这些操作完成后可能会需要对UI进行相应的更新。但是Android中的UI不是线程安全的，在多线程中并发访问可能会导致UI控件处于不可预期的状态。Google没有用上锁机制来解决这个问题，而是让开发者通过Handler切换线程来达到更新UI的目的。&lt;strong&gt;Handler&lt;/strong&gt;是Android消息机制的上层接口，想要解析Android消息机制还需要了解&lt;strong&gt;Looper&lt;/strong&gt;和&lt;strong&gt;消息队列(MessageQueue)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　在具体的了解Handler、Looper和MessageQueue之前，先让我们把我们平时切换线程的流程过一遍。首先我们在主线程中创建Handler，然后在子线程中通过handler的sendMessage方法将携带子线程操作结果的数据传出，通过handler的handleMessage方法进行UI的更新，代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="基础" scheme="https://xiasuhuei321.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android之回调函数</title>
    <link href="https://xiasuhuei321.github.io/2016/05/12/Android%E4%B9%8B%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://xiasuhuei321.github.io/2016/05/12/Android之回调函数/</id>
    <published>2016-05-12T12:33:58.000Z</published>
    <updated>2016-09-03T05:49:07.964Z</updated>
    
    <content type="html"><![CDATA[<p>最近对Android中的回调产生了一些疑问，看了不少博文才算是明白了一点，接下来分享一下我的收获。</p>
<p><strong> 写在正文之前，大神可以跳过： </strong><br>　　1.接口不可以实例化，但可以创建一个接口对象。<br>　　2.你可能见过这样的语法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Button bt_add = (Button) findViewById(R.id.bt_add);</div><div class="line">bt_add.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　我们都知道OnClickListener()是一个接口，但是上文中  new OnClickListener()并非是实例化接口，而是表示一个匿名内部类实现该接口。<br><a id="more"></a></p>
<hr>
<h4 id="1-回调函数定义"><a href="#1-回调函数定义" class="headerlink" title="1.回调函数定义"></a>1.回调函数定义</h4><p>　　回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。<br>　　当然，看了这么正式的定义，其实对我来说并没有多大的帮助，毕竟对指针直接接触比较少，对于这个定义也没有多深的感受。还是直接看回调机制吧！</p>
<hr>
<h4 id="2-回调机制"><a href="#2-回调机制" class="headerlink" title="2.回调机制"></a>2.回调机制</h4><p>⑴定义一个回调函数；<br>⑵提供函数实现的一方在初始化的时候，将回调函数的函数指针注册给调用者；<br>⑶当特定的事件或条件发生的时候，调用者使用函数指针调用回调函数对事件进行处理。</p>
<p>　　对于百度百科上的这个说法，有一股扑面而来的熟悉感，就算是“函数指针”这么个陌生的名词都挡不住。这不就是上文代码吗？onClick()方法就是回调方法，在Button被点击这个事件发生时，我们使用onClick()回调方法对事件进行处理。不同的时我们不能提供指针，而是提供了一个接口。事实上在java中正是通过接口来实现回调方法。</p>
<hr>
<h4 id="3-模拟自定义控件实现回调方法"><a href="#3-模拟自定义控件实现回调方法" class="headerlink" title="3.模拟自定义控件实现回调方法"></a>3.模拟自定义控件实现回调方法</h4><p>　　网上很多用打电话的例子来说明，而我最近刚看了一点自定义控件，有点感觉，就用控件来说明。<br>　　假设我现在自定义了一个继承于View的开关控件，什么onMeasure()，onDraw()之类的都写好了，不用关心了，而且这个开关需要我关心的就是他是开还是关的状态。这时候我们就需要一个回调方法，将开关的“开”和“关”状态传递出来。好，你大概了解了功能和需求，以下是模拟控件的代码，并非可以部署到真机上的代码：</p>
<p><strong> 接口代码： </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 状态变化监听</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StateChangeListener</span> </span>&#123;</div><div class="line">	<span class="comment">// 回调方法</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">StateChange</span><span class="params">(<span class="keyword">boolean</span> State)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 开关控件代码： </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自定义开关--!</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenClose</span> </span>&#123;</div><div class="line">	<span class="comment">// 持有一个接口对象</span></div><div class="line">	StateChangeListener stateChangeListener;</div><div class="line"></div><div class="line">	<span class="comment">// 提供注册事件监听的方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnChangeListener</span><span class="params">(StateChangeListener stateChangeListener)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.stateChangeListener = stateChangeListener;</div><div class="line">        <span class="comment">//因为是模拟，所以需要在此将控件状态传出</span></div><div class="line">		IsClick(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">    <span class="comment">//是否被点击</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsClick</span><span class="params">(<span class="keyword">boolean</span> isClick)</span> </span>&#123;</div><div class="line">		<span class="comment">// 通过接口对象传控件状态</span></div><div class="line">		stateChangeListener.StateChange(isClick);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 测试代码： </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallBackTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		OpenClose oc = <span class="keyword">new</span> OpenClose();</div><div class="line">		oc.setOnChangeListener(<span class="keyword">new</span> StateChangeListener() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StateChange</span><span class="params">(<span class="keyword">boolean</span> State)</span> </span>&#123;</div><div class="line">				<span class="keyword">if</span> (State) &#123;</div><div class="line">					System.out.println(<span class="string">"开"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					System.out.println(<span class="string">"关"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我这还可以提供一张图，你可以很直观的感受到这是个什么样的控件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-c1a657e7ad78d465.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="别打我……"></p>
<p>以上就是我的收获，如果错误或者不同的看法和见解欢迎指出。</p>
<hr>
<blockquote>
<p><strong>回调函数定义和机制来自：</strong><a href="http://baike.baidu.com/link?url=95tuwFdMDbPr5IDqLrJoXKDaEcyv9c85ALl6o_GW_Y9-GF_GdHDswxHG-HcZEeuEiWMGHhtTENqokP9f6gpz3a" target="_blank" rel="external">百度百科</a></p>
</blockquote>
<p><strong>推荐阅读:</strong></p>
<blockquote>
<p><strong>这篇文章不错:</strong>  <a href="http://blog.csdn.net/maximus_chan/article/details/40381157" target="_blank" rel="external">java回调机制</a><br><strong>文中提到的控件的实现:</strong><a href="http://www.jianshu.com/p/7b5bbc96ad1b" target="_blank" rel="external">Android：初识自定义控件</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近对Android中的回调产生了一些疑问，看了不少博文才算是明白了一点，接下来分享一下我的收获。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 写在正文之前，大神可以跳过： &lt;/strong&gt;&lt;br&gt;　　1.接口不可以实例化，但可以创建一个接口对象。&lt;br&gt;　　2.你可能见过这样的语法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Button bt_add = (Button) findViewById(R.id.bt_add);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bt_add.setOnClickListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnClickListener() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;　　我们都知道OnClickListener()是一个接口，但是上文中  new OnClickListener()并非是实例化接口，而是表示一个匿名内部类实现该接口。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://xiasuhuei321.github.io/tags/Android/"/>
    
      <category term="基础" scheme="https://xiasuhuei321.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
